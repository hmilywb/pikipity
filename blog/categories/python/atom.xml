<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Python | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Pygame 编写的生命游戏]]></title>
    <link href="http://pikipity.github.com/blog/the-game-of-life-using-pygame.html"/>
    <updated>2013-07-27T19:58:00+08:00</updated>
    <id>http://pikipity.github.com/blog/the-game-of-life-using-pygame</id>
    <content type="html"><![CDATA[<p><a href="http://pikipity.github.io/blog/the-game-of-life.html">之前用 Matlab 编写了一个生命游戏</a>，但是效率实在太低了，只要矩阵稍微大一点，我的小 MacBook Pro 就跑不动了，恰巧最近正在跟随 <a href="http://eyehere.net/2011/python-pygame-novice-professional-1/">“eyeHere”</a> 这样一个网站学习 <a href="http://www.pygame.org/news.html">Pygame</a>。<a href="http://www.pygame.org/news.html">Pygame</a> 是一个将 Python 语言和 <a href="http://zh.wikipedia.org/wiki/SDL">SDL</a> 结合的 Python 库。<a href="http://zh.wikipedia.org/wiki/SDL">SDL</a> 是一个跨平台开源的多媒体库，源代码用 C 语言写成，一般用于游戏、模拟器和多媒体播放器的开发，顺带一提，Linux 上很多游戏都是用 SDL 开发的，当年玩的<a href="http://zh.wikipedia.org/wiki/%E9%9F%A6%E8%AF%BA%E4%B9%8B%E6%88%98">《韦诺之战》</a>也使用它开发的，还有当年红极一时的<a href="http://zh.wikipedia.org/wiki/%E9%AD%94%E5%9F%9F%E5%B9%BB%E5%A2%83%E4%B9%8B%E6%B5%B4%E8%A1%80%E6%88%B0%E5%A0%B42004">《虚拟竞技场》</a>系列的 Linux 版本等等。</p>

<p>Pygame 可以直接在<a href="http://www.pygame.org/download.shtml">官网上下载</a>到，无论是 Windows 版还是 Mac OS X 版都已经打好了包，安装什么的都很方便。</p>

<p>我把我那个用 Matlab 编写的生命游戏，用 Python 重写之后，debug 的时候运行还不是很流畅，但是实际运行的时候，速度超级理想，以至于我最初设定的30的FPS都显得比较大了。用键盘操作，在暂停模式下可以用鼠标添加或是消除细胞，键盘键位如下：</p>

<ul>
  <li>b键：开始游戏</li>
  <li>s键：暂停游戏（可以用鼠标添加或是消除细胞）</li>
  <li>c键：更改大小（在暂停模式下更改。书写格式为：每行细胞数量,每列细胞数量，回车确定）</li>
</ul>

<p>有兴趣的可以到<a href="https://github.com/pikipity/Game_of_life_python.git">我的 Github </a>去看看，下面是截图：</p>

<p><img src="https://lh3.googleusercontent.com/-xd-_uQQvtRk/UfOyj9m4UCI/AAAAAAAAA58/L1DBnX41zm0/s640/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-27%2520%25E4%25B8%258B%25E5%258D%25887.40.40.png" alt="暂停画面" /></p>

<p><img src="https://lh6.googleusercontent.com/-PRk7O1VVdFs/UfOyjw0r3BI/AAAAAAAAA6A/Zba8eMWtklk/s640/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-27%2520%25E4%25B8%258B%25E5%258D%25887.40.54.png" alt="运行画面" /></p>

<p><img src="https://lh6.googleusercontent.com/-_9-BV2hoBEs/UfOyj_Nr1EI/AAAAAAAAA54/p2WOY7we-9I/s576/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-27%2520%25E4%25B8%258B%25E5%258D%25887.41.28.png" alt="更改大小" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起调戏谷歌娘]]></title>
    <link href="http://pikipity.github.com/blog/download-google-voice.html"/>
    <updated>2013-06-06T15:23:00+08:00</updated>
    <id>http://pikipity.github.com/blog/download-google-voice</id>
    <content type="html"><![CDATA[<p>最近发现谷歌娘的声音真的是好有爱啊，但是下载的时候太麻烦了。在<a href="https://translate.google.com.hk/?hl=en&amp;tab=wT">谷歌翻译</a>里，为了下载一段谷歌娘的声音，还需要打开开发者工具去找对应的 requirment ，麻烦死了。这种重复性工作还是交给软件自己来完成吧，于是写了这样一个软件，用来自动下载谷歌娘“甜美、可人”的声音。</p>

<p>可以在 Windows, Linux, Mac OS X 上运行，对于 Linux 和 Mac OS X，直接在解压目录下打开终端，运行 <code>python ./main.py</code> 即可。Windows 用户也可以直接用 “setup.exe” 安装或是直接点击 “dist” 文件夹下面的 “main.exe” 直接运行程序。</p>

<p>你可以到<a href="http://pikipity.github.io/Download-Google-Voice">这里</a>下载程序。下面是程序截图：</p>

<p><img src="http://i1302.photobucket.com/albums/ag140/pikipity/5C4F5E555FEB71672013-06-064E0B534832532_zps2b24e890.png" border="0" alt="Download-Google-Voice for Mac" /></p>

<p><img src="http://i1302.photobucket.com/albums/ag140/pikipity/5C4F5E555FEB71672013-06-064E0B534833026_zps8f4eb922.png" border="0" alt="Download-Google-Voice for Windows" /></p>

<p>PS: 英文语音的谷歌娘变成大叔音了~~~~~  o(&gt;﹏&lt;)o  +_+  /(ㄒoㄒ)/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符动画转化器]]></title>
    <link href="http://pikipity.github.com/blog/video-to-txt.html"/>
    <updated>2013-05-30T20:45:00+08:00</updated>
    <id>http://pikipity.github.com/blog/video-to-txt</id>
    <content type="html"><![CDATA[<p>这是一个字符动画转化器，可以将普通视频转换成字符动画并播放。软件主页在<a href="http://pikipity.github.io/video-to-txt">这里</a>。图包在<a href="http://pan.baidu.com/share/link?shareid=552715&amp;uk=4080321956">这里</a>。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=584094&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['今天晚上吃神马？' 基本完成]]></title>
    <link href="http://pikipity.github.com/blog/what-to-eat-v1-dot-0-publish.html"/>
    <updated>2013-05-22T11:00:00+08:00</updated>
    <id>http://pikipity.github.com/blog/what-to-eat-v1-dot-0-publish</id>
    <content type="html"><![CDATA[<p>“今天晚上吃神马？” Version 1.0 完成。可以到<a href="http://pikipity.github.io/what-to-eat/">项目主页</a>下载。下载下来之后，源码、打包之后的程序都在其中，主程序在 “dist” 文件夹中，双击即可使用（注意路径中不要有中文）。</p>

<p>Python 编写，Tkinter 做 GUI，预想中的功能都已经实现：</p>

<ol>
  <li>
    <p>从 <a href="http://takeaway.happymacao.com/">take away Macao</a> 自动抓取餐厅信息，包括：</p>

    <ol>
      <li>餐厅名</li>
      <li>电话</li>
      <li>附注</li>
      <li>营业时间</li>
      <li>餐厅地址</li>
      <li>菜单网址（点击，从浏览器直接打开）</li>
    </ol>
  </li>
  <li>随机抽取一个餐厅</li>
  <li>可以设置自己所在地区，根据所在地区抓取不同的餐厅</li>
</ol>

<p>下一步需要改善的地方：</p>

<ol>
  <li>找到一种能够释放内存的方法：连续多次点击之后，由于开启过多进程导致内存占用过大</li>
  <li>找到一种抓取图片的好方法，直接抓取菜单并显示（不用打开浏览器了），抓取餐厅标志并显示</li>
  <li>还要改善一下难看的界面</li>
</ol>

<p>难看的界面：</p>

<p><img src="https://lh6.googleusercontent.com/-0LOtRStfxr0/UZwyBbsQVkI/AAAAAAAAA1M/PIMFjt78Kgc/s493/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.46.25.png" alt="主界面" /></p>

<p><img src="https://lh5.googleusercontent.com/-a2Oi-gBpdlA/UZwyBUl35AI/AAAAAAAAA1U/fN6xmErUDyE/s495/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.07.png" alt="选定停手" /></p>

<p><img src="https://lh3.googleusercontent.com/-NGCLPdiXNts/UZwyBt50H0I/AAAAAAAAA1Y/bnrhcwGZ9cQ/s594/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.30.png" alt="设定界面" /></p>

<p><img src="https://lh3.googleusercontent.com/-41jnXgPFCN0/UZwyB5nHiJI/AAAAAAAAA1c/cNVfhZjztZ0/s571/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.42.png" alt="关于我" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 下用 Tkinter 制作 GUI]]></title>
    <link href="http://pikipity.github.com/blog/python-tkinter.html"/>
    <updated>2013-04-11T00:36:00+08:00</updated>
    <id>http://pikipity.github.com/blog/python-tkinter</id>
    <content type="html"><![CDATA[<h3 id="gui">什么是 GUI</h3>

<p>既然要制作 GUI，那么就要先明确什么是 GUI。<a href="http://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2">wiki</a>上是这么说的:</p>

<blockquote>
  <p>图形用户界面（Graphical User Interface，简称 GUI）是指采用图形方式显示的计算机操作用户接口。</p>
</blockquote>

<p>曾经有个同学这么跟我说，“MATLAB 有个 GUI 的功能，貌似很强大啊”，听完我就凌乱了，图形用户界面什么时候成了 MATLAB 的专属功能了？我平常用的 Windows 或者 Linux、Mac 都是在图形用户界面下进行操作的，如果想看一看命令行界面，Windows 可以在“运行”中输入 <code>cmd</code> 然后回车，Linux下可以直接 <code>alt+F1</code>（切换回来用 <code>alt+F7</code>）。简单来说，GUI 提供给用户一种更加直白的图形化的人机交互界面。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/X-Window-System.png/720px-X-Window-System.png" width="480" alt="1990年代早期Unix 平台上运行的 X Window System" /></p>

<h3 id="python--gui-">Python 中的 GUI 工具包</h3>

<p>如果想用 Python 语言制作出一个程序的 GUI，不仅仅可以用 Tkinter 一个包，最常见的还有 wxPython 和 PyQt，还有很多很多（我不熟悉啊 (╯▽╰)）。</p>

<ol>
  <li>
    <p>wxPython：wxPython 创建的是 wxWidgets。它的好处是，可以通过简单的命令就创建出比较漂亮的界面，并且在中国的使用人数挺多，遇到问题在网上找起答案来比较轻松。缺点是并不是 Python 的标准工具包，还需要另外安装。官网在<a href="http://www.wxpython.org/">这里</a>，官网提供的英文教程在<a href="http://wiki.wxpython.org/Getting%20Started">这里</a></p>

    <p><img src="https://lh3.googleusercontent.com/-lckWJC8vAoc/UWYhrAqM7kI/AAAAAAAAAqw/UTu3LsfWLXA/s640/wxPython.jpg" width="480" alt="wxPython" /></p>
  </li>
  <li>
    <p>PyQt：和名字一样，创建的是 Qt 的 GUI。Qt 的 GUI 当然是漂亮的不能再漂亮了。优点是，创建出的 GUI 很漂亮，且有图形化的 GUI 设计软件 Qt Designer 来使整个设计过程简单化。缺点：同样不是 Python 的标准工具包，还需要另外安装，如果手工输入 GUI 代码习惯了，有时候图形化的 GUI 设计软件反而不习惯。官网在<a href="http://www.riverbankcomputing.co.uk/software/pyqt/intro">这里</a>，<a href="http://blog.csdn.net/wescom/article/details/4727114">这里</a>有一个比较不错的中文教程，主要讲的是 Qt Designer 的入门使用，很不错。</p>

    <p><img src="https://lh6.googleusercontent.com/-mCcMvwpzwqQ/UWYhrOvfVpI/AAAAAAAAAqs/plQq7BcSrwU/s640/QtPy.png" width="480" alt="Qt Designer" /></p>
  </li>
  <li>
    <p>Tkinter: 从名字可以看出，创建的是 Tk 的GUI。优点很明显，是一个已经半官方化的工具包，可以直接使用，无需安装，并且教程众多，几乎所有介绍 Python 入门的书，只要提及 GUI 设计都会讲 Tkinter。缺点一样明显，设计出的 GUI 很难看，要问多难看，你自己看看 Python 的那个 IDLE 就好了，土的掉渣啊，而且元件一样很少，如果只是编写一些小程序的话还可以，如果编写大程序要用到比较复杂的元件的话，就需要从提供的元件里找一些替代品了，手工输入代码，有时候很累啊。但是我认为用 Tkinter 来入门 GUI 设计是很好的，因为思路清晰，代码简单，这也就是为什么我在这里只介绍 Tkinter 的原因。一个英文教程在<a href="http://effbot.org/tkinterbook/tkinter-index.htm#class-reference">这里</a>（<em style="color: red">之前的网站已经不在了，作者将其移到了这里，貌似开始将从前未写完的补充完整了</em>），由于我不想记住所有元件的方法，所以用到的话就来这里查询，很方便。</p>

    <p><img src="https://lh3.googleusercontent.com/-mTq-K8KM-Tk/UWYhrLi4D2I/AAAAAAAAAq0/bRsZe5macLk/s512/Tkinter.png" width="480" alt="Tkinter" /></p>
  </li>
</ol>

<h3 id="gui-">GUI 的设计基本思路</h3>

<p>但你开始学习 Python 的时候，所有都会考诉你，Python 是 <a href="http://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">OOP（面向对象程序设计）</a>的程序语言，但是我认为“类”的概念对于初学者是非常难以理解的，而且也没有人规定在 Python 中必须使用“类”，所以我下面的例子，都不是以定义“类”的形式出现，而是以简单的定义“函数”的形式出现，使代码简单、易懂。</p>

<p>对于 GUI 的设计，我认为是“不要着急，不要着急”。先确保实现主要功能的函数正常运行再来考虑 GUI 也不迟。GUI 的设计主要包括下面三个步骤：</p>

<ol>
  <li>创建主窗体</li>
  <li>创建元件</li>
  <li>显示元件</li>
  <li>进入窗体的主循环</li>
</ol>

<p>下面是一个简单的例子：</p>

<pre><code>import Tkinter

root=Tkinter.Tk()  %创建主窗体
MainLabel=Tkinter.Label(root,text="I am so ugly. -- Tkinter",font="Times 16 bold")  %创建元件
MainLabel.pack()  %显示元件
root.mainloop()  %进入窗体的主循环
</code></pre>

<p>这个例子中，只包含一个元件是 <code>Label</code>，最后效果就是</p>

<p><img src="https://lh6.googleusercontent.com/-W2YkdsudA-8/UWYmD-s8nDI/AAAAAAAAArE/zVuwNeJgLeA/s230/Screen%2520Shot%25202013-04-11%2520at%252010.53.57%2520AM.png" width="200" /></p>

<p>根据需要，可以在主窗口中创建多个元件，每一个元件所拥有的参数不同，但是有一点是一样的，就是第一个参数一定是其所属的窗口的变量名。上面的例子中，元件 <code>Label</code>就是隶属于 <code>root</code>，所以在调用 <code>pack</code> 方法之后，这个元件就会在 <code>root</code> 窗口中显示了，只与显示的位置和显示的样子，需要调整 <code>pack</code> 方法的参数，我这里使用默认值，所以什么参数也没有，具体 <code>pack</code> 的用法可以参照<a href="http://www.360doc.com/content/12/0922/02/3234041_237501468.shtml">这里</a>。</p>

<p>这三步其实就是 Tkinter GUI 设计的全部了，剩下的就是每个元件的位置、样子、显示的文字、显示的图像、调用的函数等等元件参数上的设定了，这就涉及到每个元件包含哪些参数、每个参数是什么意思的问题了，这个可以通过查询<a href="http://effbot.org/tkinterbook/tkinter-index.htm#class-reference">我提到的那个网站</a>来得到。</p>

<p>在 GUI 设计中有以下几点需要注意（<strong>持续更新中</strong>）：</p>

<ol>
  <li>
    <p>对于元件函数的调用，有两种方式：直接绑定和间接绑定。直接绑定就是在元件 <code>Button</code> 中的参数 <code>command</code> 中设定回调的函数名称，如下：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=InputString)
</code></pre>

    <p>间接绑定是用 <code>bind</code> 方法，对于所有元件都有这个方法，形式如下：</p>

    <pre><code>ButtonInput.bind('&lt;Return&gt;',InputString)
</code></pre>

    <p><code>bind</code> 需要指定一种触发方式，这里的触发方式就不再仅仅局限于 <code>Button</code> 的左键单击了，键盘输入、鼠标点击都是可以的，我这里的触发方式是 <code>&lt;Return&gt;</code>，也就是回车。但是要注意的是，<code>bind</code> 是绑定在一个元件上的，也就是说，当焦点在这个元件上的时候触发才有用，而且回调的函数必须要要有一个 <code>event</code> 作为输入参数，如果没有就直接 <code>None</code> 好了，如下：</p>

    <pre><code>def InputString(event=None):
   …
   …
   …
</code></pre>

    <p>这两种方法使用的时候有一个共同需要注意的地方就是，回调函数不要出现参数，下面这种就是错误的：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=InputString())
</code></pre>

    <p>如果这样，程序就会直接调用函数 <code>InputString()</code>，而不是等到用户点击按钮的时候再调用了，如果一定要向回调的函数中加入参数的话，就用 <code>lambda</code> 吧，如下：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=lambda x: InputString(x))
</code></pre>
  </li>
  <li>显示元件的方法不仅仅有 <code>pack()</code>，还有 <code>grid()</code>，如果元件排列需要很整齐，可以用 <code>grid()</code>，通过输入行数和列数来控制元件的显示位置，两者的比较和使用，可以参见<a href="http://purpen.iteye.com/blog/74830">这里</a>。</li>
  <li>创建主窗口用 <code>Tkinter.Tk()</code>，但是有的时候需要有一些子窗口，可以用 <code>Tkinter.Toplevel()</code> 来创建，保证子窗口一创建出来就在所有窗口的最前面。当运行完某个回调函数需要找回焦点的时候可以用所有元件都有的方法 <code>focus()</code>，来得到某个元件的焦点。</li>
  <li>
    <p>窗口退出的时候，可以用方法 <code>quit()</code>，也可以用 <code>destroy()</code>，比如：</p>

    <pre><code>root.quit()
</code></pre>
  </li>
  <li>
    <p>如果某个元件需要更新，比如图片刷新，可以先调用 <code>destroy()</code> 这个方法摧毁掉这个元件，再将这个元件重建。如果只是 <code>Label</code> 元件的文字上的变动（比如状态栏的文字变化），可以用 <code>StringVar()</code>，需要输入什么直接调用 <code>set()</code> 方法就可以了，如下：</p>

    <pre><code>v = Tkinter.StringVar()
Tkinter.Label(master, textvariable=v).pack()
v.set("New Text!")
</code></pre>
  </li>
  <li>
    <p>菜单栏的创建比较麻烦，如下：</p>

    <pre><code> from Tkinter import *
 root = Tk()

 def hello():
     print('hello')

 def about():
     print('我是开发者')

 menubar = Menu(root)

 #创建下拉菜单File，然后将其加入到顶级的菜单栏中
 filemenu = Menu(menubar,tearoff=0)
 filemenu.add_command(label="Open", command=hello)
 filemenu.add_command(label="Save", command=hello)
 filemenu.add_separator()
 filemenu.add_command(label="Exit", command=root.quit)
 menubar.add_cascade(label="File", menu=filemenu)

 #创建另一个下拉菜单Edit
 editmenu = Menu(menubar, tearoff=0)
 editmenu.add_command(label="Cut", command=hello)
 editmenu.add_command(label="Copy", command=hello)
 editmenu.add_command(label="Paste", command=hello)
 menubar.add_cascade(label="Edit",menu=editmenu)
 #创建下拉菜单Help
 helpmenu = Menu(menubar, tearoff=0)
 helpmenu.add_command(label="About", command=about)
 menubar.add_cascade(label="Help", menu=helpmenu)

 #显示菜单
 root.config(menu=menubar)

 mainloop()
</code></pre>

    <p>其中 <code>tearoff=0</code> 就是下拉菜单和窗口是一体的，不能独立形成一个窗口，效果如下：</p>

    <p><img src="https://lh6.googleusercontent.com/-7vMkEb-xO1A/UWfmMhlAm8I/AAAAAAAAAvs/vWqDhrNnK5o/s136/Screen%2520Shot%25202013-04-12%2520at%25206.46.35%2520PM.png" width="200" /></p>

    <p>如果 <code>tearoff=1</code>，则效果如下，点击那个虚线会形成一个新的窗口。</p>

    <p><img src="http://pic002.cnblogs.com/images/2012/370835/2012102220204555.png" width="200" /><img src="http://pic002.cnblogs.com/images/2012/370835/2012102220205355.png" width="200" /></p>
  </li>
  <li>简单的提示窗口（比如报错之类的），可以直接调用 <code>tkMessageBox</code> 库，具体用法可以参见<a href="http://www.pythonware.com/library/tkinter/introduction/standard-dialogs.htm">这里</a>。简单的数字输入、文件选取、颜色选取，可以直接调用 <code>tkSimpleDialog</code> 库，具体用法可以参见<a href="http://www.pythonware.com/library/tkinter/introduction/x1164-data-entry.htm">这里</a></li>
  <li>
    <p>Tkinter 自带的下拉框元件 <code>Listbox</code> 很不好用，可以使用 <code>ttk</code> 库中的 <code>Combobox</code> 元件，使用如下：</p>

    <pre><code>boudrate=Tkinter.StringVar()
boudrate.set("9600")
manul_boudrate=ttk.Combobox(root,text=boudrate,values=["2400","9600","12900"])
</code></pre>

    <p>需要得到 <code>Combobox</code> 中选中的字符串的时候，直接 <code>boudrate.get()</code> 就可以了。</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
