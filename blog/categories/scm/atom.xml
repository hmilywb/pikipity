<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: SCM | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/scm/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第八章 串口通信]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-8.html"/>
    <updated>2013-04-27T17:41:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-8</id>
    <content type="html"><![CDATA[<p>串口通信是CPU与周边其他设备传递数据的一种方式。8051单片机使用一组<a href="http://baike.baidu.com/view/15524.htm">全双工</a>的<a href="http://zh.wikipedia.org/wiki/UART">UART</a>，进行资料传输</p>

<h2 id="uart">UART的传输结构</h2>

<p>UART在传输一个字节（8个位元）的时候会在开始加入一个起始位元（一般为0），在末尾加上一个结束位元（一般为1），资料的传输如下：</p>

<pre><code>起始位元(0)  bit0 bit1 bit2 bit3 bit4 bit5 bit6 bit7 结束位元(1)
</code></pre>

<p>UART的接受端没有资料的时候为高电平（1），当检测到出现0时，开始接受数据，接收完8位数据之后，结束。注意：一个字节的数据是从最低位开始发送的。</p>

<p>这种传输方式也被计作<code>8N1</code>，第一个数字代表传输的符号数（此处为一个字节，8位，所以为”8”），第二个是是否根据数据中1的个数来进行验错（此处为”N”，意思是不验错，还可以为”E”，代表1的个数为偶数，”O”代表1的个数位奇数），最后一个数字是结束位元（此处结束位元为“1”）</p>

<h2 id="section">传输速度</h2>

<p>由于传输的数据很简单，所以通常以波特率来衡量传输速度，波特率指的是一秒钟传输的符号的个数，一般UART常用的波特率为1200、2400、4800、9600及19200等。</p>

<p>注意：不要和<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E7%89%B9%E7%8E%87">比特率</a>混淆，波特率指的是一秒钟传输的符号的个数，根据不同的调制形式，一个符号上可负载多个比特信息。比特率指的是1秒传输的比特数。</p>

<p>一般发射和接受端的波特率必须一样，否则会出现误传，但是如果波特率相差不是很大的话，错误率亦不会很大。</p>

<h2 id="uart-1">8051中UART工作机制</h2>

<p>当UART串口检测到有信号传入时，便将8位信号全部存到<code>SBUF</code>寄存器中，然后接受中断旗标置一，进入中断向量。</p>

<p>当向<code>SBUF</code>中移入数据的时候，UART便会将其发送出去，发送结束后，发送中断旗标置一，进入中断向量。</p>

<p>在发送和接受的过程中会使用 <code>Timer1</code> 来控制传输速率（波特率）</p>

<p>注意：尽管中断旗标不一样，但是中断向量却是同一个，都是 <code>23H</code>，所以在中断向量要判断到底是哪一个旗标让程序进入中断的。</p>

<h2 id="uart-2">UART设置</h2>

<p>由于UART要设置<code>Timer1</code>来控制波特率，所以设置比较复杂。需要用到<code>PCON</code>、<code>SCON</code>和<code>TMOD</code>、<code>TH1</code>、<code>TL1</code>。</p>

<h3 id="pcon">PCON</h3>

<p>不可位元寻址</p>

<pre><code>SMOD  -  -  -  GF1  GF0  PD  IDL
</code></pre>

<p>和UART有关的就是<code>SMOD</code>位，在后面的波特率计算公式中会出现。</p>

<h3 id="scon">SCON</h3>

<p>可位元寻址</p>

<pre><code>SM0  SM1  SM2  REN  TB8  RB8  TI  RI
</code></pre>

<ul>
  <li>
    <p>SM0与SM1：传输模式选择位</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">SM0</th>
          <th style="text-align: center">SM1</th>
          <th style="text-align: center">模式</th>
          <th style="text-align: center">描述</th>
          <th style="text-align: center">波特率</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">0</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center"><a href="http://elearning.stut.edu.tw/mechelec/ch8.htm">一般用于I/O扩充</a></td>
          <td style="text-align: center"><script type="math/tex">\frac{f_{os}}{12}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">0</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">8位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{32}\times\frac{f_{os}}{12(256-TH1)}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">1</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center">2</td>
          <td style="text-align: center">9位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{64}f_{os}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">1</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">3</td>
          <td style="text-align: center">9位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{32}\times\frac{f_{os}}{12(256-TH1)}</script></td>
        </tr>
      </tbody>
    </table>

    <p>一般使用模式1就可以了。</p>
  </li>
  <li>SM2: 在模式2和3中使能通信特性，一般不用。</li>
  <li>REN：使能接受，置一就是允许接受，置零就是不允许接收。</li>
  <li>TB8：在模式2和3中设定传输的第九位。</li>
  <li>RB8：在模式2和3中设定接受的第九位。</li>
  <li>TI：发送中断旗标。不能硬件置零。</li>
  <li>RI：接受中断旗标。不能硬件置零。</li>
</ul>

<h3 id="timer1">Timer1的设定</h3>

<p>一般选择8位自动重载模式就可以了，根据上面的波特率就可以计算出<code>TH1</code>中应该重载的数值。下面是一张设置对应表。</p>

<p><img src="https://lh4.googleusercontent.com/-IwsFV34WlVM/UXvO5DQs7qI/AAAAAAAAAww/nKiVKocEdsI/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-04-27%2520%25E4%25B8%258B%25E5%258D%25889.12.41.png" alt="UART设置对应表" width="450" /></p>

<h3 id="section-1">设置举例</h3>

<pre><code>;PCON设置
ANL PCON,#01111111B ;这里为SMOD=0，如果SMOD=1，就 ORL PCON,#10000000B
;设置传输模式
CLR SM0
SETB SM1
CLR SM2
;设置允许接受
SETB REN
;设置波特率
MOV TMOD,#00100000B ;Timer1 8位自动重载
MOV TH1,#0FDH       ;9600bps
SETB TR1            ;Timer1开始计时
;使能中断
SETB ES
SETB EA
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第七章 外部中断]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-7.html"/>
    <updated>2013-04-27T17:13:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-7</id>
    <content type="html"><![CDATA[<p>8051单片机提供两个外部中断口，当从这两个外部中断口接收到外部中断信号时程序就会跳到对应的中断向量的位置。这两个外部中断使用的是<code>P3.2/INT0</code>和<code>P3.3/INT1</code>两个口。<code>INT0</code>对应的中断向量为<code>03H</code>，<code>INT1</code>对应的中断向量为<code>13H</code>。</p>

<h3 id="section">外部中断的设置</h3>

<p>外部中断的设置使用的是可位元寻址的<code>TCON</code>的后四位，<code>TCON</code>各位的分布为（已在<a href="http://pikipity.github.com/blog/scm-priciple-6.html">第六章 计时器/计数器</a>中提过）:</p>

<pre><code>TF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0
</code></pre>

<ul>
  <li>IE1与IE0: 当检测到外部中断信号的边沿时，硬件置1；进入外部中断后，硬件置零。与软件无关</li>
  <li>IT0与IT1: 由软件置一或清零，控制外部中断的触发类型。置一则为下降沿除法（检测到下降沿就进入中断）。置零则为低电平触发（检测到低电平就进入中断）</li>
</ul>

<h3 id="section-1">触发方式的选择</h3>

<p>一般外部中断都是作为按键使用，由上面的设置可以看出，8051有两种外部中断触发方式，选择哪一种就成为了问题，两种各有优缺点：</p>

<ul>
  <li>下降沿触发：
    <ul>
      <li>
        <p>优点：程序编写简单，不会出现按键按下后就不断的触发中断的情况。设置方法如下：</p>

        <pre><code>SETB EX0
SETB IT0
SETB EX1
SETB IT1
SETB EA
</code></pre>
      </li>
      <li>
        <p>缺点：仅限于仿真中应用，实际应用中，无法防止误触按键的情况。并且按键只能局限于一下一下的按，不能出现长短按键的形式</p>
      </li>
    </ul>
  </li>
  <li>下降沿除法：
    <ul>
      <li>优点：通过软件的编写可以防止实际生活中误触按键的情况。基本思路就是在进入中断后先等待，一段时间后再次检测，看是否还是低电平，如果还是，就可以确定不是误触。可以通过程序编写出现长短按键的情况</li>
      <li>缺点：程序编写复杂，容易出现连续触发同一中断的情况</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第六章 计时器/计数器]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-6.html"/>
    <updated>2013-04-04T09:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-6</id>
    <content type="html"><![CDATA[<p>计时器与计数器使用的寄存器和它们的工作原理是一样的，当计时时脉从“0”变为“1”的时候，内部的累加器加一，当累加器溢出的时候，检查中断，如果中断置能，便进入中断，否则重新开始计数。它们唯一的不同就是使用的计时时脉不一样，计时器使用的是内部时脉，因为内部时脉很稳定，所以可以用来计算时间；计数器使用的是从 T1 或者 T0 口输入的外部时脉，如果这个外部时脉的信号代表一个事件发生的次数，那么计时/计数器就是在计算这个事件发生的次数。8051中有两个计时/计数器– Timer0 和 Timer1。</p>

<h2 id="section">控制寄存器</h2>

<p>计时/计数器由两个寄存器来控制，它们分别为 TCON 和 TMOD。Timer0 和 Timer1 各有16位用来存放累加数目的寄存器（根据使用的模式不一样，这16位的功能不一样，不一定全部用来计数）。存放 Timer0 累加数目的寄存器是 TH0（高八位）和 TL0（低八位）；存放 Timer1 累加数目的寄存器是 TH1（高八位）和 TL1（低八位）。</p>

<h3 id="tcon">TCON</h3>

<p>TCON 允许位元寻址。每一位代表的意思如下：</p>

<pre><code>TF1  TR1  TF0  TR0  IE1  IT1  IE0  IT0
</code></pre>

<ul>
  <li>TF1 和 TF0: Timer1/Timer0 的溢出旗标。当用来存放累加数目的寄存器（也就是 THx 和 TLx）溢出的时候硬件自动置一，当进入对应中断向量的时候硬件自动清零。</li>
  <li>TR1 和 TR0：Timer1/Timer0 的运行控制位。置一则开启 Timer1/Timer0，Timer1/Timer0 便开始计时或者计数；清零则关闭 Timer1/Timer0，Timer1/Timer0 停止计时或者计数（其实还会受到 TMOD 中 GATE 位的影响，在设置的时候需要注意）。</li>
  <li>IE1 和 IE0: 外部中断 INT1/INT0 边缘触发旗标。当检测到外部中断信号源边缘的时候，硬件自动置一，进入 INT1/INT0 所对应的的中断服务时，硬件自动清零</li>
  <li>IT1 和 IT0：INT1/INT0 触发方式控制位。当置一的时候，外部中断源处于下降沿的时候触发对应的外部中断服务；清零的时候，外部中断源处于低电平（也就是“0”）的时候触发对应的外部中断服务（如果一直处于低电平，就会不停的触发中断服务，使用 INT1/INT0 的时候需要注意）。</li>
</ul>

<p>由于 IEx 和 ITx 是用来控制外部中断 INTx 的，这一部分先不管它们，以后再介绍。TFx 会在进入中断之后硬件自动清零，所以当我们使用计时/计数器的中断服务的时候一般不用管这一位。所以对于计时/计数器，一般真正使用的只有 TRx 位，用来启动和停用 计时/计数器。</p>

<h3 id="tmod">TMOD</h3>

<p>TMOD 不可以位元寻址。TMOD是用来选择8051的计时/计数器工作模式的。在8051中，计时/计数器有四种模式，区别主要是集中在 THx 和 TLx 的16位如何使用的问题上，这四种模式分别为：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">M1</th>
      <th style="text-align: center">M0</th>
      <th style="text-align: center">计时/计数器模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">13位计时器</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">16位计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">8位自动重载计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">两个8位计时/计数器</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>13位计时器：一般很少用到，现在的部分8051系列已经去掉了这个功能。使用 THx 的8位和TLx 的第5位组成的13位来存放累加的数字。</li>
  <li>16位计时/计数器：非常常用，用 THx 和 TLx 的整个16位来存放累加数字。可以存放的数字很大，但是每次进入中断之后都需要软件重新载入下次计时/计数的初始值。</li>
  <li>8位自动重载计时/计数器：TLx 用来存放累加的数字，当 TLx 溢出之后，会自动将 THx 中的数字加载到 TLx 中，作为下次计时/计数的初始值。虽然可以存放的数字不大，但是不用每次进入中断之后用软件重新载入，方便，且速度更快。</li>
  <li>两个8位计时/计数器：一般很少用到，现在的部分8051系列已经去掉了这个功能。在这个功能下，Timer1 不能使用，所有跟 Timer1 有关的控制位都转而控制 TH0，TL0则继续由 Timer0 的控制位控制。及其没有用处，因为得到的效果还不如用 Timer0 和 Timer1 分别设置为两个8位自动重载计时/计数器。</li>
</ul>

<p>TMOD 每一位对应的意思如下（前四位对应 Timer1，后四位对应 Timer0）：</p>

<pre><code>GATE  C/T  M1  M0  GATE  C/T  M1  M0
</code></pre>

<ul>
  <li>GATE：选择开启方式是硬件控制还是软件控制。当置一的时候，开启方式是硬件控制，当 TCON 中 TRx 置一且 INTx 为高的时候，对应的计时/计数器才开始计时/计数，否则不开启；当清零的时候，开启方式为软件控制，TRx 置一就可以开启。</li>
  <li>C/T：计时器和计数器选择位。置一则为计数器，清零则为计时器。</li>
  <li>M1 和 M0：计时/计数器模式选择位，对应的模式见上表。</li>
</ul>

<h2 id="section-1">设置思路</h2>

<p>在使用计时/计数器的时候要先对其进行设置，例如选择哪个计时/计数器，什么模式，初值为何，都要预先设置，但由于涉及的寄存器有四个，所以考虑的时候有些复杂，下面介绍的是设置的基本思路。</p>

<p>首先，你要明确以下几个问题，然后再开始设置：</p>

<ol>
  <li>你要使用哪个计时/计数器，是 Timer0 还是 Timer1？用做计时器还是计数器？</li>
  <li>你所使用的计时/计数器什么时候开启？开启方式是什么，是软件开启还是硬件开启？</li>
  <li>你所使用的计时/计数器的工作模式是上面四种中的哪一个？</li>
  <li>开启的时候，计时/计数的初值是多少？每次运行完中断之后的重载值是多少？</li>
</ol>

<p>明确了以上问题，就可以开始设置计时/计数器了。可以遵照下面几步走：</p>

<ol>
  <li>
    <p>设置 TMOD。建议 Timer0 和 Timer1 分开设置，运用 <code>ANL</code> 和 <code>ORL</code> 两个命令，在不干扰另一个计时/计数器的情况下，设置自己需要的那一个。虽然命令行数增加，运行时间增加，但是多消耗的时间很少可以忽略，好处是不会混淆。<code>ANL</code> 用来清零，需要清零的位放零，其他位放一，<code>ORL</code>用来置一，需要置一的位放一，其他位放零。例如要设置使用 Timer0作为计数器，软件开启，模式为16位计时/计数器，可以这样设置 TMOD：</p>

    <pre><code>ANL TMOD,#11110101B
ORL TMOD,#00000101B
</code></pre>
  </li>
  <li>
    <p>设置计时/计数的初值，根据选择的模式和需要，对 THx 和 TLx 进行赋值。当将其作为计时器的时候会有个计时周期（也就是多久进行一次加一操作）的问题。</p>

    <p>对于
8051而言，存在两种时间：时钟周期和机械周期。时钟周期就是时钟电路的振荡频率所对应的周期，也就是 <script type="math/tex">\frac{1}{f_{osc}}</script>。机械周期是 CPU 完成一个基本操作（取指令，读或写数据等）所需要的时间，8051中12个时钟周期等于一个机械周期，也就是<script type="math/tex">\frac{12}{f_{osc}}</script>。计时器的计时周期就是机械周期，对于<script type="math/tex">12MHz</script>震荡频率而言，也就是<script type="math/tex">1\mu s</script>。这样我们就可以计算出我们需要的初值是多少了。如果选择的模式是16位计时/计数器，我们可以用如下方式进行赋值（x就是你要预设的初值）：</p>

    <pre><code>MOV TH0,#HIGH (65536-x)
MOV TL0,#LOW (65536-x)
</code></pre>

    <p>如果是8位自动重载计时/计数器，可以这样设置初值（y是要重载的值，x是预设的初值）：</p>

    <pre><code>MOV TH0,#(256-y)
MOV TL0,#(256-x)
</code></pre>
  </li>
  <li>
    <p>开启，跟你的需要，在必要时候，将 TRx 置一。</p>
  </li>
</ol>

<p><img src="https://lh6.googleusercontent.com/-f35zg4EmAZw/UVz2cCeJePI/AAAAAAAAAqU/uyTI6Cl2kE0/s640/Countdown%2520timer%2520with%2520microcontroller%2520AT89C51.png" width="480" alt="AT89C51 制作的时钟（图片来自 Engineers Garage）" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Proteus 中使用 UART串口与PC进行互动仿真]]></title>
    <link href="http://pikipity.github.com/blog/use-uart-in-proteus.html"/>
    <updated>2013-04-02T22:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/use-uart-in-proteus</id>
    <content type="html"><![CDATA[<p>在 Proteus 中进行单片机仿真的时候，可能会需要进行 UART 串口的仿真，当然我们可以通过 “Virtual Terminal” 来仿真 UART 串口的输入和输出，但是有时候是需要单片机与电脑连同后，由电脑上的软件通过 UART 串口进行数据的收发，这个时候如果再用 “Virtual Terminal” 的话并不能很好的仿真出软件与单片机之间的通信结果。</p>

<p><img src="https://lh4.googleusercontent.com/-0QW99JxJmok/UVsMhdpHWjI/AAAAAAAAApw/c7DoTmnOUG0/s800/Virtual_terminal.gif" width="950pt" alt="Proteus 中的 Virtual Terminal" /></p>

<p>于是，我决定用虚拟端口工具，在 Windows 中模拟两个端口直接连接在一起的情况。我使用的虚拟端口软件是 “Configure Virtual Serial Port Driver” （简称 “VSPD”）。这个软件可以虚拟出任意两个 COM 口（也就是串列口）之间的连接，设置也很简单，只要选择要连接的两个端口，然后点击“添加端口”就可以了，要取消的话，只要点击“重置端口”，你设置的端口就全部取消了。大家可以到这里下载<a href="http://pan.baidu.com/share/link?shareid=443416&amp;uk=4080321956">破解汉化版</a>。</p>

<p><img src="https://lh4.googleusercontent.com/-0iOkN3SazmU/UVsWic47b6I/AAAAAAAAAqE/x28t6nHYFGU/s800/VSPD.gif" width="VSPD 设置" /></p>

<p>有了这个软件我们就可以在 Proteus 中与 PC 进行单片机的 UART 串口通信仿真了。首先在 Proteus 中右键，在 Library 中找到搜索 “COMPIM” 就可以找到 UART 串口接头，将其和单片机相连，TXD对TXD，RXD对RXD，然后双击 “COMPIM”，设置波特率和将要使用的 COM 口，然后设置 VSPD，将对应的 COM 口和需要的 COM 相连就可以了。</p>

<p><img src="https://lh5.googleusercontent.com/-5LeyirS6M3E/UVsWYJjBMxI/AAAAAAAAAqA/kiNOxjZ1a1k/s800/COMPIM.gif" width="Proteus 中的 COMPIM" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第五章 中断]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-5.html"/>
    <updated>2013-03-12T18:18:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-5</id>
    <content type="html"><![CDATA[<p>中断是单片机中一个非常重要的服务。中断是指由于接收到外围硬件的异步信号或是软件的同步信号，而进行的相应的软件或是硬件上的处理。发出这样的信号被称为中断请求，发出中断请求的硬件或是软件被称为中断源。当中断源产生了中断请求，相应的中断旗标（就是对应的寄存器的一个 bit）便会置“1”，8051的 CPU 每个机械周期里都会去检查这些中断旗标，若发现中断旗标置“1”，CPU便会在执行完当前指令后，将当前的执行状态（以程序计数器和程序状态字等寄存器信息为主）塞入堆叠中保存，然后跳到相应的程序内存地址（这个程序内存地址叫做中断向量）执行那里的中断副程序，直到执行到 “RETI” 指令后结束附程序，将塞入堆叠的执行状态取出，回到之前的主程序继续执行。</p>

<h3 id="section">中断分类</h3>

<p>8051中的中断可分为2两种：</p>

<ol>
  <li>不可屏蔽中断：无法通过在中断屏蔽寄存器中设定位掩码来关闭，典型例子是时钟中断（时钟中断不是指的计时/计数器 Timer0 或是 Timer1，而是一个硬件时钟，其会以恒定频率，如12MHz，发出中断）。</li>
  <li>可屏蔽中断：可通过在中断屏蔽寄存器中设定位掩码来关闭。</li>
</ol>

<p>不可屏蔽中断无法控制，是单片机工作的基础，所以不作介绍。只介绍可以控制的可屏蔽中断。</p>

<h3 id="section-1">中断源</h3>

<p>8051提供了五个中断源。中断源、中断向量、中断旗标及中断旗标所属寄存器都列在下表中：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">中断源</th>
      <th style="text-align: center">中断向量</th>
      <th style="text-align: center">中断旗标</th>
      <th style="text-align: center">中断旗标所属寄存器</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">INT0</td>
      <td style="text-align: center">0003H</td>
      <td style="text-align: center">IE0</td>
      <td style="text-align: center">TCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer0</td>
      <td style="text-align: center">000BH</td>
      <td style="text-align: center">TF0</td>
      <td style="text-align: center">TCON.5</td>
    </tr>
    <tr>
      <td style="text-align: center">INT1</td>
      <td style="text-align: center">0013H</td>
      <td style="text-align: center">IE1</td>
      <td style="text-align: center">TCON.3</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer1</td>
      <td style="text-align: center">001BH</td>
      <td style="text-align: center">TF1</td>
      <td style="text-align: center">TCON.7</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (TXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">TI</td>
      <td style="text-align: center">SCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (RXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">RI</td>
      <td style="text-align: center">SCON.0</td>
    </tr>
  </tbody>
</table>

<p>具体满足什么条件会产生中断请求会在介绍各个中断源的时候详细介绍。需要注意的就是串列口 UART 的输入输出中断的中断向量都是 0023H，在使用的时候要判断到底是输入还是输出。</p>

<h3 id="section-2">中断置能</h3>

<p>8051在重置之后会关闭所有可屏蔽中断，所以在使用中断之前需要打开需要的中断功能，也就是中断置能。中断功能打开关闭通过中断置能寄存器（IE，地址为 A8H，允许按位寻址）管理。下面是中断置能寄存器各个 bit 的意思（“1”为使能，“0”为关闭）：</p>

<pre><code>EA  --  --  ES  ET1  EX1  ET0  EX0
</code></pre>

<ol>
  <li>EA: 相当于中断的总开关。置“0”就关闭所有中断。置“1”再根据下面的 bit 来看这个中断是否置能。</li>
  <li>ES：串列口（UART）中断使能位。</li>
  <li>ET1：计时/计数器 Timer1 使能</li>
  <li>EX1：外部中断 INT1 使能</li>
  <li>ET0: 计时/计数器 Timer0 使能</li>
  <li>EX0：外部中断 INT0 使能</li>
</ol>

<h3 id="section-3">中断优先级</h3>

<p>当多个中断旗标同时存在时，就会有一个先执行哪个中断向量的问题，8051内置了一个中断优先级，优先级高的先执行，优先级如下（顺序其实是按照中断向量排列的）：</p>

<ol>
  <li>外部中断 INT0</li>
  <li>计时/计数器 Timer0</li>
  <li>外部中断 INT1</li>
  <li>计时/计数器 Timer1</li>
  <li>串列口（UART）</li>
</ol>

<p>8051允许用户设置两层优先级，8051会先执行高层优先级中的中断，同一层中的中断优先顺序则按照上面的排序来进行。两层优先级的归属问题通过中断优先级寄存器（IP，地址为 B8H，允许位元定址）来设定。IP 每一个 bit 代表的意义如下（“1”代表高优先级，“0”代表低优先级）：</p>

<pre><code>--  --  --  PS  PT1  PX1  PT0  PX0
</code></pre>

<ol>
  <li>PS：串列口（UART）优先级</li>
  <li>PT1：计时/计数器 Timer1 优先级</li>
  <li>PX1：外部中断 INT1 优先级</li>
  <li>PT0: 计时/计数器 Timer0 优先级</li>
  <li>PX0：外部中断 INT0 优先级</li>
</ol>

<h3 id="assembly-">Assembly 程序设计</h3>

<p>一个需要使用中断的 Assembly 程序设计的时候需要注意以下几点：</p>

<ol>
  <li>
    <p>由于中断向量都在程序记忆体的开始部分，所以主程序要注意回避中断向量的位置，所以一开始一般通过一个跳跃跳到主程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
        .
        .
        .
	     
     ORG 30H
 MAIN:
        .
        .
        .
     END
</code></pre>
  </li>
  <li>
    <p>两个中断向量之间的空间很短，一般无法放下整个附程序，所以一般在中断向量处通过一个跳跃到其他位置来执行副程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
	
     ORG 03H
     JMP INT0
	
     ORG 0BH
     JMP TIMER0
	    
     ORG 30H
 INT0:
        .
        .
        .
     RETI
	    
 TIMER0:
         .
         .
         .
      RETI
        
MAIN:
       .
       .
       .
     END    
</code></pre>
  </li>
  <li>ORG 声明程序内存地址的时候要按照程序内存的顺序摆放，比如不可以出现 <code>ORG 05H</code> 在 <code>ORG 03H</code> 前面的情况</li>
  <li>在执行中断副程序之前记得保存之间需要保护的变量（填入堆叠就可以了）。结束之后记得把保护的变量提取出来。</li>
  <li>有的时候再执行一个中断的时候不希望其他中断来打扰，记得在执行中断副程序之前关闭中断（ <code>CLR EA</code> ），在执行结束后记得打开中断（ <code>SETB EA</code>）。</li>
  <li>在执行一个中断副程序的时候，如果其中断旗标再次置起，不会重新跳回中断向量。</li>
</ol>
]]></content>
  </entry>
  
</feed>
