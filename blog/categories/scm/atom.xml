<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: SCM | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/scm/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Proteus 中使用 UART串口与PC进行互动仿真]]></title>
    <link href="http://pikipity.github.com/blog/use-uart-in-proteus.html"/>
    <updated>2013-04-02T22:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/use-uart-in-proteus</id>
    <content type="html"><![CDATA[<p>在 Proteus 中进行单片机仿真的时候，可能会需要进行 UART 串口的仿真，当然我们可以通过 “Virtual Terminal” 来仿真 UART 串口的输入和输出，但是有时候是需要单片机与电脑连同后，由电脑上的软件通过 UART 串口进行数据的收发，这个时候如果再用 “Virtual Terminal” 的话并不能很好的仿真出软件与单片机之间的通信结果。</p>

<p><img src="https://lh4.googleusercontent.com/-0QW99JxJmok/UVsMhdpHWjI/AAAAAAAAApw/c7DoTmnOUG0/s800/Virtual_terminal.gif" width="950pt" alt="Proteus 中的 Virtual Terminal" /></p>

<p>于是，我决定用虚拟端口工具，在 Windows 中模拟两个端口直接连接在一起的情况。我使用的虚拟端口软件是 “Configure Virtual Serial Port Driver” （简称 “VSPD”）。这个软件可以虚拟出任意两个 COM 口（也就是串列口）之间的连接，设置也很简单，只要选择要连接的两个端口，然后点击“添加端口”就可以了，要取消的话，只要点击“重置端口”，你设置的端口就全部取消了。大家可以到这里下载<a href="http://pan.baidu.com/share/link?shareid=443416&amp;uk=4080321956">破解汉化版</a>。</p>

<p><img src="https://lh4.googleusercontent.com/-0iOkN3SazmU/UVsWic47b6I/AAAAAAAAAqE/x28t6nHYFGU/s800/VSPD.gif" width="VSPD 设置" /></p>

<p>有了这个软件我们就可以在 Proteus 中与 PC 进行单片机的 UART 串口通信仿真了。首先在 Proteus 中右键，在 Library 中找到搜索 “COMPIM” 就可以找到 UART 串口接头，将其和单片机相连，TXD对TXD，RXD对RXD，然后双击 “COMPIM”，设置波特率和将要使用的 COM 口，然后设置 VSPD，将对应的 COM 口和需要的 COM 相连就可以了。</p>

<p><img src="https://lh5.googleusercontent.com/-5LeyirS6M3E/UVsWYJjBMxI/AAAAAAAAAqA/kiNOxjZ1a1k/s800/COMPIM.gif" width="Proteus 中的 COMPIM" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第五章 中断]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-5.html"/>
    <updated>2013-03-12T18:18:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-5</id>
    <content type="html"><![CDATA[<p>中断是单片机中一个非常重要的服务。中断是指由于接收到外围硬件的异步信号或是软件的同步信号，而进行的相应的软件或是硬件上的处理。发出这样的信号被称为中断请求，发出中断请求的硬件或是软件被称为中断源。当中断源产生了中断请求，相应的中断旗标（就是对应的寄存器的一个 bit）便会置“1”，8051的 CPU 每个机械周期里都会去检查这些中断旗标，若发现中断旗标置“1”，CPU便会在执行完当前指令后，将当前的执行状态（以程序计数器和程序状态字等寄存器信息为主）塞入堆叠中保存，然后跳到相应的程序内存地址（这个程序内存地址叫做中断向量）执行那里的中断副程序，直到执行到 “RETI” 指令后结束附程序，将塞入堆叠的执行状态取出，回到之前的主程序继续执行。</p>

<h3 id="section">中断分类</h3>

<p>8051中的中断可分为2两种：</p>

<ol>
  <li>不可屏蔽中断：无法通过在中断屏蔽寄存器中设定位掩码来关闭，典型例子是时钟中断（时钟中断不是指的计时/计数器 Timer0 或是 Timer1，而是一个硬件时钟，其会以恒定频率，如12MHz，发出中断）。</li>
  <li>可屏蔽中断：可通过在中断屏蔽寄存器中设定位掩码来关闭。</li>
</ol>

<p>不可屏蔽中断无法控制，是单片机工作的基础，所以不作介绍。只介绍可以控制的可屏蔽中断。</p>

<h3 id="section-1">中断源</h3>

<p>8051提供了五个中断源。中断源、中断向量、中断旗标及中断旗标所属寄存器都列在下表中：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">中断源</th>
      <th style="text-align: center">中断向量</th>
      <th style="text-align: center">中断旗标</th>
      <th style="text-align: center">中断旗标所属寄存器</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">INT0</td>
      <td style="text-align: center">0003H</td>
      <td style="text-align: center">IE0</td>
      <td style="text-align: center">TCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer0</td>
      <td style="text-align: center">000BH</td>
      <td style="text-align: center">TF0</td>
      <td style="text-align: center">TCON.5</td>
    </tr>
    <tr>
      <td style="text-align: center">INT1</td>
      <td style="text-align: center">0013H</td>
      <td style="text-align: center">IE1</td>
      <td style="text-align: center">TCON.3</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer1</td>
      <td style="text-align: center">001BH</td>
      <td style="text-align: center">TF1</td>
      <td style="text-align: center">TCON.7</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (TXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">TI</td>
      <td style="text-align: center">SCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (RXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">RI</td>
      <td style="text-align: center">SCON.0</td>
    </tr>
  </tbody>
</table>

<p>具体满足什么条件会产生中断请求会在介绍各个中断源的时候详细介绍。需要注意的就是串列口 UART 的输入输出中断的中断向量都是 0023H，在使用的时候要判断到底是输入还是输出。</p>

<h3 id="section-2">中断置能</h3>

<p>8051在重置之后会关闭所有可屏蔽中断，所以在使用中断之前需要打开需要的中断功能，也就是中断置能。中断功能打开关闭通过中断置能寄存器（IE，地址为 A8H，允许按位寻址）管理。下面是中断置能寄存器各个 bit 的意思（“1”为使能，“0”为关闭）：</p>

<pre><code>EA  --  --  ES  ET1  EX1  ET0  EX0
</code></pre>

<ol>
  <li>EA: 相当于中断的总开关。置“0”就关闭所有中断。置“1”再根据下面的 bit 来看这个中断是否置能。</li>
  <li>ES：串列口（UART）中断使能位。</li>
  <li>ET1：计时/计数器 Timer1 使能</li>
  <li>EX1：外部中断 INT1 使能</li>
  <li>ET0: 计时/计数器 Timer0 使能</li>
  <li>EX0：外部中断 INT0 使能</li>
</ol>

<h3 id="section-3">中断优先级</h3>

<p>当多个中断旗标同时存在时，就会有一个先执行哪个中断向量的问题，8051内置了一个中断优先级，优先级高的先执行，优先级如下（顺序其实是按照中断向量排列的）：</p>

<ol>
  <li>外部中断 INT0</li>
  <li>计时/计数器 Timer0</li>
  <li>外部中断 INT1</li>
  <li>计时/计数器 Timer1</li>
  <li>串列口（UART）</li>
</ol>

<p>8051允许用户设置两层优先级，8051会先执行高层优先级中的中断，同一层中的中断优先顺序则按照上面的排序来进行。两层优先级的归属问题通过中断优先级寄存器（IP，地址为 B8H，允许位元定址）来设定。IP 每一个 bit 代表的意义如下（“1”代表高优先级，“0”代表低优先级）：</p>

<pre><code>--  --  --  PS  PT1  PX1  PT0  PX0
</code></pre>

<ol>
  <li>PS：串列口（UART）优先级</li>
  <li>PT1：计时/计数器 Timer1 优先级</li>
  <li>PX1：外部中断 INT1 优先级</li>
  <li>PT0: 计时/计数器 Timer0 优先级</li>
  <li>PX0：外部中断 INT0 优先级</li>
</ol>

<h3 id="assembly-">Assembly 程序设计</h3>

<p>一个需要使用中断的 Assembly 程序设计的时候需要注意以下几点：</p>

<ol>
  <li>
    <p>由于中断向量都在程序记忆体的开始部分，所以主程序要注意回避中断向量的位置，所以一开始一般通过一个跳跃跳到主程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
        .
        .
        .
	     
     ORG 30H
 MAIN:
        .
        .
        .
     END
</code></pre>
  </li>
  <li>
    <p>两个中断向量之间的空间很短，一般无法放下整个附程序，所以一般在中断向量处通过一个跳跃到其他位置来执行副程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
	
     ORG 03H
     JMP INT0
	
     ORG 0BH
     JMP TIMER0
	    
     ORG 30H
 INT0:
        .
        .
        .
     RETI
	    
 TIMER0:
         .
         .
         .
      RETI
        
MAIN:
       .
       .
       .
     END    
</code></pre>
  </li>
  <li>ORG 声明程序内存地址的时候要按照程序内存的顺序摆放，比如不可以出现 <code>ORG 05H</code> 在 <code>ORG 03H</code> 前面的情况</li>
  <li>在执行中断副程序之前记得保存之间需要保护的变量（填入堆叠就可以了）。结束之后记得把保护的变量提取出来。</li>
  <li>有的时候再执行一个中断的时候不希望其他中断来打扰，记得在执行中断副程序之前关闭中断（ <code>CLR EA</code> ），在执行结束后记得打开中断（ <code>SETB EA</code>）。</li>
  <li>在执行一个中断副程序的时候，如果其中断旗标再次置起，不会重新跳回中断向量。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第四章 汇编语言]]></title>
    <link href="http://pikipity.github.com/blog/assembly-language.html"/>
    <updated>2013-03-07T20:39:00+08:00</updated>
    <id>http://pikipity.github.com/blog/assembly-language</id>
    <content type="html"><![CDATA[<p>学习汇编语言可以很好地帮助单片机的学习，而且一个好的汇编语言写成的程序要比实现相同功能的 C 语言更短更快。但是难以理解，移植性差，所以现在一般都用 C 语言来为单片机编程，只有部分硬件的驱动或是 C 语言难以控制的部分来用汇编编写。</p>

<h2 id="section">汇编指令分类</h2>

<p>汇编语言中的指令分为两大部分：</p>

<ol>
  <li>指令（Instruction）：指令会被编译器编译为机器语言将来提供给单片机。指令的数量很有限，不像 C 语言，内置函数就一堆，所以用到什么查表就可以了，表格会在后面提供。</li>
  <li>伪指令（Directive）：伪指令不会被编译器编译为机器语言，仅仅是提供给编译器，为了“编译”而存在的指令。</li>
</ol>

<h2 id="section-1">汇编语言格式</h2>

<p>任何编程语言都有格式，汇编语言也不例外，格式如下：</p>

<pre><code>标记: 操作码 操作数  ;注释
</code></pre>

<p>标记不是每一行都有，需要的时候有就可以了，标记是为了方便对程序内存的寻址，冒号是和标记一起存在的。操作码和操作数就是汇编指令，当然必须有。分号与注释一起存在，不会被编译。</p>

<h2 id="section-2">寻址方式</h2>

<p>再给出所有汇编指令表之前先要介绍一下汇编语言的寻址方式，单片机中对数据的操作最常见的就是将数据从内存的一个地方移到另一个地方，在移动的过程中就需要声明内存地址（内存地址是什么？请回到<a href="http://pikipity.github.com/blog/scm-principle-2.html">第二章</a>，谢谢），那么如何获得这个内存地址呢？就是通过“寻址”来获得。8051 的汇编指令只有四种寻址方式：</p>

<ol>
  <li>直接寻址（Direct Addressing，在表格中简写为 Dir）：直接给出一个16进制数，代表资料记忆体的一个字节地址，从这个地址中拿出数据来操作。只能用于内置 RAM</li>
  <li>间接寻址（Indirect Addressing，在表格中简写为 Ind）：一个 “@” 的符号在加一个寄存器的名字，例如 <code>@DPTR</code>，从这个寄存器中拿出数据，把这个数据当做地址，再从这个地址中拿出数据来操作。可对内置和外扩 RAM 使用。</li>
  <li>寄存器寻址（Register Addressing，在表格中简称 Reg）：直接一个寄存器的名字，例如 <code>R0</code>，从寄存器中拿出数据进行操作。仅对寄存器有效。</li>
  <li>立即寻址（Immediate Addressing，在表格中简称 Imm）：一个井号 “#” 再加一个整数，例如 <code>#1011B</code>，直接对这个整数进行操作。</li>
</ol>

<h2 id="section-3">指令表</h2>

<p>为了方便记忆和查询，指令又分为了五类</p>

<ol>
  <li>
    <p>数据移动：数据移动的指令又根据被移动的数据所在位置分为三个部分。</p>

    <ul>
      <li>
        <p>内部 RAM 内数据的移动</p>

        <p><img src="/images/post/MOV.jpg" width="550pt" /></p>
      </li>
      <li>
        <p>外部 RAM 内数据读取与写入</p>

        <p><img src="/images/post/MOVX.jpg" width="350pt" /></p>
      </li>
      <li>
        <p>程序内存数据读取</p>

        <p><img src="/images/post/MOVC.jpg" width="350pt" /></p>
      </li>
    </ul>

    <p>注意：</p>

    <ul>
      <li>Ri 的意思是 R1 或者 R0，不包括 R2 ~ R7</li>
      <li>
        <p>MOV 指令代表一个1 byte 的机器语言，所以它的操作数中不可能同时出现多个寄存器，例如 <code>MOV R0,R1</code> 是错误的，只能是</p>

        <pre><code>MOV A,R1
MOV R0,A
</code></pre>
      </li>
    </ul>
  </li>
  <li>
    <p>计算：</p>

    <p><img src="/images/post/MATH.jpg" width="550pt" /></p>
  </li>
  <li>
    <p>逻辑运算：</p>

    <p><img src="/images/post/ANL_A.jpg" width="550pt" /></p>
  </li>
  <li>
    <p>布尔运算和判断：</p>

    <p><img src="/images/post/ANL_C.jpg" width="350pt" /></p>
  </li>
  <li>
    <p>跳转：</p>

    <p><img src="/images/post/JUMP_1.jpg" width="550pt" /></p>

    <p><img src="/images/post/JUMP_2.jpg" width="350pt" /></p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第三章 数据类型与表示方法]]></title>
    <link href="http://pikipity.github.com/blog/scm-principle-3.html"/>
    <updated>2013-03-07T10:36:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-principle-3</id>
    <content type="html"><![CDATA[<p>对 8051 的编程本质上就是对一个个二进制数在内存中运算和转移，所以明确各种进制（尤其是二进制、十进制和十六进制）在汇编中的表示方法和它们之间的转换方法就非常重要了。</p>

<h2 id="section">二进制</h2>

<p>无符号二进制的表示方法很简单，只要在你所要表示的二进制数后面加一个 <strong>“B”</strong> 就可以了。例如 <code>1011011B</code>。8位无符号整数范围为 0 ~ 255。16位无符号整数范围为 0 ~ 65535。</p>

<p>表示有符号二进制的时候，一个 Byte 8位中的最高位表示符号，1为负，0为正，后面7位是你要表示的数的绝对值。8位有符号整数范围为 -128 ~ 127。16位有符号整数范围为 -32768 ~ 32767。</p>

<p>当计算有符号二进制数加法的时候（减法只要转换一下加数的符号就变成加法了，所以是一样的），要先将负数变为2补数，然后再相加。所谓<strong>2补数</strong>，就是这个负数的<strong>绝对值</strong>的二进制数的<strong>反数加一</strong>。例如要求-96的2补数，96转换为二进制为01100000，先求反数为10011111，再加一就是-96的2补数10100000</p>

<h2 id="section-1">十进制</h2>

<p>十进制在汇编中的表示很简单，一个单纯的数（例如<code>129</code>）或是一个数字后面加一个 <strong>“D”</strong> （例如<code>129D</code>）就可以了。</p>

<p>从二进制到十进制有一种特殊的转换方法，就是BCD转换方法，先将二进制4位为一部分的分开然后在进行转化，下面的例子展示了如何进行转化。</p>

<p><img src="/images/post/scm-principle-3_1.jpg" alt="BCD转化举例" width="200pt" /></p>

<p>注意：BCD转化出来的一定是十进制，不要与16进制搞混，虽然看上去一样，但是表示的大小则完全不一样。</p>

<h2 id="section-2">十六进制</h2>

<p>十六进制从0到15分别为 <code>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</code></p>

<p>十六进制在汇编中只要在数的后面加一个 <strong>“H”</strong> 就可以了，例如 <code>2FH</code>。</p>

<p>需要注意的是，在汇编中，如果这个16进制数的第一个数就是一个字母的话需要在字母前加一个 <strong>“0”</strong>，例如 <code>0FEH</code>。</p>

<h2 id="section-3">小数</h2>

<p>上面介绍的都是整数，小数的表示则比较复杂。小数分为定点小数和浮点小数。</p>

<h3 id="section-4">定点小数</h3>

<p>定点小数的小数位数是固定的，定点小数表示简单，我们可以随意设定自己这个程序里面小数定点小数的表示方法，比如，我们可以规定我们的小数为8位，小数点前的数为7位，最前面还有一个符号位，那么我们的小数就表示如下图所示：</p>

<p><img src="/images/post/scm-principle-3_2.jpg" alt="定点小数表示" width="250pt" /></p>

<p>定点小数的好处是表示简单、计算方便。缺点也很明显，无法表示拥有很多的小数位数的数，所以我们需要浮点小数。</p>

<h3 id="section-5">浮点小数</h3>

<p>浮点小数的小数为不固定，而是用科学计数法的方式记录小数，一个浮点小数分为三部分：符号位 S、阶码位 P 和尾数为 M，所标表示意思如下：</p>

<script type="math/tex; mode=display">(-1)^S\times M\times 2^P</script>

<p>浮点小数又分为单精度浮点和双精度浮点：</p>

<ol>
  <li>单精度浮点的阶码为8位，位数为23位，共32位（即四个字节）。</li>
  <li>双精度浮点的阶码为11位，位数为52位，共64位（即八个字节）。</li>
</ol>

<p>由于双精度和单精度除了长度以外都相同，所以这里只介绍单精度，双精度请自行脑补。</p>

<p>单精度浮点数表示格式如下：</p>

<table>
  <tbody>
    <tr>
      <td>S（第31位）</td>
      <td>P（30位到23位）</td>
      <td>M（22为到0位）</td>
    </tr>
  </tbody>
</table>

<p>根据 IEEE 754 的标准，浮点小数有四种特殊情况：</p>

<ol>
  <li>P 和 M 都为全0的时候，表述0</li>
  <li>P 为全0，M 不为全0，是非规范形式</li>
  <li>P 为全1，M 为全0的时候，表示无穷大，符号位确定正负</li>
  <li>P 为全1，M 不为全0的时候，表示“这不是一个数”</li>
</ol>

<p>也就是说，单浮点最大为 <code>0 11111110 11111111111111111111111</code>，也就是 3.40282346638529E+38，最小为 <code>1 11111110 11111111111111111111111</code>，也就是 -3.40282346638529E+38，最接近0的数是 <code>0 00000000 00000000000000000000001</code>，也就是 1.40129846432482E-45。</p>

<h3 id="section-6">二进制单精度浮点小数转化为十进制方法</h3>

<p>将单精度浮点小数转化为十进制比较简单，只要按照对应的部分转化就可以得到对应的十进制数了，转化规律如：</p>

<ol>
  <li>符号位：0为正，1为负。</li>
  <li>阶码位：对应的十进制减127（双浮点减1023）。例如阶码位为 <code>10001010</code> ，那么对应的2的指数就是 $138-127=11$。</li>
  <li>尾数位：在尾数位的最左边补一个1，将小数点放在这个1的后面，进行转化，所得到的就是尾数了。例如，尾数位为 <code>01110101100011100010001</code>，那么对应的尾数就是 $1.4592$</li>
  <li>
    <p>按照公式组合就可以了，这里公式再次给出一边：</p>

<script type="math/tex; mode=display">(-1)^S\times M\times 2^P</script>
  </li>
</ol>

<h3 id="section-7">十进制小数转化为二进制单精度浮点的方法</h3>

<p>将十进制转化为单浮点二进制就比较麻烦了，可以按照下面的方法：</p>

<ol>
  <li>符号位就不说了，主要是计算阶码位和尾数位。首先判断要转化的十进制是不是纯小数（纯小数的意思是无整数部分），如果是就到第三步，如果不是继续到第二步</li>
  <li>
    <p>不是纯小数，就可以把数字分为两部分，整数部分和小数部分，整数部分就按照普通的方法转换就可以了，小数部分可以通过下面的方法转换：</p>

    <p><img src="/images/post/scm-principle-3_3.jpg" alt="十进制小数部分转化方法" width="350pt" /></p>

    <p>然后将转化出来的二进制数的小数部分和整数部分组合在一起，左移小数点直到整数部分只剩一个1为止，小数部分取左起23位就是尾数位，将小数点移动的位数加127，转化为二进制就是阶码位。</p>
  </li>
  <li>
    <p>如果是纯小数就要先将纯小数转化为 <script type="math/tex">1.\cdots\times 2^n</script> 的形式，可以通过下面的公式转化（公式中 $X$ 代表待转换的十进制纯小数）：</p>

<script type="math/tex; mode=display">n=\mbox{int}(log_2 X-1)</script>

    <p>然后将转化之后的小数部分按照步骤2中方法进行转化，结果取左起23位就是尾数为，$n+127$ 转化为二进制就是阶码位。</p>
  </li>
</ol>

<p>为了方便大家进行二进制、十进制和十六进制之间的转换，我用 Python 编写了一个小程序，下载在<a href="http://pikipity.github.com/Binary-Converter/">这里</a>，如果发现有什么 Bug，欢迎指正，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第二章 记忆体和寄存器]]></title>
    <link href="http://pikipity.github.com/blog/scm-principle-2.html"/>
    <updated>2013-02-27T22:37:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-principle-2</id>
    <content type="html"><![CDATA[<p><a href="http://pikipity.github.com/blog/scm-principle-1.html">上一章</a>主要是简单介绍了一下 8051 的样子和结构，这一章主要介绍内存，为将来介绍各个特殊功能和 assembly 做准备。</p>

<h3 id="section">记忆体种类</h3>

<p>记忆体主要分为两种：</p>

<ol>
  <li>只读记忆体（ROM）：资料一旦存储就不能删除或是修改（既不能重新写入），且内容不会因为断电而消失。一般来说，我们可以认为你所编写的程式就存储在 8051 的 ROM 中，当然现在的新科技已经允许通过一定的手段来从新修改 ROM 上的内容了，所以你可以向你的 8051 芯片中重新写入程式，但是重新写入的次数是有限，但是这个次数非常大，所以不用担心。8051 内部 ROM 容量为 4K Byte，最大可扩充到 64K Byte。8052 内部 ROM 容量为 8K Byte，最大可扩充到 64K Byte</li>
  <li>随即存储存储器（RAM）：可以随时将数据存入记忆体的任意位置，但是断电后数据会消失。一般来说，我们可以认为程式临时数据就是存储在 8051 的 RAM 中的。8051 内部 RAM 容量为 128 Byte，最大可扩充到 64K Byte。8052 内部 RAM 容量为 256 Byte，最大可扩充到 64K Byte。</li>
</ol>

<!--more-->

<h3 id="section-1">地址分配</h3>

<p>我们不可能随意的将数据存储在记忆体中，如果那样的话，我们就难以知道自己所需的数据到底存储在哪里，所以我们用“地址”来对记忆体中的数据定位。我们一般用一个十六进制数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 来表示一个地址。程式记忆体（可以理解为 ROM）和资料记忆体（可以理解为 RAM）的地址是分开的。</p>

<ol>
  <li>程式记忆体地址分配：由于 8051 允许外部扩充程式记忆体，所以程式记忆体的地址分配有两种（以下程式记忆体的地址都是一个地址代表一个字节（8位二进制））：
    <ul>
      <li>
        <p>EA 引脚接高时：</p>

        <p><img src="/images/post/scm-principle-2-1.jpg" alt="当 EA 接高时，程式记忆体的地址分配" width="350pt" /></p>
      </li>
      <li>
        <p>EA 引脚接地时：</p>

        <p><img src="/images/post/scm-principle-2-2.jpg" alt="当 EA 接地时，程式记忆体的地址分配" width="350pt" /></p>
      </li>
    </ul>
  </li>
  <li>资料记忆体地址分配：资料记忆体的地址（依然是一个地址代表一个字节（8位二进制））从 00H 到 FFH，共分为四个部分：
    <ul>
      <li>
        <p>00H ~ 1FH：四个寄存器组。由于在写 assembly 程序的时候，每次都记住地址很麻烦，所以 assembly 为一部分地址直接预设了名字，这样我们就可以直接通过调用名字来使用这一部分内存而不是记住地址。这四个寄存器组 RB0~RB3 中，每个寄存器组又包含8个8位寄存器 R0~R7（每个字节地址就是一个寄存器），主要用来存放数据。但每次只能使用一个寄存器组，通过 RS0 和 RS1 两个位元来控制到底使用哪个寄存器组：</p>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">RS1</th>
              <th style="text-align: center">RS0</th>
              <th style="text-align: center">寄存器组</th>
              <th style="text-align: center">位置</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">RB0</td>
              <td style="text-align: center">00H~07H</td>
            </tr>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">RB1</td>
              <td style="text-align: center">08H~0FH</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">RB2</td>
              <td style="text-align: center">10H~17H</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">RB3</td>
              <td style="text-align: center">18H~1FH</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>20H ~ 2FH：可位元寻址区，这一部分的地址都允许直接对 bit 进行操作。例如，21H.0 就代表在字节地址 21H 的8位二进制的第 0 位。</li>
      <li>30H ~ 7FH：一般数据与堆栈区。不可以位元寻址，就是一般的存储数据的地方</li>
      <li>
        <p>80H ~ FFH：特殊功能寄存器（SFR）。8051 本事已经内置了很多的功能，在<a href="http://pikipity.github.com/blog/scm-principle-1.html">第一章</a>的8051单片机结构中就可以看到，有计时/计数器、中断、UART串口等等，这些特殊功能需要通过设置这一部分的 SFR 的参数来控制。在讲解各个特殊功能的时候会讲解如何设置参数，和这些参数代表什么意思。下面是一幅AT89系列的 SFR 地址分配表，将来可以对照、理解。</p>

        <p><img src="/images/post/scm-principle-2-3.jpg" alt="AT89系列的 SFR 地址分配表" width="550pt" /></p>

        <p>注意：</p>

        <ul>
          <li>注意最左边一列都可以位元寻址</li>
          <li>括号中的寄存器代表 AT89C52 才有，AT89C51 没有</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>十六进制数就是以逢16进1作为进位制的数，一般用数字0到9和字母A到F表示，并在数后面加一个“H”来表示此数为16进制。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
