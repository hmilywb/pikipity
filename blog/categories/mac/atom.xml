<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Mac | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 Alfred 快速启动 MATLAB]]></title>
    <link href="http://pikipity.github.com/blog/open-matlab-fast-using-alfred.html"/>
    <updated>2013-08-05T18:44:00+08:00</updated>
    <id>http://pikipity.github.com/blog/open-matlab-fast-using-alfred</id>
    <content type="html"><![CDATA[<p>大概很多人都会难以忍受 MATLAB 启动时候漫长的等待，那是因为 MATLAB 的窗口化是基于 java 的，加载 java 永远是一个让人蛋疼的事情。但是如果你使用的是 Linux 或是 Mac OS X，那么你完全没必要把时间都花费在等待 MATLAB 准备和打开 java 的过程上。我们真正使用 MATLAB 是使用它的命令行，而它的图形化界面，除了修改图片和使用具有 GUI 的 toolbox，一般很少用到，所以到用到的时候在加载 java 就可以了，而且由于加载 java 和启用命令行的操作分开了，同时运行的线程和占用的内存都减少了，java 的加载速度也会相应提升。总而言之，就是让你觉得 Matlab 快了很多很多。</p>

<p><img src="https://lh3.googleusercontent.com/-IPC7qvN44iA/Uf-RDQ06AZI/AAAAAAAAA8E/oyQ6i78YWwo/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25887.46.50.png" alt="终端使用 MATLAB" /></p>

<p>这里使用的技巧并不高深，只是让 <a href="http://www.alfredapp.com/">Alfred</a> 执行一段 shell 命令，并为这个命令定制关键词，方便以后用 <a href="http://www.alfredapp.com/">Alfred</a> 搜索。</p>

<p><a href="http://www.alfredapp.com/">Alfred</a> 是 Mac OS X 上的一款快速启动、查询工具，类似于 Mac OS X 自带的 spotlight，但是功能上则强大很多。spotlight仅能查询文件并快速打开，<a href="http://www.alfredapp.com/">Alfred</a> 则不仅如此，查询网页、查询词典、替代计算器、查询 iTunes、执行指定 shell 命令、workflow 或是 AppleScript 等等，而且这些功能全部集成到一个搜索条中，超级方便快捷。现在，spotlight 早已经被我禁用了，完全由 <a href="http://www.alfredapp.com/">Alfred</a> 代替。<a href="http://www.alfredapp.com/">Alfred</a> 的官网在<a href="http://www.alfredapp.com/">这里</a>，你可以免费下载和使用，但是免费版中部分功能被限制，用起来还是很不爽的，你可以通过购买获得 Powerpack 激活码，然后就可以享用 <a href="http://www.alfredapp.com/">Alfred</a> 所有强大的功能了。如果你不想付钱，你可以到<a href="http://pan.baidu.com/share/link?shareid=2139275050&amp;uk=4080321956">这里</a>下载 <em>X解程序</em>，但是 v1 旧版的X解程序，官网提供的新版 v2 的X解还请自行 <a href="https://www.google.com">Google</a> 之。</p>

<p><img src="https://lh5.googleusercontent.com/-M187kHThsnM/Uf-RDKTJYBI/AAAAAAAAA8A/QMe45cbl_gI/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25887.00.51.png" alt="Alfred 使用画面" /></p>

<p>这里就不介绍软解的安装与X解还有基本配置了，毕竟软件很简单，一目了然。直奔主题，如何让其执行一段 shell 命令来在终端下打开 MATLAB。</p>

<p>首先，你要知道如何在终端下打开 MATLAB。找到你电脑上的 MATLAB 程序，我指的不是那个 app 在哪，而是在那个 app 上右键，点击显示包内容之后，找到一个文件名叫 matlab 的程序（我记得应该就是一个 shell 脚本），记录下它的路径（右键单击“拷贝路径”中的“Path”，例如我的路径就是<code>/Applications/MATLAB/MATLAB_R2011a.app/bin/matlab</code>）。然后你只要在终端中直接执行这个路径，MATLAB 就会打开了。但是你会发现，依然是以图形化界面的方式打开，所以你需要在路径后面加一些启动参数，常用的启动参数如下</p>

<pre><code>-nodesktop  不启动图形化界面
-nosplash   无欢迎信息
</code></pre>

<p>你也可以在后面使用参数<code>-r</code>，这样，MATLAB打开后就会自动执行后面的命令（需要执行的命令空一格用引号引起来放在后面就可以了，例如<code>-r "x=1:10;plot(x)"</code>）。</p>

<p>现在就要将这个启动 MATLAB 的 shell 命令添加入 <a href="http://www.alfredapp.com/">Alfred</a> 中。打开 <a href="http://www.alfredapp.com/">Alfred</a> 的 “Preferences”，在 “Extensions” 中添加一个 shell 命令，名字随便起一个就好了。”Title” 是你将会在 <a href="http://www.alfredapp.com/">Alfred</a> 中搜索看到的名字，起一个好认的就可以了。”Description” 是你将在 <a href="http://www.alfredapp.com/">Alfred</a> 中显示在名字下面的小字，简单注释一下就可以了。”Keyword” 一定要使用，不然每次打名字就太累了，这里可以设置快捷键，以后搜索的时候打入这个关键字就可以了。”Options” 中的 “Silent” 必须取消掉，不然 MATLAB 会在后台启动而不显示。”Command” 就不多说了，把你要执行的命令放进来就可以了。”Parameter” 是设置你将来搜索的时候是否需要参数，”Auto Detect” 就可以了。保存，就可以使用了。</p>

<p><img src="https://lh4.googleusercontent.com/-DWMROP6I7qA/Uf-RC77dmCI/AAAAAAAAA74/4XxBwboOPjA/s640/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25886.59.51.png" alt="设置画面" /></p>

<p>如果，你觉得设置很麻烦，可以下载我已经设置好的文件，但是要注意把 “matlab” 的路径改为自己电脑上的路径。第一个文件就是简单的在终端打开 MATLAB，但是它还会打开 “workspace” 并清空终端（因为我唯一需要的窗口就是 “workspace”，用来看一下当前保存了哪些变量，当然你也可以用<code>CommandHistory</code>打开命令历史记录）。第二个文件是在终端打开 MATLAB，并执行你输入的一条命令，例如你在 <a href="http://www.alfredapp.com/">Alfred</a> 中输入 <code>matlab "a=5;"</code>，就会打开 MATLAB 之后创建一个变量<code>a</code>。</p>

<ul>
  <li><a href="http://pan.baidu.com/share/link?shareid=2246469849&amp;uk=4080321956">Matlab Terminal</a></li>
  <li><a href="http://pan.baidu.com/share/link?shareid=2452208514&amp;uk=4080321956">Matlab Command</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果电脑 MagSafe 电源接口]]></title>
    <link href="http://pikipity.github.com/blog/magsafe.html"/>
    <updated>2013-07-17T18:57:00+08:00</updated>
    <id>http://pikipity.github.com/blog/magsafe</id>
    <content type="html"><![CDATA[<p>第一次看到苹果电脑的电源接口就觉得设计的很独特。和平常的电脑不一样，不是将接口插入到电脑上，而是用一块磁铁将电源接口吸附在电脑上。这样的好处是防止突然撦拽电源线的时候，损伤电源接口或是电脑。而且电脑上的接口不仅小而且深度不深，不占地方还易于清理。真的是很好的设计。今天在网上看到一篇译文，专门介绍苹果电脑电源接口的结构，还有指示灯变颜色的原理的，于是抄录在这里。译文原文在<a href="http://www.mac52ipod.cn/post/apple-magsafe-connector-structure-and-how-it-works.php">这里</a>，英文原文在<a href="http://www.righto.com/2013/06/teardown-and-exploration-of-magsafe.html">这里</a>。</p>

<h2 id="magsafe-">苹果电脑 MagSafe 电源接口的结构，还有指示灯变颜色的原理</h2>

<h3 id="fans">转载自“苹果fans博客”</h3>

<p>苹果电脑的 MagSafe 电源接口挺有意思的，一方面它靠磁力吸在笔记本机身上，插拔方便而且有人踢到电源线时自动断开，不会像传统 PC 电源那样把笔记本从桌子上拉的掉下来；另一方面有个小 LED 灯能显示充电状态。下面说说苹果电脑 MagSafe 电源接口的内部结构和工作原理：几个触点都是干什么的？充电的过程和指示灯变色的原理是什么？苹果电脑是怎么读出 MagSafe 电源的型号和序列号的？</p>

<p><img src="https://lh4.googleusercontent.com/-Ke_F1z1wvpc/UeZ9y6D-s4I/AAAAAAAAA4E/xBs52Hu2gFU/s400/1373621865_1295fa9a.jpg" alt="5个功能对称的触电" /></p>

<p>苹果电脑 MagSafe 电源接口有 5 个触点，最外侧的两个用于接地，靠近中间的两个触点用于传输电力，最中间那个用于电脑和充电器的芯片之间传输信号。</p>

<p>触点是对称的，所以插反了也没问题。另外老款 MagSafe 电源的中间那个触点明显比另外四个细的多。触点外面那一圈金属用于吸附苹果笔记本的电源口，但没有磁力，Mac 主机的电源口有磁力（你拿钥匙什么的伸过去也能被吸住）。</p>

<p><img src="https://lh3.googleusercontent.com/-j6U1GIEhVWQ/UeZ9y1mZT7I/AAAAAAAAA4I/unoLWQV1ANU/s400/1373623159_47729f47.jpg" alt="MagSafe 解剖图" /></p>

<p>扒开 MagSafe 电源接口外面的保护层，可以看到电路板上的 LED 灯（图中间的白色部分）和一颗小小的芯片（较远一侧那个黑色的方块）。它储存电源的序列号等身份信息，控制充电电流，控制指示灯颜色。</p>

<p>每次把 MagSafe 电源插到苹果电脑侧面的接口上时，会经过以下步骤：</p>

<ul>
  <li>插到电脑上之前，MagSafe 只维持大约 100 µA 的极弱电流</li>
  <li>插头吸到苹果电脑上一瞬间，MagSafe 电源检测到上面说的那股极弱电流遇到了阻性负载，电阻值也吻合，于是开始全功率供电。苹果电脑检测到电源口有供电后，就通过接口中间那个触点读取 MagSafe 芯片里储存的身份信息，确认后就接受供电。</li>
  <li>苹果电脑通过接口中间那个触点发送信号给 MagSafe 电源里的芯片，控制插头上那颗 LED 灯改变颜色以显示供电状态：电池充电中（橙色）还是电池已充满只给主机供电（绿色）。</li>
</ul>

<p><img src="https://lh5.googleusercontent.com/-UM580t1rc1E/UeZ9yzOLaMI/AAAAAAAAA4Q/6iIM52wwxoc/s400/1373627863_89193c4f.png" alt="MagSafe 电源信息" /></p>

<p>你打开 Mac 的 “系统信息”，在硬件栏里也能看到当前所接的 MagSafe 电源的信息，就是通过中间那个触点从电源自带那颗芯片传过来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 隐藏软件]]></title>
    <link href="http://pikipity.github.com/blog/command-plus-h.html"/>
    <updated>2013-07-17T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/command-plus-h</id>
    <content type="html"><![CDATA[<p>在 Mac OS X 系统中有一个非常好用的功能，就是“隐藏应用程序”。在选定某个应用程序的状态下，按 <code>command+H</code> 就可以隐藏当前选定的软件，按 <code>command+option+H</code> 就可以隐藏当前所有未选定的软件，起到的效果和最小化（顺带一提最小化当前窗口的快捷键是 <code>command+M</code>）一样，唯一的区别就是：“最小化”是对于窗口而言的；“隐藏”是对于软件而言的。也就是说，如果将一个窗口最小化，那么仅仅是当前此窗口最小化，但是如果一个软件被隐藏，那么此软件各个桌面上的窗口都会被最小化。由于 Mac OS X 使用 dock 对于当前打开的窗口和软件进行管理，最小化的窗口和未最小化的窗口难以区分（除非你已经在设置中将<code>将窗口最小化为应用程序图标</code>取消勾选，但是那样的话，当最小化的图标很多时，你的 dock 就会变得拥挤不堪）。所以“隐藏”比“最小化”更加方便程序的统一管理。</p>

<p>在隐藏应用程序之后，又出现一个问题，我们很难通过 dock 一眼看出哪个程序已经被隐藏了，我们可以通过开启“已经隐藏的软件图标在 dock 上虚化的功能”，效果如下图。开启方法是在终端中输入：</p>

<pre><code>defaults write com.apple.Dock showhidden -bool YES;killall Dock
</code></pre>

<p>dock 重启之后就可以了，当然如果你已经将<code>将窗口最小化为应用程序图标</code>取消勾选，那么这条命令就没有任何用处了。</p>

<p>关闭的方法是在终端中输入：</p>

<pre><code>defaults write com.apple.Dock showhidden -bool NO;killall Dock
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-L0dW4pXnznc/UeXjaxXktmI/AAAAAAAAA3o/VvtuU_ZgnnE/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-17%2520%25E4%25B8%258A%25E5%258D%25888.19.01.png" alt="隐藏软件虚化特效" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向 Github 添加 SSH 公匙]]></title>
    <link href="http://pikipity.github.com/blog/ssh-public-key.html"/>
    <updated>2013-03-12T20:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/ssh-public-key</id>
    <content type="html"><![CDATA[<p>今天用 octopress 遇到一点小问题，在向 Github 发布自己的 post 的时候出现错误：</p>

<pre><code>Permission denied (publickey). fatal: The remote end hung up unexpectedly
</code></pre>

<p>看到 publickey，我突然想到我好想忘了向 Github 添加我自己的公匙了，问了一下谷姐，看到<a href="http://stackoverflow.com/questions/3617113/github-newbie-problems-permission-denied-publickey-fatal-the-remote-end">这里</a>的解答，果然是这个原因。我想如果重新设定一下 octopress 的github 登陆设置应该也是可以的，但是如果每次重启电脑都要这样来一次也太麻烦了，于是果断还是去添加一次吧，一劳永逸（最好还是先到<a href="https://help.github.com/articles/error-permission-denied-publickey">这里</a>按照步骤检查一下）。</p>

<p>Mac 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-mac">这里</a>，Windows 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-windows">这里</a>（Windows 需要在 Git Bash 里使用下面的命令），Linux 见<a href="https://help.github.com/articles/generating-ssh-keys#platform-linux">这里</a>，三者大同小异，唯一的区别应该就是复制 ssh key 的时候使用的命令不一样吧。步骤如下：</p>

<ol>
  <li>
    <p>检查是否存在 .ssh 文件夹</p>

    <pre><code> $ cd ~/.ssh
</code></pre>

    <p>如果没有这个文件夹，跳到第三步，如果有，则继续</p>
  </li>
  <li>
    <p>备份一下当前已有的 ssh 秘钥</p>

    <pre><code> $ ls
 $ mkdir key_backup
 $ cp id_rsa* key_backup
 $ rm id_rsa*
</code></pre>
  </li>
  <li>
    <p>产生新的 ssh 秘钥</p>

    <pre><code> $ ssh-keygen -t rsa -C "your_email@example.com"
</code></pre>

    <p>“your_email@example.com”就是github上你用来上传的邮箱，如果你没修改过就是你用来注册账户的那个邮箱，输入上面的命令并回车后会引导你生成你的 RSA 秘钥对，如下：</p>

    <pre><code> Enter file in which to save the key (/Users/you/.ssh/id_rsa): [按回车]
 Enter passphrase (empty for no passphrase): [输入一个通关密语]
 Enter same passphrase again: [把通关密语再输一遍]
</code></pre>

    <p>通关密语一般建议输入一个10到30字元的字符串（别输中文），这关系到你将来传输信息的保密性。成功后你会看到<strong>如</strong>下内容</p>

    <pre><code> Your identification has been saved in /Users/you/.ssh/id_rsa.
 Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
 The key fingerprint is:
 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></pre>
  </li>
  <li>
    <p>将我们的 ssh 秘钥添加到 Github。首先复制我们的公匙，Mac 用下面的命令：</p>

    <pre><code> $ pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>Linux 用下面的命令（如果没有 xclip，先安装一下吧，很好用，<code>sudo apt-get install xclip</code>）：</p>

    <pre><code> $ xclip -sel clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>Windows 用下面的命令：</p>

    <pre><code> $ clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>然后就是到 Github 网站把公匙粘贴过去。步骤如下：</p>

    <ul>
      <li>
        <p>到你的<a href="https://github.com/settings">账户设定</a>中</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/userbar-account-settings.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击左栏中的 <a href="https://github.com/settings/ssh">“SSH Keys”</a></p>

        <p><img src="https://github-images.s3.amazonaws.com/help/settings-sidebar-ssh-keys.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击 “Add SSH key”</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/ssh-add-ssh-key.png" width="350pt" /></p>
      </li>
      <li>
        <p>在 “Key” 的输入框中粘贴</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/ssh-key-paste.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击 “Add key”</p>
      </li>
    </ul>
  </li>
  <li>
    <p>现在你可以测试一下了，用下面命令</p>

    <pre><code> $ ssh -T git@github.com
</code></pre>

    <p>你会得到下面信息：</p>

    <pre><code> The authenticity of host 'github.com (207.97.227.239)' can't be established.
 RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 Are you sure you want to continue connecting (yes/no)?
</code></pre>

    <p>输入 “yes”，回车，你会看到下面信息：</p>

    <pre><code> Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

    <p>如果 “username” 正确，那么就 OK 了。</p>
  </li>
</ol>

<p>如果你看到 “access denied”，请考虑使用 <a href="https://help.github.com/articles/set-up-git">HTTPS</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[此 “Fate” 非彼 “Fate”]]></title>
    <link href="http://pikipity.github.com/blog/this-fate-is-not-that-fate.html"/>
    <updated>2013-03-05T18:21:00+08:00</updated>
    <id>http://pikipity.github.com/blog/this-fate-is-not-that-fate</id>
    <content type="html"><![CDATA[<p><img src="/images/post/saber.jpg" alt="Fate/stay night" width="550pt" /></p>

<p>今天要说的不是上边的这个 “Fate”，想看 Saber 酱的请前方左转到<a href="http://pan.baidu.com/share/link?shareid=394298&amp;uk=4080321956">这里</a>围观 Saber。今天要说的是《黑暗史诗》（“Fate”）这个角色扮演类游戏。</p>

<p>《黑暗史诗》不论在 Windows 平台还是在 Linux 或是 Mac 上都很有名。喜欢角色扮演类游戏的玩家一定听说过。虽然模仿《暗黑破坏神》的游戏现在并不少见，但是我认为，这款游戏无疑是最成功的一个。2005年原版上市，现今已有三部资料片。游戏很小，小到只有100多M。但是全3D打造，画面表现绝不亚于很多大手笔大制作。</p>

<p><img src="/images/post/fate_1.jpg" width="550pt" /></p>

<!--more-->

<p>游戏的主线很简单，要你扮演的角色到地下城的XX层帮他拿回什么东西（具体什么东西我忘记了，记忆力真捉急啊）。你完全可以不去理睬所谓的主线任务，一层一层的下地下城就可以了，每一层的地图都是随机生成的，也就是说，你到这一层100次，这一层就有100幅地图等着你。没到一层，你都可以回到城镇去接任务，任务一样是随机的。就连你的脚色都可以说是随机的，因为没有像《暗黑》那样职业的设定，你可以佩戴所有武器，使用所有魔法，具体你要成为怎么样的地下城勇士，就要看你的加点了，而且加点也不是简单的什么敏捷、体力那么简单，你要选择的是你要精通什么样的技能，比如剑技能或是治疗魔法技能等等。当然宝石镶嵌系统、声望系统、赌博系统，只有你想不到的，没有你做不到的。</p>

<p><img src="/images/post/fate_2.jpg" width="550pt" /></p>

<p>游戏最大的乐趣就是自己的宠物了，游戏一开始你就可以选择带一只宠物猫或是宠物狗，可以帮你打怪或是帮你运东西回城去买，这只不过是队友而已（卖队友什么的最开心了），乐趣是当你在池塘钓了鱼再喂给自己宠物吃，看着它变成怪物跟着你跑来跑去的时候很是快乐啊。在游戏中，一般最开始就会去商店买一个钓竿，到池塘钓鱼咱装备和钱，池塘中会吊起各种各样的东西，从装备到宝石再到具有各种各样效果加成的鱼什么都有。鱼的变身效果大部分是一段时间就会消失的，还有很小一部分是永久的，永久的变身一般都很帅或是很奇葩的。这里有一个<a href="http://arch.pcgames.com.cn/pcgames/gl/h/0507/696458.html">钓鱼必中法</a>，呵呵，大侠，你懂得。</p>

<p><img src="/images/post/fate_3.jpg" width="550pt" /></p>

<p>大家看到这里一定都想起了另外一款游戏《火炬之光》，除了画质更加精良，主线任务更加完善以外，其他几乎完全一样。其实《火炬之光》的项目主管就是《黑暗史诗》的制作人之一，所以不一样才奇怪呢。</p>

<p><img src="/images/post/touchlight.jpg" width="550pt" /></p>

<p>其实，我在电脑上安装这两款游戏，纯粹是玩腻了字符的地下城游戏<a href="http://crawl.chaosforge.org/Crawl_Wiki">《Dungeon Crawl of Stone soup》</a>，想找个图形化界面玩一玩，结果没有找到就来玩这两个了。《Dungeon Crawl of Stone soup》还是很好玩的，但是上手难度太高了，首先你要习惯他的画面，全字符（就像是回到了那个只有 DOS 的远古时代一样），然后是操作，你要记住所有按键，最后是信息量，就那些各种各样的“神”的属性加成和性格特点就够研究上很多天的，更不用说种族特性、武器特性、怪物特性等等，完全是喜欢折腾的人居家旅行必备“良药”啊，很治愈呢。玩儿完《Dungeon Crawl of Stone soup》你就明白什么叫活着真难，所有角色只有一条命，刚开始，新手常常是饿死在第三层（谁叫你不选可爱的食尸鬼），然后就是重新建人物，重新开始，10多次饿死在同一层之后发现，以后再也不敢去那一层了，因为那一层全都是你前面人物的灵魂（你要是选的召唤师，呵呵，灵魂召唤怪物围死你）在飘来飘去追着你打。在《Dungeon Crawl of Stone soup》中，你需要面对一个冒险者真的会遇到的很多琐碎的问题，这才是真正的“龙与地下城”的冒险。</p>

<p><img src="/images/post/Crawl.jpg" width="550pt" /></p>

<p>最后是下载地址：</p>

<ol>
  <li><a href="http://crawl.develz.org/wordpress/downloads">Dungeon Crawl of Stone soup</a></li>
  <li><a href="http://pan.baidu.com/share/link?shareid=393536&amp;uk=4080321956">《黑暗史诗》（Fate）Mac版</a></li>
  <li><a href="http://www.gamersky.com/Soft/200808/15447.shtml">《黑暗史诗》(Fate) Windows版</a></li>
  <li><a href="http://pan.baidu.com/share/link?shareid=393478&amp;uk=4080321956">《火炬之光(一)》Mac版</a></li>
  <li><a href="http://bbs.maiyadi.com/thread-877042-1-1.html">《火炬之光（二）》Mac版</a></li>
  <li><a href="http://www.gamersky.com/Soft/201209/39814.shtml">《火炬之光（二）》Windows版</a></li>
</ol>
]]></content>
  </entry>
  
</feed>
