<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Matlab | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/matlab/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[寻找一种有效估算瞬时频率的方法]]></title>
    <link href="http://pikipity.github.com/blog/find-a-way-to-calculate-the-instaneous-frequency.html"/>
    <updated>2013-08-09T18:50:00+08:00</updated>
    <id>http://pikipity.github.com/blog/find-a-way-to-calculate-the-instaneous-frequency</id>
    <content type="html"><![CDATA[<p>我试图寻找一种可以用比较少的数据点就可以较为精确的估算某个时刻瞬时频率的方法，当然了，根据“薛定尔的胖次”（对于虐猫狂人薛定谔不熟悉的可以去看<a href="https://docs.google.com/file/d/0B8AjE9xqZzSiNlVlSEkxNi1uTFE/edit?usp=sharing">这里</a>的这本少儿读本，写的很好）在信号分析中的拓展，如果要精确计算瞬时频率就需要一个在时域上无限长的信号，当然这是不可能的，所以，如果能够找到一种计算方法，在时域上的精度和频域上的精度问题上去的平衡就可以了。</p>

<p>在经过一番大搜索之后，发现现在最为流行的求瞬时频率的方法就是 HHT（希尔伯特-黄转换，也就是 EMD，经验模态分析，论文在<a href="https://docs.google.com/file/d/0B8AjE9xqZzSiUDhGRkJ3UEwzNjQ/edit?usp=sharing">这里</a>，洋洋洒洒90多页，大家慢慢看）。</p>

<h2 id="section">什么是瞬时频率</h2>

<p>第一个问题我就说不清楚，一般来说，把瞬时频率定义为</p>

<script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\frac{d\theta(t)}{dt}</script>

<p>这个定义是 Cohen 提出的，但是这个定义仅限于 “monocomponent function”，但是什么是 “monocomponent function” 呢？他没说。。。（坑爹啊 (╯‵□′)╯︵┻━┻）但是 Gabor， Bedrosian 和 Boashash 提出：</p>

<blockquote>
  <p>for any function to have a meaningful instantaneous frequency, the real part of its Fourier transform has to have only positive frequency.</p>
</blockquote>

<p>黄锷院士（就是这个 HHT 的创始人啦）进一步验证得到，对于平均值为零的局部对称信号而言，上述定义的瞬时频率才具有物理意义。</p>

<p>据说，“澳门大学”（请注意，这里不是做宣传）的钱涛教授在提出 AFD 的时候定义了更为准确的瞬时频率，但是博主愚钝，到现在也没看懂他的论文，甚至都不知道从何看起，所以更不用提他提出的方法和定义了。</p>

<h2 id="section-1">寻找新方法的原因</h2>

<p>在寻找到 HHT 之前，手头已经有的方法大体可以分为两种 – Fourier Transform 和 Wavelet Transform，当然还包括一些 Fourier Transform 的变种，例如 Wigner–Ville Distribution。但是这两种方法都存在着各种各样的缺点。</p>

<h3 id="fourier-transform">Fourier Transform</h3>

<p>我们都知道，Fourier Transform 是试图将一个信号分解为多个幅值和频率固定的三角函数线，对于其对于信号的要求是稳定、收敛，但是实际中，尤其是在脑电中，我们无法保证自己截取的信号就是符合要求的。而且 Fourier Transform 所求的是一种平均频率分布，这意味其会带来两大缺点：</p>

<ol>
  <li>能量分散到了整个频谱上，难以辨清具体频率所在。</li>
  <li>产生了无意义的负频。</li>
</ol>

<p>当然，以上两点都可以接受的话，其最致命的缺点就是 <strong>丧失了时间信息</strong>。尽管 STFT (Short Time Fourier Transform) 利用窗截取某个时间段的信号，可以在一定程度上获得瞬间频率，但是由于窗长度一旦选取就固定不变，导致时间精度固定，从而导致频率精度也固定，这样对频率的突变就及其不敏感，而检测突变则是信号分析中非常重要的，所以 Fourier Transform 难以分析瞬时频率。</p>

<h3 id="wavelet-transform">Wavelet Transform</h3>

<p>根据下面 Wavelet Transform 的公式，我们可以清楚的看出，为了改善 Fourier Transform 会丧失时间信息的缺点，Wavelet Transform 添加两个参数 $b$（时间刻度）和 $a$（频率刻度，可以转化为对应的频率），这样就可以同时获得时间和频率两方面的信息。同时，不再使用三角函数作为基函数，而是使用小波 $\phi$ 作为基函数，可以解决 Fourier Transform 用稳定信号分析不稳定信号的问题。</p>

<script type="math/tex; mode=display">W(a,b;W,\phi)=\frac{1}{\sqrt{a}}\int_{-\infty}^{\infty}W(t)\phi^*(\frac{t-b}{a})dt</script>

<p>但其对 Fourier Transform 的改善还是存在缺点：</p>

<ol>
  <li>尽管随着 $a$ 的变化，频率可以在多分辨度下进行解析，但是在某一个分辨度下，其分辨精度还是固定不变的。</li>
  <li>小波一旦选定就无法改变，没有办法保证此小波在整个波段上都合适。</li>
  <li>小波选择问题难以解决，一般只不过是通过经验来进行选择。</li>
</ol>

<h2 id="hht">HHT</h2>

<p>就算上面两种方法可以完美解析实际信号，但是也很难从他们的算法中找到计算瞬时频率的办法，那么根据提到的定义，要找瞬时频率，就要先找瞬时相位，于是慢慢征程刚开始啊。。。</p>

<h3 id="ht">HT</h3>

<p>Gabor 提出一种定义信号相位的方法，如果能够把信号表示成为其对应的复数形式（如下），那么相位自然也就找到了。</p>

<script type="math/tex; mode=display">z(t)=s(t)+j\hat{s}(t)</script>

<p>上式中的 $\hat{s}(t)$ 可以通过 Hilbert Transform (HT) 来得到。下式就是 HT 的转化方法。</p>

<script type="math/tex; mode=display">\hat{s}(t)=\frac{1}{\pi}\int_{-\infty}^{\infty}\frac{s(t)}{t-\tau}d\tau</script>

<p>为了使信号可以进行 HT，并且具有有意义的瞬时频率，必须先对信号进行处理，于是黄锷院士提出 HHT。</p>

<h3 id="imf">IMF</h3>

<p>所谓对信号进行处理，就是将信号拆分为多个可以进行 HT 来寻找瞬时频率的信号 – Intrinsic Mode Function（IMF）。IMF 满足一下两点：</p>

<ol>
  <li>在整个信号上，局部极值（包括局部极大值和局部极小值）的个数和零点的个数必须等于或最多只能相差一个。</li>
  <li>在任意一点，局部极大值所形成的上包络线和局部极小值所形成的下包络线的平均值等于0</li>
</ol>

<p>这个由原始信号到 IMF 的分解流程称为 Empirical Mode Decomposition (EMD)。</p>

<h3 id="emd">EMD</h3>

<p>EMD 的流程非常明确，在上面提供的论文中都有写，待分析的信号为 $s(t)$：</p>

<ol>
  <li>找出 $s(t)$ 的所有局部极大值和局部极小值，接着利用三次样条插值得到由局部极大值连接形成的上包络线和局部极小值连接形成的下包络线。</li>
  <li>求出上下包络线的平均值 <script type="math/tex">m_1(t)</script></li>
  <li>
    <p>利用下式得到第一分量：</p>

<script type="math/tex; mode=display">h_1(t)=s(t)-m_1(t)</script>
  </li>
  <li>
    <p>检查 <script type="math/tex">h_1(t)</script> 是否是 IMF，如果不是则将 <script type="math/tex">h_1(t)</script> 作为原信号返回第一步，直到 <script type="math/tex">h_k(t)</script> 是 IMF，就得到了一个 IMF 分量 <script type="math/tex">c_1(t)</script>，也就是</p>

<script type="math/tex; mode=display">c_1(t)=h_k(t)</script>
  </li>
  <li>
    <p>求剩余分量：</p>

<script type="math/tex; mode=display">r_1(t)=s(t)-c_1(t)</script>
  </li>
  <li>将 $r_1(t)$ 当做新资料，返回步骤1，直到 $r_n(t)$ 为单调函数完成分解。</li>
</ol>

<p>完成分解后，就将原始信号分解为了 $n$ 个 IMF 和一个趋势函数，也就是</p>

<script type="math/tex; mode=display">s(t)=\sum_{k=1}^nc_k(t)+r_n(t)</script>

<h2 id="emd--matlab-">EMD 的 MATLAB 实现</h2>

<p>尽管上面的算法流程第一次看起来清晰明了，但是要注意，我们分析的是离散的数据点，而不是连续的信号，于是这就带来了很多问题，以至于上面流程中很多名词都没有严格的定义，需要我们自己来在编写程序的时候来定义，根据定义的不同，程序最后运行的结果也就会不同。一边考虑我们要分析的信号是离散信号，一边在看一遍上面的流程就会很容易发现下面几个问题：</p>

<ol>
  <li><strong>如何定义离散信号的局部极大值与局部极小值？</strong>因为我们的离散信号是通过实际信号采样得来的，那么就会出现离散信号的局部极值与原始实际信号的局部极值不一样的情况，甚至出现多个连续一样的局部极值，处理起来非常麻烦；而且在考虑局部极值的时候还会出现边缘问题，<strong>离散信号最开始与最末尾的两个点如何处理？</strong>绝对不能舍弃，因为在上面的流程中计算局部极值是会在循环中多次出现，如果每次舍弃两个点，会丢失大量数据，而处理不当，在插值的时候边缘会产生出奇怪的震荡导致 IMF 计算不准确影响瞬时频率估计。</li>
  <li><strong>三次样条插值如何用 MATLAB 实现？</strong>这应该是最容易解决的问题了，因为 MATLAB 中有现成的函数，随后介绍。</li>
  <li><strong>如何判断 $h_k(t)$ 是 IMF？</strong>这个问题应该是第二简单的问题了，随后介绍。</li>
</ol>

<p>以上三个问题的解决方式不同，分解出的 IMF 也就不同，估算得到的瞬时频率的准确度也就不同，我找了多个程序，并自己编写了一个程序，但是效果都不能说是很好，其实还是蛮失望的，EMD 这个方法出现也有很多年了，结果连一个现成的比较完美的 MATLAB 程序都没有。这里使用国际比较认可的由一个法国人 G. Rilling 编写的程序（可以在<a href="http://perso.ens-lyon.fr/patrick.flandrin/emd.html">这里</a>下载到）和我在 Github 上找到的一个效果速度也还可以的 MATLAB 程序（可以在<a href="https://github.com/daochenghaike/EMD.git">这里</a>下载到）综合说明一下他们对上面三个问题的解决方法和我的一些见解。（我写的程序在<a href="https://github.com/pikipity/EMD-using-MATLAB.git">这里</a>，但是仅仅当做错误教程看一看就可以了，方法极度不可取，速度慢不说，分解出来的本应完全正交的 IMF 的频域还会出现重叠，边缘也出现了震荡，导致出现了很多低频杂波。）</p>

<p>由于上面三个问题难易程度不一，我会先讨论第二个问题，然后是第三个，最后再讨论第一个。</p>

<h3 id="matlab-">如何用 MATLAB 实现三次样条差值</h3>

<p>在 MATLAB 中有三种方法可以实现三次样条差值：</p>

<ol>
  <li>
    <p><code>yy=spline(x,y,xx)</code>：我从 Github 上找到的那个程序使用的是这种插值方式。其中，<code>x</code>是断点的横坐标，<code>y</code>是断点的纵坐标，<code>xx</code>是插值之后重新构成的函数采样点的横坐标，<code>yy</code>是插值之后重新构成的函数采样点的纵坐标。当然，你也可以使用 <code>pp=spline(x,y)</code>，这样得到的<code>pp</code>是插值之后的到的函数的 structure，然后可以通过 <code>yy=ppval(pp,xx)</code> 来得到重新构成的函数的采样点。插值效果如图</p>

    <p><img src="https://lh6.googleusercontent.com/-DNSR-F6UQw0/UgY0P9GUX7I/AAAAAAAABBk/L_rerjnTI2k/s912/1.jpg" alt="使用```spline```进行插值" /></p>
  </li>
  <li>
    <p><code>pp=csape(x,y,CONDS)</code>：在我的程序中，这个函数的特点是你可以通过改变<code>CONDS</code>来使用不同的计算三系样条插值的方法，这些方法唯一的不同就是使用的 boundary condition 不一样，根据你选择的方法的不同，你可能需要多提供边界的一次导数或是二次导数作为额外的 boundary condition 来进行计算。其他的参数和第一个方法一样。效果如图</p>

    <p><img src="https://lh4.googleusercontent.com/-LRaMxf6QZdo/UgY0PzPmmTI/AAAAAAAABBs/isBKeOjLf28/s912/2.jpg" alt="使用```csape```进行插值" /></p>
  </li>
  <li>
    <p><code>yy=interp1(x,y,xx,'spline')</code>：这个方法的本质还是调用第一个方法中的函数进行运算，所以其实可以合并到方法一中。G. Rilling 使用的这种方法。</p>
  </li>
</ol>

<p>将上面两种方法进行比较，得到下面这幅图</p>

<p><img src="https://lh3.googleusercontent.com/-qJl5fKw60o8/UgY0P55hX5I/AAAAAAAABBw/x55p0wIhqyI/s912/3.jpg" alt="```spline```和```csape```插值效果比较" /></p>

<p>我们可以发现，只有边界处出现细微差别，其他完全一样，如果调整<code>csape</code>的插值方法，可以得到完全一样的结果，所以使用哪种的效果是完全一样的。</p>

<p>（未完待续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Alfred 快速启动 MATLAB]]></title>
    <link href="http://pikipity.github.com/blog/open-matlab-fast-using-alfred.html"/>
    <updated>2013-08-05T18:44:00+08:00</updated>
    <id>http://pikipity.github.com/blog/open-matlab-fast-using-alfred</id>
    <content type="html"><![CDATA[<p>大概很多人都会难以忍受 MATLAB 启动时候漫长的等待，那是因为 MATLAB 的窗口化是基于 java 的，加载 java 永远是一个让人蛋疼的事情。但是如果你使用的是 Linux 或是 Mac OS X，那么你完全没必要把时间都花费在等待 MATLAB 准备和打开 java 的过程上。我们真正使用 MATLAB 是使用它的命令行，而它的图形化界面，除了修改图片和使用具有 GUI 的 toolbox，一般很少用到，所以到用到的时候在加载 java 就可以了，而且由于加载 java 和启用命令行的操作分开了，同时运行的线程和占用的内存都减少了，java 的加载速度也会相应提升。总而言之，就是让你觉得 Matlab 快了很多很多。</p>

<p><img src="https://lh3.googleusercontent.com/-IPC7qvN44iA/Uf-RDQ06AZI/AAAAAAAAA8E/oyQ6i78YWwo/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25887.46.50.png" alt="终端使用 MATLAB" /></p>

<p>这里使用的技巧并不高深，只是让 <a href="http://www.alfredapp.com/">Alfred</a> 执行一段 shell 命令，并为这个命令定制关键词，方便以后用 <a href="http://www.alfredapp.com/">Alfred</a> 搜索。</p>

<p><a href="http://www.alfredapp.com/">Alfred</a> 是 Mac OS X 上的一款快速启动、查询工具，类似于 Mac OS X 自带的 spotlight，但是功能上则强大很多。spotlight仅能查询文件并快速打开，<a href="http://www.alfredapp.com/">Alfred</a> 则不仅如此，查询网页、查询词典、替代计算器、查询 iTunes、执行指定 shell 命令、workflow 或是 AppleScript 等等，而且这些功能全部集成到一个搜索条中，超级方便快捷。现在，spotlight 早已经被我禁用了，完全由 <a href="http://www.alfredapp.com/">Alfred</a> 代替。<a href="http://www.alfredapp.com/">Alfred</a> 的官网在<a href="http://www.alfredapp.com/">这里</a>，你可以免费下载和使用，但是免费版中部分功能被限制，用起来还是很不爽的，你可以通过购买获得 Powerpack 激活码，然后就可以享用 <a href="http://www.alfredapp.com/">Alfred</a> 所有强大的功能了。如果你不想付钱，你可以到<a href="http://pan.baidu.com/share/link?shareid=2139275050&amp;uk=4080321956">这里</a>下载 <em>X解程序</em>，但是 v1 旧版的X解程序，官网提供的新版 v2 的X解还请自行 <a href="https://www.google.com">Google</a> 之。</p>

<p><img src="https://lh5.googleusercontent.com/-M187kHThsnM/Uf-RDKTJYBI/AAAAAAAAA8A/QMe45cbl_gI/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25887.00.51.png" alt="Alfred 使用画面" /></p>

<p>这里就不介绍软解的安装与X解还有基本配置了，毕竟软件很简单，一目了然。直奔主题，如何让其执行一段 shell 命令来在终端下打开 MATLAB。</p>

<p>首先，你要知道如何在终端下打开 MATLAB。找到你电脑上的 MATLAB 程序，我指的不是那个 app 在哪，而是在那个 app 上右键，点击显示包内容之后，找到一个文件名叫 matlab 的程序（我记得应该就是一个 shell 脚本），记录下它的路径（右键单击“拷贝路径”中的“Path”，例如我的路径就是<code>/Applications/MATLAB/MATLAB_R2011a.app/bin/matlab</code>）。然后你只要在终端中直接执行这个路径，MATLAB 就会打开了。但是你会发现，依然是以图形化界面的方式打开，所以你需要在路径后面加一些启动参数，常用的启动参数如下</p>

<pre><code>-nodesktop  不启动图形化界面
-nosplash   无欢迎信息
</code></pre>

<p>你也可以在后面使用参数<code>-r</code>，这样，MATLAB打开后就会自动执行后面的命令（需要执行的命令空一格用引号引起来放在后面就可以了，例如<code>-r "x=1:10;plot(x)"</code>）。</p>

<p>现在就要将这个启动 MATLAB 的 shell 命令添加入 <a href="http://www.alfredapp.com/">Alfred</a> 中。打开 <a href="http://www.alfredapp.com/">Alfred</a> 的 “Preferences”，在 “Extensions” 中添加一个 shell 命令，名字随便起一个就好了。”Title” 是你将会在 <a href="http://www.alfredapp.com/">Alfred</a> 中搜索看到的名字，起一个好认的就可以了。”Description” 是你将在 <a href="http://www.alfredapp.com/">Alfred</a> 中显示在名字下面的小字，简单注释一下就可以了。”Keyword” 一定要使用，不然每次打名字就太累了，这里可以设置快捷键，以后搜索的时候打入这个关键字就可以了。”Options” 中的 “Silent” 必须取消掉，不然 MATLAB 会在后台启动而不显示。”Command” 就不多说了，把你要执行的命令放进来就可以了。”Parameter” 是设置你将来搜索的时候是否需要参数，”Auto Detect” 就可以了。保存，就可以使用了。</p>

<p><img src="https://lh4.googleusercontent.com/-DWMROP6I7qA/Uf-RC77dmCI/AAAAAAAAA74/4XxBwboOPjA/s640/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-05%2520%25E4%25B8%258B%25E5%258D%25886.59.51.png" alt="设置画面" /></p>

<p>如果，你觉得设置很麻烦，可以下载我已经设置好的文件，但是要注意把 “matlab” 的路径改为自己电脑上的路径。第一个文件就是简单的在终端打开 MATLAB，但是它还会打开 “workspace” 并清空终端（因为我唯一需要的窗口就是 “workspace”，用来看一下当前保存了哪些变量，当然你也可以用<code>CommandHistory</code>打开命令历史记录）。第二个文件是在终端打开 MATLAB，并执行你输入的一条命令，例如你在 <a href="http://www.alfredapp.com/">Alfred</a> 中输入 <code>matlab "a=5;"</code>，就会打开 MATLAB 之后创建一个变量<code>a</code>。</p>

<ul>
  <li><a href="http://pan.baidu.com/share/link?shareid=2246469849&amp;uk=4080321956">Matlab Terminal</a></li>
  <li><a href="http://pan.baidu.com/share/link?shareid=2452208514&amp;uk=4080321956">Matlab Command</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab 编写“生命游戏”]]></title>
    <link href="http://pikipity.github.com/blog/the-game-of-life.html"/>
    <updated>2013-07-26T19:46:00+08:00</updated>
    <id>http://pikipity.github.com/blog/the-game-of-life</id>
    <content type="html"><![CDATA[<p>生命游戏就是指英国数学家约翰·何顿·康威在1970年发明的细胞自动机。一个平面二维世界被划分为了多个小格子，每个小格子都住着一个细胞，其存在两种状态：生或死（不是薛定谔他家养的猫的细胞，放心，没有中间状态，否则用什么算法？神经网络？）。我们可以为这个世界规定某种规则，然后观看这个世界是如何继续发展的（就是体验上帝啦）。最初，约翰·何顿·康威设定了三个法则：</p>

<ul>
  <li>当一个细胞周围的八个位置中有3个细胞时，该位置产生细胞；</li>
  <li>当周围有2个细胞时，该位置维持原样；</li>
  <li>其他情况，该位置变为无细胞。</li>
</ul>

<p>然后，世界开始根据这三个法则依据最初细胞摆放数量和位置的不同演变出了各种各样有趣的图案，比如下面这个，这三条看似简单的规律其实蕴含着许许多多的推论，有兴趣的可以看看<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">日文的wiki</a>介绍，详细程度超乎想象。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif" alt="机枪制造“滑翔机”" /></p>

<p>在实验室看论文实在无聊，于是用 Matlab 编写了个生命游戏的小程序，切身地体会到了 Matlab 是一个多么效率低下的语言啊。</p>

<p>PS：程序中存在大量 for 循环，严重影响程序运行质量，我觉得还可以抢救一下，元芳你怎么看？</p>

<p>忘了，程序在我的 Github 里面，传送门在<a href="https://github.com/pikipity/The-game-of-life-by-using-MATLAB.git">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[银行机按键声音]]></title>
    <link href="http://pikipity.github.com/blog/yin-xing-ji-an-jian-sheng-yin.html"/>
    <updated>2013-07-23T08:40:00+08:00</updated>
    <id>http://pikipity.github.com/blog/yin-xing-ji-an-jian-sheng-yin</id>
    <content type="html"><![CDATA[<p>这件事的起因是和女朋友争辩银行机的按键声音是否一样，我认为，既然电话的声音都是由两个频率决定，每个按键声音不一样来提示用户按对按键，那么银行机也应该是这样了，而女朋友认为银行机按键为了保密所有按键应该是一样的，争辩不出结果于是决定做实验，于是跑到东亚9楼的ATM取款机用手机录制了下面的4段音频（没找到提供音乐外链的网网站，只能压缩之后用“百度盘”了）：</p>

<p><a href="http://pan.baidu.com/share/link?shareid=2248957344&amp;uk=4080321956">录制的音频文件和处理得到的音频时域和频域图像</a></p>

<p>好，现在开始处理。我认为只要能用 Matlab 对按键声音做 FFT，看按键声音频率是否一样就可以了。拿其中的一段音频做例子，我是这样处理的。</p>

<ol>
  <li>原始音频文件竟然是<code>flac</code>格式的，无法导入 MATLAB，于是先将其用音频转换软件转换为了<code>wma</code>格式。（我用的是 <a href="http://tmkk.undo.jp/xld/index_e.html">XLD</a> 这个软件）</li>
  <li>
    <p>将音频导入 MATLAB，画出原始音频图像：</p>

    <p><img src="https://lh6.googleusercontent.com/-WeOvo4LWCGI/Ue3Ux1O1z-I/AAAAAAAAA40/RPMbZolJC_8/s559/1.jpg" alt="原始音频" /></p>
  </li>
  <li>
    <p>发现噪音还是比较明显的，于是用小波分析的函数<code>wden</code>去了一下噪，命令如下：</p>

    <pre><code>xd=wden(x,'sqtwolog','s','mln',8,'db5');
</code></pre>

    <p>然后得到了下面的图像，并选取了两个时间点，准备截取一段按键声音做 FFT。</p>

    <p><img src="https://lh3.googleusercontent.com/-rAYyay2qD3Q/Ue3Ux9tem9I/AAAAAAAAA48/CKNe_SHv8WY/s559/2.jpg" alt="去噪之后的图像" /></p>
  </li>
  <li>
    <p>根据上面选取的时间点截取了一段按键声音后，对其做了一下 FFT（用我自己写的函数，比较方便，直接画出图像）。</p>

    <pre><code>fft_plot(xd,fs,'plot');
</code></pre>

    <p>函数贴在这里：</p>

    <pre><code>function [ frequency,fft_result ] = fft_plot( data,Fs,varargin )
 % Calculate or plot directly fft results of data.
 %
 % [ frequency,fft_result ] = fft_plot( data,Fs,'plot' )
 %
 % inputs:
 %   (1) data: data used to analysis
 %   (2) Fs: sample frequency
 %   (3) 'plot': veriable input. if there is not this input, fft results will be
 %   ploted
 % output:
 %   (1) freqeuncy: frequency corresponding to the fft results
 %   (2) fft_result: fft results
	
 if nargin&lt;2
     error('data and Fs must be given');
 elseif nargin==2
     size_data=size(data);
     if size_data(1)~=1 &amp;&amp; size_data(2)~=1
         error('the length or the number of rows must be one.');
     end
     L=length(data);
     NFFT=2^nextpow2(L);
     fft_result=fft(data,NFFT);
     frequency=Fs/2*linspace(0,1,NFFT/2+1);
 elseif nargin==3
         if strcmp(varargin,'plot')
              size_data=size(data);
             if size_data(1)~=1 &amp;&amp; size_data(2)~=1
                 error('the length or the number of rows must be one.');
             end
             L=length(data);
             NFFT=2^nextpow2(L);
             fft_result=fft(data,NFFT);
             frequency=Fs/2*linspace(0,1,NFFT/2+1);
             figure;
             plot(frequency,abs(fft_result(1:NFFT/2+1)));
             title('FFT')
             xlabel('Frequency')
             ylabel('FFT results')
         else
             error('variable input must be ''plot''');
         end
 elseif nargin&gt;=3
     error('Too much inputs')
 end
 end
</code></pre>

    <p>调整了一下，频率范围，得到了这样的频域图：</p>

    <p><img src="https://lh4.googleusercontent.com/-diX6ehStf1o/Ue3UyPdKbCI/AAAAAAAAA5E/iSQUMnsy-NQ/s559/3.jpg" alt="频域图" /></p>

    <p>很明显，大约在 511.4Hz，只有一个频率。看来是我错了，但是还有三段音频那，一起处理了吧。</p>

    <p><img src="https://lh3.googleusercontent.com/-HYlrs_X6TAg/Ue3UybQgpGI/AAAAAAAAA5M/kpmInMrs-ss/s559/4.jpg" alt="竟然一模一样！！" /></p>

    <p><img src="https://lh4.googleusercontent.com/-UAGj7_avc5g/Ue3UynLshpI/AAAAAAAAA5Q/J-6BKsI4m5g/s559/5.jpg" alt="那个小的是什么？看大小可以忽略了。。" /></p>

    <p>好像还有一段音频忘处理了，算了吧，结论很明显了。</p>
  </li>
</ol>

<p>经过上面的测试，很明显是我错了，ATM机按键声音都是一样的。之后又去 Google 上搜索了一下，看到了这些，囧。</p>

<p><img src="https://lh3.googleusercontent.com/-J9-IpVrgM_g/Ue3anj5bDuI/AAAAAAAAA5g/RfH87ke-HCs/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-23%2520%25E4%25B8%258A%25E5%258D%25889.18.51.png" alt="Google 上搜索相关信息。。。第一条是怎么回事？淘宝？" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB 函数中的可选参数]]></title>
    <link href="http://pikipity.github.com/blog/varible-input-matlab.html"/>
    <updated>2013-07-20T19:34:00+08:00</updated>
    <id>http://pikipity.github.com/blog/varible-input-matlab</id>
    <content type="html"><![CDATA[<p>在编写函数的时候，有些输入的参数可输入也可不输入，或是有些输出的结果可输出也可不输出，这个时候就要用到<code>varargin</code>、<code>nargin</code>、<code>nargout</code>和<code>varargout</code>了。</p>

<ul>
  <li>
    <p><code>nargin</code>返回的是使用函数的时候输入变量的个数，<code>nargout</code>返回的是使用函数的时候输出结果的个数。</p>
  </li>
  <li>
    <p><code>varargin</code>放在输入参数的位置，可以接受任意个参数，变量类型始终为<code>cell</code>。<code>varargout</code>放在输出结果的位置，和<code>varargin</code>一样，可以输出任意个结果，变量类型始终为<code>cell</code>。</p>
  </li>
</ul>

<p>比如，现在想要写一个函数，函数输入为波长、数据，实际默认或可选参数为频率 f 和 采样频率 Fs，那么函数有两种写法：</p>

<ol>
  <li>
    <p><code>varargin</code>和<code>nargin</code>混合使用：</p>

    <pre><code> function [tau varargout] = wzjmtGetTau(wavelength, data, varargin)
     Fs = 1;
     f = 6378;
     if nargin &gt; 4
         Fs = varargin{2};
     end
     if nargin &gt; 3
         f = varargin{1};
     end
     计算过程...
     tau = t;
     if nargout &gt; 1
         varargout{1}=exp(-tau);
     end
 end
</code></pre>
  </li>
  <li>
    <p>只用<code>nargin</code>：</p>

    <pre><code> function [tau varargout] = wzjmtGetTau(wavelength, data, f, Fs)
     if nargin &lt; 4 
         Fs = 1; 
     end
     if nargin &lt; 5 
         f = 6378; 
     end
     计算过程...
     tau = t;
     if nargout &gt; 1
         varargout{1}=exp(-tau);
     end
 end
</code></pre>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
