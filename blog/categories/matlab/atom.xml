<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Matlab | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/matlab/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过几何概型来估算&pi;]]></title>
    <link href="http://pikipity.github.com/blog/find-pi.html"/>
    <updated>2013-03-28T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/find-pi</id>
    <content type="html"><![CDATA[<p><img src="{{root_url}}/images/post/find_pi.jpg" alt="几何概型估算&pi;" width="550pt" /></p>

<p>被涛神要求帮着写了一个通过模拟几何概型实验来估算 π 的 Matlab 函数。这个几何概型的实验是这样的：在一个二维直角坐标系中，存在一个以原点为中心，以1为半径的圆，和一个以原点为中心，边长为2的正方形（如图），向圆中随机投放点，计算此点在圆内的概率（忽略边线）我们可以得到如下公式，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{array}{rcl}
P&=&\frac{S_{circle}}{S_{square}}\\
&=&\frac{\pi r^2}{\left( 2r\right)^2}\\
&=&\frac{\pi}{4}
\end{array} %]]&gt;</script>

<p>所以我们只要将上面得到的概率乘以4，就可以估算出 π 的值。很明显，既然是概率实验，那么存在一次试验中使用点的个数问题，使用的点越多，理论上得到的 π 的值应该越接近真实值。</p>

<p>涛神希望这个函数实现下面几点要求：</p>

<ol>
  <li>可以一次性通过一个矩阵输入多次实验，每次实验中使用的点数不一样。</li>
  <li>将多次实验所得到的 π 的值放在一个矩阵里进行输出。</li>
  <li>使用 <code>rand</code> 函数。</li>
  <li>不使用循环。</li>
</ol>

<p>由于 <code>rand</code> 的函数无法一次性产生多个二维随机数矩阵，又由于不能使用循环，使得这个函数的编写比较麻烦（吐槽一下，即使可以产生多个二维随机数矩阵我也没法进行后续操作啊！！）。于是我的想法如下：</p>

<ol>
  <li>根据最大的点数，用 <code>rand</code> 函数产生一个三维矩阵，前两个维度分别表示每个点的横纵坐标，最后一个维度表示第几次实验。例如，如果进行三次试验，每次试验的实验点数为1，10，100，那么就用 <code>rand</code> 生成一个100*2*3的随机矩阵。</li>
  <li>根据所需要的不同实验中不同的点数对实验结果进行取样。继续上面的举例，我们就在第一个试验的结果（如果结果存在矩阵 <code>a</code> 中，那么实验一的结果也就是 <code>a(:,:,1)</code>）中只使用第一组数据，在第二个实验的结果中只使用前10组数据，在第三个实验的结果中只使用前100组数据。</li>
  <li>通过上面的理论公式，计算得到结果，并输出。</li>
  <li>在整个过程中，使用 <code>reshape</code> 函数进行二维和三维矩阵之间的转化。</li>
</ol>

<p>程序如下：</p>

<pre><code>function y=find_pi(n)
%y=find_pi(n)
%input: n, a array for number of experiments, like [10 100 1000]
%output: y, the approximate value of pi for every experiment

%generate the matrix that will be used to sample results
sample=triu(ones(max(n),max(n)),0);
sample=sample(1:end,[n;n]);
sample=reshape(sample,max(n),2,length(n));
%generate the data matrix
total_number_exp=length(n);
maximum=max(n);
all_experiment=rand(maximum,2,total_number_exp);
%sample results
all_experiment=all_experiment.*sample;
%calculate value of pi
final_experiment=(all_experiment.*2-1);
final_result=sum(final_experiment.^2,2);
y=sum(final_result&lt;1)./reshape(n,1,1,length(n));
y=reshape(y,[1,length(y)]).*4;
</code></pre>

<p>主要用到下面几个常用函数：</p>

<ol>
  <li><code>triu(ones(n,n),0)</code>: 生成一个单位矩阵的上三角矩阵，其中 <code>n</code> 必须是一个正整数。</li>
  <li><code>reshape</code>: 根据需要将矩阵重建为与原矩阵不同维数的矩阵。</li>
  <li><code>rand</code>: 从0到1中抽取随机数生成矩阵。</li>
  <li><code>sum</code>: 求和，可以根据括号中的条件计算符合条件的点的个数。</li>
</ol>

<p>用 <code>y=find_pi([100 1 10 1000])</code> 进行四次测试，结果为 <code>[3.0800 0 3.6000 3.0800]</code>，<code>[3.3200 4.0000 3.2000 3.2240]</code>, <code>[3.3200 4.0000 3.2000 3.1640]</code> 和 <code>[3.3200 4.0000 2.8000 3.0880]</code>，运行正常，结果看起来是真确的啦。</p>

<p>存在一个问题，当运行实验点数较多的情况，比如10000次的时候，函数会卡死，但是把函数语句单独提出来使用一切正常，只是会有小卡顿，看来是我的小 MBP 内存不够了。但是问题还是很明显的，不论最小的点数是多少，都要至少产生两个以最大点数为基础的大矩阵来运算，实在是太浪费了，但是不让使用循环，浪费就浪费吧。函数已放在<a href="https://github.com/pikipity/Find-pi">我的 Github</a>，欢迎来 Fork 我，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Matlab 中如何做傅里叶变换]]></title>
    <link href="http://pikipity.github.com/blog/fft-in-matlab.html"/>
    <updated>2013-03-03T11:09:00+08:00</updated>
    <id>http://pikipity.github.com/blog/fft-in-matlab</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://matlabgeeks.com/">Matlab Geeks</a>的 <a href="http://matlabgeeks.com/tips-tutorials/how-to-do-a-fourier-transform-in-matlab/">“How to Do a Fourier Transform in Matlab”</a>。</p>

<p>傅里叶变换是一个在很多科学和工程领域都非常有用的数学工具。傅里叶变换在信号处理、物理、通信、地质学、天文学、光学等很多领域都有应用。这个技术将一个函数或是一组数据从时域或是取样域变换到频域。这意味着，傅里叶变换可以展示一组时间序列数据的频率分量。离散傅里叶变换是将取样域的离散数据转化到频域。快速傅里叶变换是一种高效进行离散傅里叶变换的方法，并且存在很多种方法来完成快速傅里叶变换。Matlab 使用快速傅里叶变换来得到离散数据的频域分量</p>

<p>下面是一个在 Matlab 中如何用快速傅里叶变换来分析音频文件的例子。这个例子中的文件是记录在 note A4 （怎么翻译？不会啊）上的音叉录音。这个展示了傅里叶变换如何进行和如何在 Matlab 中使用这项技术。</p>

<pre><code>%Fourier Transform of Sound File

%Load File
file = 'C:\MATLAB7\work\tuning_fork_A4';
[y,Fs,bits] = wavread(file);

Nsamps = length(y);
t = (1/Fs)*(1:Nsamps)          %Prepare time data for plot

%Do Fourier Transform
y_fft = abs(fft(y));            %Retain Magnitude
y_fft = y_fft(1:Nsamps/2);      %Discard Half of Points
f = Fs*(0:Nsamps/2-1)/Nsamps;   %Prepare freq data for plot

%Plot Sound File in Time Domain
figure
plot(t, y)
xlabel('Time (s)')
ylabel('Amplitude')
title('Tuning Fork A4 in Time Domain')

%Plot Sound File in Frequency Domain
figure
plot(f, y_fft)
xlim([0 1000])
xlabel('Frequency (Hz)')
ylabel('Amplitude')
title('Frequency Response of Tuning Fork A4')
</code></pre>

<p>音频文件 <a href="http://matlabgeeks.com/wp-content/uploads/2010/12/tuning_fork_A4.wav">“tuning_fork_A4”</a> 用 wavread 函数打开，这个函数返回文件的采样数据 “y”、采样频率 “Fs” 和 A/D 转换器使用的比特数 “bits”。注意，文件的扩展名 “.wav” 不需要在使用函数的时候特别指定。就像下面将会展示的，采样频率在重建数据的时候非常重要。</p>

<p>快速傅里叶变换用 “fft” 函数执行。Matlab 没有 “dft” 函数因为快速傅里叶变换实际上就是计算的离散傅里叶变换。尽管快速傅里叶变换的角度在很多应用中非常中央，但是只有快速傅里叶变换的大小被保存了。“fft” 函数允许指定一个快速傅里叶变换的输出点数，但是在这个例子中，我们使用与输入点数一样数目的输出点数。在下一行，快速傅里叶变换的一半数据被舍弃了。为了这个例子的目的所以这样做了，但是在很多应用中，整个波谱都会用到（译者注：我认为这里舍弃一半的点是因为FFT是关于采样频率的一半对称的，所以只要看一半就可以了）。接下来的一行，将会用于横坐标的数据通过使用采样频率和时遇采样数量准备好了。这一步对于确定包含在音频文件的实际频率是很重要的。</p>

<p>接下来，原始数据在时域上被画了下来，快速傅里叶变换的数据也被画了出来。为了展示在峰值的频率上的更多详情，在这个画中，x轴被限定在了 [0,1000] 的范围中。注意，在大约440Hz处，频率响应有一个峰值，这个就是 “note A4” 的频率。在其他频率也有一些很小东西，这些估计是音叉了。对于其他乐器比如吉他，在频率响应的峰值的整数倍上都可以看见谐波。</p>

<p><img src="http://matlabgeeks.com/wp-content/uploads/2010/12/tunforktime.jpg" width="550pt" /></p>

<p><img src="http://matlabgeeks.com/wp-content/uploads/2010/12/tunforkfreq.jpg" width="550pt" /></p>

<p>傅里叶变换在很多不同的领域都是很有用的工具。二维的傅里叶变换也常常用在图像上。尝试一下上面的代码，看看你能不能得到一样的结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab 小技巧：通过 sendmail 来发送信息]]></title>
    <link href="http://pikipity.github.com/blog/sending-message-with-sendmail.html"/>
    <updated>2013-02-28T23:01:00+08:00</updated>
    <id>http://pikipity.github.com/blog/sending-message-with-sendmail</id>
    <content type="html"><![CDATA[<p>翻译自 <a href="http://matlabgeeks.com/">“Matlab Geeks”</a> 的 <a href="http://matlabgeeks.com/tips-tutorials/sending-messages-with-sendmail/">“Sending messages with sendmail”</a>。</p>

<p>当你运行一段很长的代码的时候，坐在电脑前面看着程序运行是一件非常痛苦的事情。我发现，有时候，如果我不知道这段很长的代码要运行多长时间，或是有错误返回的时候我就会这样做（我还是坐在电脑前面因为我喜欢看猫的 gif 动画和学校破旧的屏幕吧，谁知道呢……）。但是你不需要这样做。当你的电脑正在“突突”运行的时候，离开去做其他事情吧。通过一个很有用的命令 “sendmail”，你就可以通过一些简单的命令发送信息到你的邮箱或是手机上了。通过这篇博文，我会分享几个简单的我通常用来提醒自己程序运行结束或是有错误的 .m 文件。</p>

<p>首先，“sendmail” 需要4个参数：收件人联系信息、email的主题、email的信息和附件。例如，如果你想发送一个email到我们的邮箱 “support@matlabgeeks.com”，这里展示了你应如何做：</p>

<pre><code>&gt;&gt; sendmail('support@matlabgeeks.com','Hello',...
'Thanks for the awesome email information!');
</code></pre>

<p>不幸的是，“sendmail” 不是这么简单，这样仅仅会返回一个错误，除非你已经设置了你用来发送的 email 地址和你是用的 SMTP 服务器。</p>

<pre><code>&gt;&gt; setpref('Internet','SMTP_Server','mail.__.com');
&gt;&gt; setpref('Internet','E_mail','myID@__.com');
% and/or 
&gt;&gt; setpref('Internet','SMTP_Username','myID@__.com');
</code></pre>

<p>并且，如果你的服务器需要，你还必须加入你的账户密码。把你的密码放入明文中会使安全性很脆弱，要小心。</p>

<pre><code>&gt;&gt;setpref('Internet','SMTP_Password',password);
</code></pre>

<p>现在，你可以发送邮件了！或者，如果你想发送一条短信的话，可以通过修改 “sendmail” 中收件人的部分来实现这个。例如，如果你想发送一条信息到你的 verizon 手机上，你可以用下面的命令：</p>

<pre><code>&gt;&gt; sendmail('55555555555@vtext.com','Hello',...
'What's going on tonight?');
</code></pre>

<p>信息可以发送到的手机号码的列表可以在 <a href="http://sms411.net/how-to-send-email-to-a-phone/">“Mr. Tweney’s page”</a> 中找到。</p>

<p>“sendmail” 一个非常好的用处就是当你的程序运行完之后发送信息给你。我已经<a href="http://matlabgeeks.com/wp-content/uploads/2013/02/sendmail_code.zip">附加</a>了一些描述如何做的文件到这篇博文上。正如你将会看到的，我已经封装了一个 try catch 循环在程序中，所以任何错误都会发送 email 给我。比如，尝试用 <code>a=5;</code>、<code>b=[2 3]</code> 或者 <code>b=2</code> 来运行 function</p>

<pre><code>function sample_script(a, b)
% sample error and completion file
% what time is it?
date_time = datestr(now);
% try to do some type of command
try C = [a; b];   
   % if it works, return the time it finished
   disp(C);
	e_mail('support@matlabgeeks.com','matlabgeeks','vlugade',PASSWD,...
   	'Completed',['At : ',date_time]);
catch err
   % find the error type
   errStr = err.identifier;
   	e_mail('support@matlabgeeks.com','gmail','vlugade',PASSWD,...
   	'Completed',{['At : ',date_time], ['With error : ', errStr]});
end
</code></pre>

<p>你也肯定注意到了，我使用 “e-mail” 这个 function 来发送我的信息。这个 “e-mail.m” 文件已经附加在了这里。总的来说，它和你可以在 “Mathworks” 上找到的非常像，但是可以更方便的修改成你要用的。参数和 “sendmail” 稍微有点不一样，它需要在 email 内容之前提供收件人地址、SMTP 地址、用户名和密码。我们已经尽可能多的提供了 gmail、yahoo 和 matlabgeeks 的设置，但是你的设置有可能不一样。需要注意的是，你不需要为了让 function 工作而用明文保存你的密码，而是最好以一个变量的形式传递它。</p>

<p>再次提供一次<a href="http://matlabgeeks.com/wp-content/uploads/2013/02/sendmail_code.zip">附件</a></p>
]]></content>
  </entry>
  
</feed>
