<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[categories: Matlab | 折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/blog/categories/matlab/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matlab 编写“生命游戏”]]></title>
    <link href="http://pikipity.github.com/blog/the-game-of-life.html"/>
    <updated>2013-07-26T19:46:00+08:00</updated>
    <id>http://pikipity.github.com/blog/the-game-of-life</id>
    <content type="html"><![CDATA[<p>生命游戏就是指英国数学家约翰·何顿·康威在1970年发明的细胞自动机。一个平面二维世界被划分为了多个小格子，每个小格子都住着一个细胞，其存在两种状态：生或死（不是薛定谔他家养的猫的细胞，放心，没有中间状态，否则用什么算法？神经网络？）。我们可以为这个世界规定某种规则，然后观看这个世界是如何继续发展的（就是体验上帝啦）。最初，约翰·何顿·康威设定了三个法则：</p>

<ul>
  <li>当一个细胞周围的八个位置中有3个细胞时，该位置产生细胞；</li>
  <li>当周围有2个细胞时，该位置维持原样；</li>
  <li>其他情况，该位置变为无细胞。</li>
</ul>

<p>然后，世界开始根据这三个法则依据最初细胞摆放数量和位置的不同演变出了各种各样有趣的图案，比如下面这个，这三条看似简单的规律其实蕴含着许许多多的推论，有兴趣的可以看看<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">日文的wiki</a>介绍，详细程度超乎想象。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif" alt="机枪制造“滑翔机”" /></p>

<p>在实验室看论文实在无聊，于是用 Matlab 编写了个生命游戏的小程序，切身地体会到了 Matlab 是一个多么效率低下的语言啊。</p>

<p>PS：程序中存在大量 for 循环，严重影响程序运行质量，我觉得还可以抢救一下，元芳你怎么看？</p>

<p>忘了，程序在我的 Github 里面，传送门在<a href="https://github.com/pikipity/The-game-of-life-by-using-MATLAB.git">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[银行机按键声音]]></title>
    <link href="http://pikipity.github.com/blog/yin-xing-ji-an-jian-sheng-yin.html"/>
    <updated>2013-07-23T08:40:00+08:00</updated>
    <id>http://pikipity.github.com/blog/yin-xing-ji-an-jian-sheng-yin</id>
    <content type="html"><![CDATA[<p>这件事的起因是和女朋友争辩银行机的按键声音是否一样，我认为，既然电话的声音都是由两个频率决定，每个按键声音不一样来提示用户按对按键，那么银行机也应该是这样了，而女朋友认为银行机按键为了保密所有按键应该是一样的，争辩不出结果于是决定做实验，于是跑到东亚9楼的ATM取款机用手机录制了下面的4段音频（没找到提供音乐外链的网网站，只能压缩之后用“百度盘”了）：</p>

<p><a href="http://pan.baidu.com/share/link?shareid=2248957344&amp;uk=4080321956">录制的音频文件和处理得到的音频时域和频域图像</a></p>

<p>好，现在开始处理。我认为只要能用 Matlab 对按键声音做 FFT，看按键声音频率是否一样就可以了。拿其中的一段音频做例子，我是这样处理的。</p>

<ol>
  <li>原始音频文件竟然是<code>flac</code>格式的，无法导入 MATLAB，于是先将其用音频转换软件转换为了<code>wma</code>格式。（我用的是 <a href="http://tmkk.undo.jp/xld/index_e.html">XLD</a> 这个软件）</li>
  <li>
    <p>将音频导入 MATLAB，画出原始音频图像：</p>

    <p><img src="https://lh6.googleusercontent.com/-WeOvo4LWCGI/Ue3Ux1O1z-I/AAAAAAAAA40/RPMbZolJC_8/s559/1.jpg" alt="原始音频" /></p>
  </li>
  <li>
    <p>发现噪音还是比较明显的，于是用小波分析的函数<code>wden</code>去了一下噪，命令如下：</p>

    <pre><code>xd=wden(x,'sqtwolog','s','mln',8,'db5');
</code></pre>

    <p>然后得到了下面的图像，并选取了两个时间点，准备截取一段按键声音做 FFT。</p>

    <p><img src="https://lh3.googleusercontent.com/-rAYyay2qD3Q/Ue3Ux9tem9I/AAAAAAAAA48/CKNe_SHv8WY/s559/2.jpg" alt="去噪之后的图像" /></p>
  </li>
  <li>
    <p>根据上面选取的时间点截取了一段按键声音后，对其做了一下 FFT（用我自己写的函数，比较方便，直接画出图像）。</p>

    <pre><code>fft_plot(xd,fs,'plot');
</code></pre>

    <p>函数贴在这里：</p>

    <pre><code>function [ frequency,fft_result ] = fft_plot( data,Fs,varargin )
 % Calculate or plot directly fft results of data.
 %
 % [ frequency,fft_result ] = fft_plot( data,Fs,'plot' )
 %
 % inputs:
 %   (1) data: data used to analysis
 %   (2) Fs: sample frequency
 %   (3) 'plot': veriable input. if there is not this input, fft results will be
 %   ploted
 % output:
 %   (1) freqeuncy: frequency corresponding to the fft results
 %   (2) fft_result: fft results
	
 if nargin&lt;2
     error('data and Fs must be given');
 elseif nargin==2
     size_data=size(data);
     if size_data(1)~=1 &amp;&amp; size_data(2)~=1
         error('the length or the number of rows must be one.');
     end
     L=length(data);
     NFFT=2^nextpow2(L);
     fft_result=fft(data,NFFT);
     frequency=Fs/2*linspace(0,1,NFFT/2+1);
 elseif nargin==3
         if strcmp(varargin,'plot')
              size_data=size(data);
             if size_data(1)~=1 &amp;&amp; size_data(2)~=1
                 error('the length or the number of rows must be one.');
             end
             L=length(data);
             NFFT=2^nextpow2(L);
             fft_result=fft(data,NFFT);
             frequency=Fs/2*linspace(0,1,NFFT/2+1);
             figure;
             plot(frequency,abs(fft_result(1:NFFT/2+1)));
             title('FFT')
             xlabel('Frequency')
             ylabel('FFT results')
         else
             error('variable input must be ''plot''');
         end
 elseif nargin&gt;=3
     error('Too much inputs')
 end
 end
</code></pre>

    <p>调整了一下，频率范围，得到了这样的频域图：</p>

    <p><img src="https://lh4.googleusercontent.com/-diX6ehStf1o/Ue3UyPdKbCI/AAAAAAAAA5E/iSQUMnsy-NQ/s559/3.jpg" alt="频域图" /></p>

    <p>很明显，大约在 511.4Hz，只有一个频率。看来是我错了，但是还有三段音频那，一起处理了吧。</p>

    <p><img src="https://lh3.googleusercontent.com/-HYlrs_X6TAg/Ue3UybQgpGI/AAAAAAAAA5M/kpmInMrs-ss/s559/4.jpg" alt="竟然一模一样！！" /></p>

    <p><img src="https://lh4.googleusercontent.com/-UAGj7_avc5g/Ue3UynLshpI/AAAAAAAAA5Q/J-6BKsI4m5g/s559/5.jpg" alt="那个小的是什么？看大小可以忽略了。。" /></p>

    <p>好像还有一段音频忘处理了，算了吧，结论很明显了。</p>
  </li>
</ol>

<p>经过上面的测试，很明显是我错了，ATM机按键声音都是一样的。之后又去 Google 上搜索了一下，看到了这些，囧。</p>

<p><img src="https://lh3.googleusercontent.com/-J9-IpVrgM_g/Ue3anj5bDuI/AAAAAAAAA5g/RfH87ke-HCs/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-23%2520%25E4%25B8%258A%25E5%258D%25889.18.51.png" alt="Google 上搜索相关信息。。。第一条是怎么回事？淘宝？" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB 函数中的可选参数]]></title>
    <link href="http://pikipity.github.com/blog/varible-input-matlab.html"/>
    <updated>2013-07-20T19:34:00+08:00</updated>
    <id>http://pikipity.github.com/blog/varible-input-matlab</id>
    <content type="html"><![CDATA[<p>在编写函数的时候，有些输入的参数可输入也可不输入，或是有些输出的结果可输出也可不输出，这个时候就要用到<code>varargin</code>、<code>nargin</code>、<code>nargout</code>和<code>varargout</code>了。</p>

<ul>
  <li>
    <p><code>nargin</code>返回的是使用函数的时候输入变量的个数，<code>nargout</code>返回的是使用函数的时候输出结果的个数。</p>
  </li>
  <li>
    <p><code>varargin</code>放在输入参数的位置，可以接受任意个参数，变量类型始终为<code>cell</code>。<code>varargout</code>放在输出结果的位置，和<code>varargin</code>一样，可以输出任意个结果，变量类型始终为<code>cell</code>。</p>
  </li>
</ul>

<p>比如，现在想要写一个函数，函数输入为波长、数据，实际默认或可选参数为频率 f 和 采样频率 Fs，那么函数有两种写法：</p>

<ol>
  <li>
    <p><code>varargin</code>和<code>nargin</code>混合使用：</p>

    <pre><code> function [tau varargout] = wzjmtGetTau(wavelength, data, varargin)
     Fs = 1;
     f = 6378;
     if nargin &gt; 4
         Fs = varargin{2};
     end
     if nargin &gt; 3
         f = varargin{1};
     end
     计算过程...
     tau = t;
     if nargout &gt; 1
         varargout{1}=exp(-tau);
     end
 end
</code></pre>
  </li>
  <li>
    <p>只用<code>nargin</code>：</p>

    <pre><code> function [tau varargout] = wzjmtGetTau(wavelength, data, f, Fs)
     if nargin &lt; 4 
         Fs = 1; 
     end
     if nargin &lt; 5 
         f = 6378; 
     end
     计算过程...
     tau = t;
     if nargout &gt; 1
         varargout{1}=exp(-tau);
     end
 end
</code></pre>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matlab 中符号、数值、字符串间的转换指令]]></title>
    <link href="http://pikipity.github.com/blog/matlab-vairable-type-change.html"/>
    <updated>2013-07-19T20:07:00+08:00</updated>
    <id>http://pikipity.github.com/blog/matlab-vairable-type-change</id>
    <content type="html"><![CDATA[<p>有了这张图，再也不用担心各种奇怪变量类型之间的转换了。</p>

<p><img src="https://lh6.googleusercontent.com/-8LX9XAkBmW8/Uekr5IEcNUI/AAAAAAAAA4g/581Spt_RaYw/s720/20100714070637864.png" alt="Matlab 中符号、数值、字符串间的转换指令" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过几何概型来估算&pi;]]></title>
    <link href="http://pikipity.github.com/blog/find-pi.html"/>
    <updated>2013-03-28T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/find-pi</id>
    <content type="html"><![CDATA[<p><img src="/images/post/find_pi.jpg" alt="几何概型估算&pi;" width="550pt" /></p>

<p>被涛神要求帮着写了一个通过模拟几何概型实验来估算 π 的 Matlab 函数。这个几何概型的实验是这样的：在一个二维直角坐标系中，存在一个以原点为中心，以1为半径的圆，和一个以原点为中心，边长为2的正方形（如图），向圆中随机投放点，计算此点在圆内的概率（忽略边线）我们可以得到如下公式，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{array}{rcl}
P&=&\frac{S_{circle}}{S_{square}}\\
&=&\frac{\pi r^2}{\left( 2r\right)^2}\\
&=&\frac{\pi}{4}
\end{array} %]]&gt;</script>

<p>所以我们只要将上面得到的概率乘以4，就可以估算出 π 的值。很明显，既然是概率实验，那么存在一次试验中使用点的个数问题，使用的点越多，理论上得到的 π 的值应该越接近真实值。</p>

<p>涛神希望这个函数实现下面几点要求：</p>

<ol>
  <li>可以一次性通过一个矩阵输入多次实验，每次实验中使用的点数不一样。</li>
  <li>将多次实验所得到的 π 的值放在一个矩阵里进行输出。</li>
  <li>使用 <code>rand</code> 函数。</li>
  <li>不使用循环。</li>
</ol>

<p>由于 <code>rand</code> 的函数无法一次性产生多个二维随机数矩阵，又由于不能使用循环，使得这个函数的编写比较麻烦（吐槽一下，即使可以产生多个二维随机数矩阵我也没法进行后续操作啊！！）。于是我的想法如下：</p>

<ol>
  <li>根据最大的点数，用 <code>rand</code> 函数产生一个三维矩阵，前两个维度分别表示每个点的横纵坐标，最后一个维度表示第几次实验。例如，如果进行三次试验，每次试验的实验点数为1，10，100，那么就用 <code>rand</code> 生成一个100*2*3的随机矩阵。</li>
  <li>根据所需要的不同实验中不同的点数对实验结果进行取样。继续上面的举例，我们就在第一个试验的结果（如果结果存在矩阵 <code>a</code> 中，那么实验一的结果也就是 <code>a(:,:,1)</code>）中只使用第一组数据，在第二个实验的结果中只使用前10组数据，在第三个实验的结果中只使用前100组数据。</li>
  <li>通过上面的理论公式，计算得到结果，并输出。</li>
  <li>在整个过程中，使用 <code>reshape</code> 函数进行二维和三维矩阵之间的转化。</li>
</ol>

<p>程序如下：</p>

<pre><code>function y=find_pi(n)
%y=find_pi(n)
%input: n, a array for number of experiments, like [10 100 1000]
%output: y, the approximate value of pi for every experiment

%generate the matrix that will be used to sample results
sample=triu(ones(max(n),max(n)),0);
sample=sample(1:end,[n;n]);
sample=reshape(sample,max(n),2,length(n));
%generate the data matrix
total_number_exp=length(n);
maximum=max(n);
all_experiment=rand(maximum,2,total_number_exp);
%sample results
all_experiment=all_experiment.*sample;
%calculate value of pi
final_experiment=(all_experiment.*2-1);
final_result=sum(final_experiment.^2,2);
y=sum(final_result&lt;1)./reshape(n,1,1,length(n));
y=reshape(y,[1,length(y)]).*4;
</code></pre>

<p>主要用到下面几个常用函数：</p>

<ol>
  <li><code>triu(ones(n,n),0)</code>: 生成一个单位矩阵的上三角矩阵，其中 <code>n</code> 必须是一个正整数。</li>
  <li><code>reshape</code>: 根据需要将矩阵重建为与原矩阵不同维数的矩阵。</li>
  <li><code>rand</code>: 从0到1中抽取随机数生成矩阵。</li>
  <li><code>sum</code>: 求和，可以根据括号中的条件计算符合条件的点的个数。</li>
</ol>

<p>用 <code>y=find_pi([100 1 10 1000])</code> 进行四次测试，结果为 <code>[3.0800 0 3.6000 3.0800]</code>，<code>[3.3200 4.0000 3.2000 3.2240]</code>, <code>[3.3200 4.0000 3.2000 3.1640]</code> 和 <code>[3.3200 4.0000 2.8000 3.0880]</code>，运行正常，结果看起来是真确的啦。</p>

<p>存在一个问题，当运行实验点数较多的情况，比如10000次的时候，函数会卡死，但是把函数语句单独提出来使用一切正常，只是会有小卡顿，看来是我的小 MBP 内存不够了。但是问题还是很明显的，不论最小的点数是多少，都要至少产生两个以最大点数为基础的大矩阵来运算，实在是太浪费了，但是不让使用循环，浪费就浪费吧。函数已放在<a href="https://github.com/pikipity/Find-pi">我的 Github</a>，欢迎来 Fork 我，谢谢。</p>
]]></content>
  </entry>
  
</feed>
