<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Little Mr. (processing)]]></title>
    <link href="http://pikipity.github.io/blog/little-mr.html"/>
    <updated>2014-01-25T11:53:00+08:00</updated>
    <id>http://pikipity.github.io/blog/little-mr</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-4rtsj4SZzO8/UuM2hEEYOSI/AAAAAAAABcw/mQbtyYFSs2E/s650/58b1OOOPIC1a.jpg" alt="新年快乐" /></p>

<p>现在拜年有点早，但是到新年那天可能就没有时间发东西了，先拜个早年了。</p>

<p><img src="https://lh6.googleusercontent.com/-HbH2WbH4u_Y/UuCKi-omRgI/AAAAAAAABcc/fLa4WUNNEuM/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202014-01-23%2520%25E4%25B8%258A%25E5%258D%258811.13.14.png" alt="Little Mr." /></p>

<p>这次用 processing 做了个小东西，我管它叫 “Little Mr.”，能跑能说话，现在只能进行几个简单的问答，允许用户自己输入问答配对。反正东西暂时做成这样了，后续还会加点小功能吧。想做个桌面宠物，但是到现在都不知道如何入手。。。更详细的介绍和使用说明去看<a href="https://github.com/pikipity/Little_Mr.git">我的 Github </a>吧。下面是一段演示视频：</p>

<iframe height="510" width="489" src="http://player.youku.com/embed/XNjY1NzYyMzAw" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇奇怪怪的机器人]]></title>
    <link href="http://pikipity.github.io/blog/robot-youtube1.html"/>
    <updated>2014-01-19T16:02:00+08:00</updated>
    <id>http://pikipity.github.io/blog/robot-youtube1</id>
    <content type="html"><![CDATA[<p>在 Youtube 上看到几个机器人的视频，觉得这几个机器人挺特别，就搬运到了优酷上。视频放在这里，有兴趣的可以点开看一看。（顺便一提，今天改进了一下前几天写的<a href="http://pikipity.github.io/">“兰顿蚂蚁”的程序</a>，可以在支持色彩的终端上用色块代替字符，也就这样了，兰顿蚂蚁画出来的东西真是乱起八糟啊。。。o(╯□╰)o）</p>

<!--more-->

<h3 id="section">蜘蛛机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg1MzQ0" frameborder="0" allowfullscreen=""></iframe>

<h3 id="section-1">自组装蛇形机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg3NjY4" frameborder="0" allowfullscreen=""></iframe>

<h3 id="section-2">气球机器人（超漂亮）</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg2NzA4" frameborder="0" allowfullscreen=""></iframe>

<h3 id="morphex-">MorpHex 机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg2MDU2" frameborder="0" allowfullscreen=""></iframe>

<h3 id="section-3">蜻蜓机器人</h3>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg1NjAw" frameborder="0" allowfullscreen=""></iframe>

<h3 id="carleton-university-">Carleton University 机器人课</h3>

<p>人家机器人课玩乐高！！我们还在苦逼的用 Matlab 仿真。%&gt;_&lt;%</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg4MDky" frameborder="0" allowfullscreen=""></iframe>

<h3 id="pololu-3pi-">Pololu 3pi 机器人</h3>

<p>这个机器人超好玩，小巧又可以自己 DIY，土豪们可以考虑入手啊。<a href="http://www.pololu.com/product/975">官网销售</a></p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyMjg3MDY0" frameborder="0" allowfullscreen=""></iframe>

<h3 id="parrot-minidrone-and-parrot-jumping-sumo">Parrot MiniDrone and Parrot Jumping Sumo</h3>

<p>这两个机器人最近很火（官网新闻 <a href="http://blog.parrot.com/2014/01/07/parrot-minidrone/">Parrot MiniDrone</a> 和 <a href="http://blog.parrot.com/2014/01/07/parrot-jumping-sumo/">Parrot Jumping Sumo</a>），但一样是土豪的玩具。%&gt;_&lt;%</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3OTcyMjA0" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[兰顿蚂蚁（Ncurses）]]></title>
    <link href="http://pikipity.github.io/blog/langton-ant.html"/>
    <updated>2014-01-17T09:38:00+08:00</updated>
    <id>http://pikipity.github.io/blog/langton-ant</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-y22D4cBCYE4/UtiMAcZme4I/AAAAAAAABb0/3pzCr03dDQc/s353/LangtonsAntAnimated.gif" alt="兰顿蚂蚁规则演示" /></p>

<p>“生命游戏”已经快被玩坏了，但是“兰顿蚂蚁”貌似很少有人做，可能是因为变化没有那么多，看起来不是那么有意思吧。</p>

<p>“兰顿蚂蚁”也是细胞自动机的一种案例，在一个只有黑白两种方格的世界里，兰顿规定了一种蚂蚁的行动方式：</p>

<ul>
  <li>如果蚂蚁当前在黑格，那么右转90度，将此格变为白色，前进一步；</li>
  <li>如果蚂蚁当前在白格，那么左转90度，将此格变为黑色，前进一步。</li>
</ul>

<p>我用 Ncurses 写了一个一只蚂蚁的程序，黑格用“#”表示，白格什么也没有（或者说是空格），蚂蚁根据朝向不同，字母也不同，朝上是“U”，朝下是“D”，朝左是“L”，朝右是“R”。程序可以到<a href="https://github.com/pikipity/Langton_ant.git">我的 Github 下载</a></p>

<p>下面是此程序的一段演示视频：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjYyNjI0NjEy" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lytro Camera -- 光场相机]]></title>
    <link href="http://pikipity.github.io/blog/light-field-camera.html"/>
    <updated>2014-01-04T08:35:00+08:00</updated>
    <id>http://pikipity.github.io/blog/light-field-camera</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-v_sSVgUCrLk/UsdaMN5vqPI/AAAAAAAABbM/AZxnmd6vAtE/s576/Lytro.jpg" alt="Lytro Camera" /></p>

<p><a href="http://en.wikipedia.org/wiki/Light-field_camera">光场相机</a>自从1908年第一次提出之后，就一直是雷声大雨点小。2011年 Lytro 公司发布了<a href="https://www.lytro.com/camera/#software-3d">上图这款消费级的光场相机</a>，受到各方面的关注之后就慢慢淡出人们的视野了。</p>

<p>这里有一段视频，来简单介绍一下光场相机：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3MDY4ODA0" frameborder="0" allowfullscreen=""></iframe>

<p>另外一个视频简单介绍了光场相机拍摄出来的相片的优点：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjU3MTM2Mjg0" frameborder="0" allowfullscreen=""></iframe>

<p>这款产品做的相当不错，包括了相关的处理软件，并可以和社交网站连接直接上传照片，官方也有一个<a href="https://pictures.lytro.com/">让用户展示照片的平台</a>。虽然价格貌似贵了一些，但是和那些高级单反相机相比，还是没有什么的吧。下面是一个 Lytro 相机拍摄的照片分享（鼠标点击图片就可以重新对焦，鼠标拖动可以改变视角）</p>

<iframe width="400" height="415" src="http://pictures.lytro.com/lytroweb/pictures/431172/embed" frameborder="0" allowfullscreen="" scrolling="no"></iframe>

<p>我认为之所以光场相机现在叫好不叫座，主要还是由于人们的使用习惯难以改变。大多人已经习惯了先对焦再拍照的习惯，这种先拍照后对焦的方式无疑是要改变大多数人的认知的。或许在未来，每个人手上的相机，甚至是手机上的相机，都是光场相机。但是现在，要让大众迅速接受这样一种从外观到使用都超乎想象的“东西”，还是非常困难的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[40行代码大赛 -- Cocoa China]]></title>
    <link href="http://pikipity.github.io/blog/40-line-code-award.html"/>
    <updated>2014-01-03T09:15:00+08:00</updated>
    <id>http://pikipity.github.io/blog/40-line-code-award</id>
    <content type="html"><![CDATA[<p>在2013年的最后四天里，<a href="http://www.cocoachina.com/bbs/thread.php?fid=6&amp;page=1">Cocoa China 论坛</a>举行了一个<a href="http://www.cocoachina.com/bbs/read.php?tid=175903&amp;page=1">“40行代码大赛”</a>，看谁可以使用不超过40行的代码就写出提现 Geek 精神的原创程序，语言不限，objective-C 最好。</p>

<p>虽然已经结束了，但是参赛作品的质量都不容小觑，很值得学习。下面是我看到的很有创意的几个作品：</p>

<ol>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=177830">用shader实现的生命游戏</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=175964">用二分法查找算法+递归对数组快速匹配单词（外加模糊查找，不连续关键词查找）</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=177832">代码片段：不加载图片，实现世界地图的显示和旋转</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=177219">一键打包</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=176148">用十种语言说“我爱你” (IOS7)</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=177222&amp;fpage=2">不使用一张图片，实现漂亮的霓虹灯特效</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=177183&amp;fpage=2">输入的时候自动对银行账号进行格式化</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=176160&amp;fpage=2">根据分辨率缩放并旋转图片。最重要的是，消除图片白边</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=176055&amp;fpage=2">一弧形展示代碼片段</a></li>
  <li><a href="http://www.cocoachina.com/bbs/read.php?tid=176052&amp;fpage=3">圣诞动画</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符雨效果 -- ncurses]]></title>
    <link href="http://pikipity.github.io/blog/character-rain-ncurse.html"/>
    <updated>2013-12-27T16:42:00+08:00</updated>
    <id>http://pikipity.github.io/blog/character-rain-ncurse</id>
    <content type="html"><![CDATA[<p>今天突然想到可以用 ncurses 实现一下《黑客帝国》中字符雨的效果，应该会很好看，顺便复习一下早已丢掉的 C++。代码很简单，可以到<a href="https://github.com/pikipity/Character_rain_the_matrix.git">这里</a>下载。</p>

<p><img src="https://lh5.googleusercontent.com/-caNd3rPWReM/Ur077_y4FwI/AAAAAAAABas/vC5-57tCXZc/s720/12%25E6%259C%2588%252027%252C%25202013%252016%253A31.gif" alt="程序效果" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好，zsh]]></title>
    <link href="http://pikipity.github.io/blog/introduction-to-zsh.html"/>
    <updated>2013-12-25T17:43:00+08:00</updated>
    <id>http://pikipity.github.io/blog/introduction-to-zsh</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-0o9D53zyzsc/Urqxkk8sX8I/AAAAAAAABaM/NUvbaYHXQWA/s337/oh-my-zsh-logo.png" alt="on-my-zsh" /></p>

<p>随着直接使用 shell 的次数增多，越来越感觉 bash shell 各种意义上的不方便：没有自动补全，输入错误指令不能自动校正等等。于是开始寻找一个用起来比较方便快捷的新 shell。在寻找的过程中发现了 zsh。</p>

<p>我没有尝试原版的 zsh（官方网站在<a href="http://www.zsh.org/">这里</a>）。而是直接根据大多数人的推荐，安装了 oh-my-zsh（Github 项目主页在<a href="https://github.com/robbyrussell/oh-my-zsh.git">这里</a>）。用过之后，我就再也不想碰 bash 了。如果你仅仅想知道它和 bash 相比，有什么好处，请移步到<a href="http://www.quora.com/What-are-the-advantages-and-disadvantages-of-using-zsh-instead-of-bash-or-other-shells">这里</a>看看吧，大家说好的东西才是真的好 :-D 。这里我只说说在我眼中 zsh 的好处：</p>

<ol>
  <li>bash 能做的它都能做，而且在 bash 里怎么做，在 zsh 里就怎么做，可以说学习代价降到了最低。</li>
  <li>
    <p>超级好用的自动补全，命令及命令参数不再需要打完整了，打一半，然后 Tab 键，所有可选信息就展示出来，用 Tab 键选择，然后回车输入就可以了，简直方便快捷。尤其是输入路径的时候，再也不用 ls 去看路径的内容了，cd + Tab 搞定一切，省心省力。</p>

    <p><img src="https://lh4.googleusercontent.com/-9L_9-Fr5U4o/UrqxkmsrcXI/AAAAAAAABaI/BEJ-MS1QJUk/s599/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-12-25%2520%25E4%25B8%258B%25E5%258D%25886.05.50.png" alt="自动补全" /></p>
  </li>
  <li>
    <p>自动纠错功能非常好用，再也不用每条命令都明明白白的记住了，记个大概，剩下的交给 zsh 自动纠错了。</p>

    <p><img src="https://lh5.googleusercontent.com/-wqtEVfxhZNg/UrqxlPka2cI/AAAAAAAABaY/3hKt9aOAR5Y/s353/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-12-25%2520%25E4%25B8%258B%25E5%258D%25886.09.05.png" alt="自动纠错" /></p>
  </li>
  <li>
    <p>oh-my-zsh 提供多种多样的主题，无论怎么样，总有一款适合你。如果全都不合适，也可以自己定制。主题（主题库在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">这里</a>）也不是简简单单改改颜色那么简单欧！！主题配合 oh-my-zsh 自带的 git 插件一起使用，让 git 的使用更加方便快捷！！</p>

    <p><img src="https://lh3.googleusercontent.com/-jyeEtbcDv8k/Urqxkj5eWUI/AAAAAAAABaQ/-CxipTrdNuo/s538/theme-oh-my-zsh.png" alt="一种 oh-my-zsh 的主题" /></p>
  </li>
</ol>

<p>在 Mac 下，推荐将 zsh 与 iTerm（在<a href="http://iterm.sourceforge.net/index.shtml">这里</a>下载）配合使用，增加更多的可定制功能，尤其是输入快捷键，将常用指令与快捷键结合之后，现在完全不用记命令了 ~\(≧▽≦)/~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[脑电波控制 iphone 拍摄感兴趣的东西（Youtube）]]></title>
    <link href="http://pikipity.github.io/blog/brain-wave-iphone-camera.html"/>
    <updated>2013-12-14T20:38:00+08:00</updated>
    <id>http://pikipity.github.io/blog/brain-wave-iphone-camera</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="http://pikipity.github.io//www.youtube.com/embed/W67LvAYAkY4?rel=0" frameborder="0" allowfullscreen=""></iframe>

<p>更多可以到<a href="http://neurowear.com/projects_detail/neurocam.html">官网</a>看看。这个网站还有很多将脑电与手机应用结合的 project。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打砖块更新]]></title>
    <link href="http://pikipity.github.io/blog/breakout-clone-v2.html"/>
    <updated>2013-12-14T14:51:00+08:00</updated>
    <id>http://pikipity.github.io/blog/breakout-clone-v2</id>
    <content type="html"><![CDATA[<p>第一次发布在<a href="http://pikipity.github.io/blog/breakout-8051.html">这里</a>，此次更新：</p>

<ol>
  <li>更改了碰撞后消失砖块的大小。</li>
  <li>在两个单片机之间加了两条同步线来使画面和声音更加同步。</li>
  <li>
    <p>可以手动调整挡板移动方式，共两种移动方式：</p>

    <ul>
      <li>按键按下移动，不按不移动 (Not smooth)</li>
      <li>按键指定方向，挡板自动移动 (Smooth)</li>
    </ul>
  </li>
</ol>

<p>更新后的视频演示：</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjQ4MDQ2ODM2" frameborder="0" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yaskawa 3D 模型再更新]]></title>
    <link href="http://pikipity.github.io/blog/update-yaskawa-3d.html"/>
    <updated>2013-12-07T20:44:00+08:00</updated>
    <id>http://pikipity.github.io/blog/update-yaskawa-3d</id>
    <content type="html"><![CDATA[<p>继<a href="http://pikipity.github.io/blog/improve-draw-circle-yaskawa-3d-model.html">《Yaskawa 3D 模型画圆的改进》</a>更新后，再次进行连续更新，这次终于搞定了录像部分了，本想让保存 frame 的矩阵在各个函数之间传递，但是不知道为什么每次传递的时候都会发生一些不可预料的事情，不是矩阵中所有数据丢失就是部分数据混乱，最后只好是保存为 appdata 了。现在可以保存两个 demo 录像了。但是不建议对第一个 demo 使用，因为运行期间会占用大约 2G 的内存空间（因为产生的 frame 太多了）。下面就是两个 demo 程序自己抓取的视频（抓取之后生成的 avi 视频非常大，优酷压缩之后画质就渣了）。</p>

<iframe height="498" width="510" frameborder="0" src="http://player.youku.com/embed/XNjQ0OTM4NTg0" allowfullscreen=""></iframe>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjQ0OTA2NjEy" frameborder="0" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yaskawa 3D 模型画圆的改进]]></title>
    <link href="http://pikipity.github.io/blog/improve-draw-circle-yaskawa-3d-model.html"/>
    <updated>2013-12-06T10:56:00+08:00</updated>
    <id>http://pikipity.github.io/blog/improve-draw-circle-yaskawa-3d-model</id>
    <content type="html"><![CDATA[<p>在<a href="http://pikipity.github.io/blog/yaskawa-3d-matlab.html">《3D Yaskawa 机器臂演示（Matlab）》</a>中，我展示了我用 Matlab 制作的 Yaskawa 3D 模型，其中 Demo2 的画圆部分是有问题。最初考虑，如果想要匀速画圆，那么向心加速度是一定的，于是不停地在考虑，如何改进 Simulink 的 model 使其通过向心加速度来计算出相应的 x,y,z 方向上的速度，进而计算需要的角度，最终也没有想出来。最近，又重新思考了这个问题，发现自己完完全全是想多了。</p>

<p>重新定位现在遇到的问题：<strong>找出匀速圆周运动的速度在三个坐标轴上的分解量</strong>。由于我要画的圆只是在一个水平面上，z 轴的分解量是0，那么也就是：<strong>找出匀速圆周运动的速度在 x,y 两个坐标轴上的分解量</strong>。进而继续简化问题，就得到了：<strong>找出一个大小恒定的向量在 x,y 方向上的分解量</strong>。于是问题瞬间简单了，根据下图所示，</p>

<script type="math/tex; mode=display">V_x=V\sin(\alpha+\frac{\pi}{2})</script>

<script type="math/tex; mode=display">V_y=V\sin(\alpha)</script>

<p><img src="https://lh5.googleusercontent.com/-CWrkCOyy5BY/UqFBZPo_d8I/AAAAAAAABZk/_59DnDkciPw/s720/draw_circle.jpg" alt="计算 x,y 轴上速度的分量" /></p>

<p>也就是说，将之前 Simulink 中 Vx 和 Vy 换为两个 sine wave 就可以了。这么简单的问题竟然让我想了这么久。。。</p>

<p>替换之后，不仅仅运行速度大大提升，画出来的圆也更圆了。问题解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自制 Keynote IR Remote Control]]></title>
    <link href="http://pikipity.github.io/blog/diy-apple-remote-controller.html"/>
    <updated>2013-11-28T18:47:00+08:00</updated>
    <id>http://pikipity.github.io/blog/diy-apple-remote-controller</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-02eVPhz8fdE/UpcgK1x33qI/AAAAAAAABY0/SDuT9V15AK0/s400/MC377.jpeg" alt="Apple IR Remote Control" /></p>

<p>上图就是 Apple IR Remote Control，利用红外线对 iPod, Apple TV 等苹果设备进行视频播放和音乐播放等控制。对于 Macbook，可以控制 iTunes 的音乐视频播放和 Keynote 的幻灯片演示。官网价钱是港币 148 一个，如果它是蓝牙控制，这个价钱也就没什么了，但是为了一个红外线控制器，这个价钱就不是太值了。但是在使用我的 Macbook Pro 上的 Keynote 做演讲的时候，每次切换幻灯片都要跑到键盘前操作还是太麻烦了，学校网络的问题，iPhone 上的 Keynote Remote 应用不能保证百分之百的和电脑连接上，于是准备自己做一个。</p>

<p>因为手头有一个 Arduino，除了平时根据自己喜好做点小东西以外，放着也没什么大用处，所以准备用它来制作这个红外线遥控器。但是制作过程中遇到问题，由于自己买的红色 LED 灯质量不行，发射的信号始终无法被 Macbook 的红外线探测器检查到，于是放弃。</p>

<p>既然遥控器不容易做，那就使用现成的遥控器，用 Arduino 做一个红外线接收器好了。于是就有了这个项目。使用 下图的红外线遥控器（在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.33.35xCfn&amp;id=17278512079&amp;">“淘宝”</a>上买的，5 块钱一个）进行控制。Arduino 作为接收器，接收红外线信号，并解码，将解码结果通过 USB 传送给电脑，电脑上的客户端再根据解码结果，模拟电脑按键来实现对 Keynote 的控制。</p>

<p><img src="https://lh3.googleusercontent.com/-FpgQqEiGrEg/UpcIy8HMWSI/AAAAAAAABYU/Zvznasr8fTM/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252056.jpg" alt="5 块钱一个的红外线遥控器" /></p>

<p>电路图在下面，超级简单，我使用的是 VS1838B 作为红外线传感器（一样是在<a href="http://item.taobao.com/item.htm?spm=a1z10.3.w17-8299872990.9.VOESMp&amp;id=14835734724&amp;">“淘宝”</a>买的，2 块钱一个）。</p>

<p><img src="https://lh6.googleusercontent.com/-yB0nK0QzIyk/UpcpKN_er6I/AAAAAAAABZE/xTzkLpMezio/s640/apple_controller_bb.png" alt="电路图" /></p>

<p>客户端我使用 Processing 编写，Arduino 和 Processing 的程序可以到<a href="https://github.com/pikipity/apple_controller.git">我的 Github </a>下载。下面是遥控器与键盘实际按键的对应关系：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">遥控器按键</th>
      <th style="text-align: center">键盘按键</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">后推|«</td>
      <td style="text-align: center">方向键上</td>
    </tr>
    <tr>
      <td style="text-align: center">前进»|</td>
      <td style="text-align: center">方向键下</td>
    </tr>
    <tr>
      <td style="text-align: center">音量 +</td>
      <td style="text-align: center">方向键右</td>
    </tr>
    <tr>
      <td style="text-align: center">音量 -</td>
      <td style="text-align: center">方向键左</td>
    </tr>
    <tr>
      <td style="text-align: center">关闭键</td>
      <td style="text-align: center">开启和关闭选择幻灯片</td>
    </tr>
    <tr>
      <td style="text-align: center">数字键 0~9</td>
      <td style="text-align: center">数字键 0~9</td>
    </tr>
  </tbody>
</table>

<p>实际焊接电路的时候，使用了两个 VS1838B，保证信号接收的覆盖范围。现在唯一的问题就是，控制距离很近，这毕竟受到那个遥控器的限制，没有办法。</p>

<p><img src="https://lh5.googleusercontent.com/-03mn3hE1oG0/UpcIywneYJI/AAAAAAAABYY/sz1hunZUDr8/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252042%252015.jpg" alt="实际电路正面" /></p>

<p><img src="https://lh3.googleusercontent.com/-RWONifCIKj0/UpcIz7nYDOI/AAAAAAAABYg/KgFqGnWKyYc/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252044%252019.jpg" alt="实际电路背面" /></p>

<p><img src="https://lh6.googleusercontent.com/-KPxIQL4uRjg/UpcIy3xTkvI/AAAAAAAABYc/ihL8Wa_p1uo/s640/%25E7%2585%25A7%25E7%2589%2587%252013-11-28%2520%25E4%25B8%258B%25E5%258D%25884%252043%252040.jpg" alt="电路和 Arduino 连接以后" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Yaskawa 机器臂演示（Matlab）]]></title>
    <link href="http://pikipity.github.io/blog/yaskawa-3d-matlab.html"/>
    <updated>2013-11-25T17:30:00+08:00</updated>
    <id>http://pikipity.github.io/blog/yaskawa-3d-matlab</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-ty3uhBgoYjY/UpL6TaePauI/AAAAAAAABX4/l2egtnPhFfA/s720/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-25%2520%25E4%25B8%258B%25E5%258D%25883.19.34.png" alt="3D Yaskawa Robot Arm (Matlab)" /></p>

<p>使用 Matlab 建立了一个 6 自由度的 3D Yaskawa 模型演示。此演示文件可以到<a href="https://github.com/pikipity/Yaskawa3D_matlab.git">我的 Github 下载</a>。主要参考了 Don Riley 的 3D PUMA 演示文件，具体介绍可以看<a href="http://pikipity.github.io/blog/3d-puma-demo.html">这里</a>。</p>

<p>使用 AutoCAD 建立的模型，文件在 <code>model</code> 文件夹中，用 <code>stlread.m</code> 函数将其导入 Matlab 中，然后用 Matlab 自带的 <code>patch</code> 函数进行绘制。</p>

<p>此演示中包括了六轴的基本转动（kinematics）和根据目标位置进行六轴的控制（inverse kinematics）。Inverse kinematics 使用的是 simulink 进行计算，所以第一次运行的时候会比较慢，请耐心等待（Mac 可能需要打开 X11）。</p>

<p>此演示中包括两个 demo，一个是控制机器臂绘制 “UM” 字样，一个是控制控制机器臂绘制一个圆形，由于圆形是由多个直线进行连接而成，结果可能并不圆。</p>

<p>下面是此演示的三段视频地址：</p>

<ol>
  <li>
    <p>基本功能演示视频</p>

    <iframe height="498" width="510" src="http://player.youku.com/embed/XNjM5NTA3ODgw" frameborder="0" allowfullscreen=""></iframe>
  </li>
  <li>
    <p>Demo 1 演示视频</p>

    <iframe height="498" width="510" src="http://player.youku.com/embed/XNjM5NTA4Mjk2" frameborder="0" allowfullscreen=""></iframe>
  </li>
  <li>
    <p>Demo 2 演示视频</p>

    <iframe height="498" width="510" src="http://player.youku.com/embed/XNjM5NTA4NDY0" frameborder="0" allowfullscreen=""></iframe>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《肖申克的救赎》删减片段]]></title>
    <link href="http://pikipity.github.io/blog/remove-part-of-the-shawshank-redemption.html"/>
    <updated>2013-11-24T09:12:00+08:00</updated>
    <id>http://pikipity.github.io/blog/remove-part-of-the-shawshank-redemption</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-i__KzNHZXUk/UpFUwKlq5yI/AAAAAAAABXs/cmnWExXIYeg/s512/414px-Shawshank_Redemption_ver1.jpg" alt="《肖申克的救赎》海报" /></p>

<p>《肖申克的救赎》是我最喜欢的影片之一了，下面是一段《肖申克的救赎》导演及主演的采访片段，介绍两段电影中被删减的片段，分别是关于瑞德出狱之后生活的片段（更加明白的了解，为什么出狱后的人们会纷纷选择自杀，为什么瑞德会开始寻找波兰特）和波兰特越狱后狱警寻找波兰特（波兰特的越狱路线远没有想象中的简单）和瑞德的表现。</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjM3Njc3NTA4" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[游戏大集合 -- Rabbit Rush]]></title>
    <link href="http://pikipity.github.io/blog/rabbit-rush.html"/>
    <updated>2013-11-19T09:56:00+08:00</updated>
    <id>http://pikipity.github.io/blog/rabbit-rush</id>
    <content type="html"><![CDATA[<p>推荐一款游戏 – “Rabbit Rush”，小游戏？解密？Galgame？文字游戏？Too young Too simple。这个游戏将各个种类的游戏融合在一起，剧情慢慢地一点点展开，不要心急。制作很精良，很难想象初稿只不过是 RMIT 的学生的小项目而已。</p>

<p>官方网站在<a href="http://www.rabbit-rush.com/">这里</a>，免费下载，支持 Windows 和 Mac。</p>

<p>下面是一段官方视频，本来是 Youtube 上的，搬运到了 Youku 上，不要被视频欺骗，那只是故事的开始而已。</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNjM2NjU5ODMy" frameborder="0" allowfullscreen=""></iframe>

<p>自己懒得玩的，可以看看 B 站谜叔的实况，我想看完之后就会想玩了吧。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=841121&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D PUMA 机器人手臂演示（by Don Riley）]]></title>
    <link href="http://pikipity.github.io/blog/3d-puma-demo.html"/>
    <updated>2013-11-17T16:36:00+08:00</updated>
    <id>http://pikipity.github.io/blog/3d-puma-demo</id>
    <content type="html"><![CDATA[<p>最近需要用 MATLAB 制作一个 3D 的机器人手臂演示，于是就去网上搜索了一下，在 <a href="http://www.mathworks.com/matlabcentral/fileexchange">MATLAB Center</a> 找到了一个 3D PUMA 机器人手臂非常好的演示软件。第一，制作很精良，可以任意调整每个关节的角度，可以画出移动轨迹，并有一个绘制螺旋的 Demo；第二，文件本身清晰易懂。这简直就是学习的完美教程。此演示文件可以到<a href="http://www.mathworks.com/matlabcentral/fileexchange/14932-3d-puma-robot-demo">这里</a>下载。下面是我录制的一段此文件运行的视频。</p>

<iframe height="498" width="700" src="http://player.youku.com/embed/XNjM1OTM4NjA4" frameborder="0" allowfullscreen=""></iframe>

<p>唯一的缺点就是，作者 Don Riley 并没有给出其是如何构建模型的。于是我去<a href="http://www.mathworks.com/matlabcentral/fileexchange/authors/1558">他的主页</a>看了一下，发现他还有一个将 CAD 的 STL 格式文件转换成 MATLAB 的 MAT 格式文件的项目，支持 AutoCAD, Cadkey, and Pro/Engineer，看来他就是先用 CAD 建好模型，再用这个函数导入到 MATLAB 的了。此转换函数文件可以到<a href="http://www.mathworks.com/matlabcentral/fileexchange/3642-cad2matdemo-m">这里</a>下载。</p>

<p>另外，此作者还有一个 2D 3段机器人手臂的演示程序，制作一样极其精良，下载地址在<a href="http://www.mathworks.com/matlabcentral/fileexchange/157-robot-demo">这里</a>。</p>

<p><img src="http://www.mathworks.com/matlabcentral/fx_files/157/1/demobot.jpg" alt="2D 3段机器人手臂的演示程序" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打砖块 (8051)]]></title>
    <link href="http://pikipity.github.io/blog/breakout-8051.html"/>
    <updated>2013-11-17T09:57:00+08:00</updated>
    <id>http://pikipity.github.io/blog/breakout-8051</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>用 AT89C52 做的一个打砖块游戏机，使用 Proteus 进行的仿真，部分电路如果要实体化还需改进。</p>

<p>使用 AMPIRE12864 作为显示器，三个按键分别控制平台的“左右移动”和“开始游戏”。为了保证游戏中音乐与画面的流畅，使用另外一块 AT89C52 来控制 sounder 进行声音的播放。</p>

<p>项目主页：<a href="http://pikipity.github.io/Breakout_clone">http://pikipity.github.io/Breakout_clone</a></p>

<h3 id="section-1">游戏规则</h3>

<p>玩家控制屏幕底端的平台左右移动来保证小球在屏幕中碰撞。当小球碰撞到上屏的砖块时，被碰撞的砖块会消失，当所有砖块被消掉后，此关胜利，总共 3 关，3 关全部胜利以后，游戏重置；当小球碰触到屏幕下边缘时，失去一条命，总共 5 条命，当 5 条命全部失去以后，游戏结束，整个游戏重置。</p>

<p>游戏过程中，有四种道具，随机出现在下屏的随机位置。每个道具的图案是一个字母，当小球碰触道具图案时，道具生效。以下是道具介绍：</p>

<ol>
  <li>
    <p>变长道具（道具图案是 “L” 字样）：道具生效后，平台变为铺满整个屏幕的底边，一段时间后失效，复原为原来长度。</p>

    <p><img src="https://lh5.googleusercontent.com/-ay36V6-TnVw/UoeDXl8zxmI/AAAAAAAABWo/aq7HFFR_784/s31/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.20.08.png" alt="变长道具" /></p>
  </li>
  <li>
    <p>清除道具（道具图案是 “C” 字样）：生效后，随机清除一部分的砖块。</p>

    <p><img src="https://lh6.googleusercontent.com/-_PYJavumack/UoeDX7XP9TI/AAAAAAAABWs/Ign1Zn3GPeA/s33/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.20.24.png" alt="清除道具" /></p>
  </li>
  <li>
    <p>胜利道具（道具图案是 “W” 字样）：生效后，此关胜利。</p>

    <p><img src="https://lh6.googleusercontent.com/-DG5aOe5ti0s/UoeDYLY2ViI/AAAAAAAABWk/OsG_balBJP8/s35/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.21.08.png" alt="胜利道具" /></p>
  </li>
  <li>
    <p>死亡道具（道具图案是 “D” 字样）：生效后，直接失去一条命。</p>

    <p><img src="https://lh3.googleusercontent.com/-btLEA34gYD4/UoeDXMaDysI/AAAAAAAABWU/QtzDuDzqYYM/s29/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.19.42.png" alt="死亡道具" /></p>
  </li>
</ol>

<p>每一关，上半屏砖块组成的图案都不同（下面是三关的砖块图案），下方平台的移动速度也不同，速度会随着关卡数增大而变快，而且平台的长度也会变短，所以难度也会随之增大。小球的纵向移动速度不变，横向移动速度和平台一致，每次碰撞平台的时候，平台的移动方向和速度就会传递给小球。</p>

<p><img src="https://lh5.googleusercontent.com/-OciVp2e6XnE/UoeDXIK9vcI/AAAAAAAABWM/gzRk9e89D7I/s455/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.19.20.png" alt="第一关砖块图案" /></p>

<p><img src="https://lh6.googleusercontent.com/-d3jCz1ka0pw/UoeDaTrBJPI/AAAAAAAABXQ/fnqbIvgXodg/s452/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.24.24.png" alt="第二关砖块图案" /></p>

<p><img src="https://lh6.googleusercontent.com/-BRp240xR57w/UoeDasw4kMI/AAAAAAAABXY/KX8Rw5KPsBQ/s453/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.26.44.png" alt="第三关砖块图案" /></p>

<h3 id="section-2">文件说明</h3>

<ul>
  <li>circuit 文件夹：Proteus 仿真电路</li>
  <li>material 文件夹：部分使用到的素材</li>
  <li>
    <p>program 文件夹：C 8051 的程序</p>

    <ul>
      <li>sounder_main.c：控制 sounder 的单片机使用的程序</li>
      <li>main.c：主单片机（控制显示器和按键的单片机）的程序</li>
      <li>
        <p>lcd12864.h 和 lcd12864.c：为了实现对 AMPIRE12864 的控制编写的函数，包括：</p>

        <ol>
          <li><code>lcd_write_command ( command )</code>：向 AMPIRE12864 中写入一个命令 command。</li>
          <li><code>lcd_write_data ( data )</code>：向 AMPIRE12864 中写入一个8位的数据 data。</li>
          <li><code>lcd_read_data ( )</code>：从 AMPIRE12864 中读取一个8位的数据。</li>
          <li><code>lcd_init ( )</code>：初始化 AMPIRE12864。</li>
          <li><code>first_page ( )</code>：清空整个屏幕。</li>
          <li><code>choose_screen ( n )</code>：选择屏幕。（同时选择两个屏幕：n=0；左屏幕：n=1；右屏幕：n=2）</li>
          <li><code>set_dot ( x,y )</code>：点亮坐标为 (x,y) 的像素点。（左上角的像素点为 (0,0)，x 坐标向右延伸，y 坐标向下延伸）</li>
          <li><code>clear_dot ( x,y )</code>：清除坐标为 (x,y) 的像素点。（坐标系同上）</li>
          <li><code>read_dot ( x,y )</code>：读取坐标为 (x,y) 的像素点的状态。</li>
        </ol>
      </li>
      <li>game.h 和 game.c：用于刷新屏幕和计算游戏状态的函数。</li>
    </ul>
  </li>
</ul>

<h3 id="section-3">电路图</h3>

<p><img src="https://lh6.googleusercontent.com/-ldlHxz4m384/UocrUK_Sy4I/AAAAAAAABV0/RSKXVdsHxJc/s720/circuit.jpg" alt="电路图" /></p>

<h3 id="section-4">运行画面</h3>

<p><img src="https://lh5.googleusercontent.com/-Zfwu4WWGgPA/UoeDXAfFipI/AAAAAAAABWQ/r451XxrQqQs/s543/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.18.47.png" alt="开始画面" /></p>

<p><img src="https://lh4.googleusercontent.com/-kP_-IcYWnk0/UoeDY4d1ljI/AAAAAAAABXI/VZ0FNyGnSY4/s535/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.21.47.png" alt="游戏进行中的画面" /></p>

<p><img src="https://lh5.googleusercontent.com/-wRC1xSJ4d4E/UoeDZG8JYvI/AAAAAAAABXA/GJjNwrrN1Fk/s544/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.22.17.png" alt="死亡后显示剩余生命的画面" /></p>

<p><img src="https://lh6.googleusercontent.com/-NJ48URX34xc/UoeDZUi1y6I/AAAAAAAABW8/C0oJXVNGqoc/s528/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.22.48.png" alt="5 条命全部耗费完毕之后的画面" /></p>

<p><img src="https://lh4.googleusercontent.com/-IM0DGKy4E1Y/UoeDaDz8iLI/AAAAAAAABXc/XecvfvZClZY/s530/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-16%2520%25E4%25B8%258B%25E5%258D%258810.24.09.png" alt="一关获胜之后的画面" /></p>

<h3 id="demo-">Demo 视频</h3>

<p>由于录制的时候忘记开声音了，所以音乐没有录进去。</p>

<iframe height="498" width="700" src="http://player.youku.com/embed/XNjM1Nzk0MTI4" frameborder="0" allowfullscreen=""></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE 娘 -- 你难道是。。。]]></title>
    <link href="http://pikipity.github.io/blog/ie-niang.html"/>
    <updated>2013-11-11T08:24:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ie-niang</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-yjjf7RV1z_U/UoAg3SNvjEI/AAAAAAAABUI/paM1EuaUPFQ/s512/q5eao6SWkZ6Vp6g.jpg" alt="IE 娘" /></p>

<p>今天看到了 B 站 IE 娘大战怪蜀黍的视频，总感觉 IE 娘似曾相识，想了半天，才恍然大悟，“平泽唯”你不好好在轻音部做你的吉他手，跑来微软做代言了啊，竟然还有了个新艺名 – “蓝泽祈”（误）。还有啊，“祈公主”的名号你也敢随便用啊（大误）。</p>

<p><img src="https://lh4.googleusercontent.com/-nE_-lhdYVS4/UoAg3cDqRTI/AAAAAAAABUE/jJ4mRsvazcc/s335/260px-K-On%2521%2521_anime_offical_poster.jpg" alt="“K-ON”乱入" /></p>

<p>“平泽唯”大战怪蜀黍（ &lt;- 我够了~~）</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=825369&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

<p>我明白的，大战怪蜀黍什么的不是重点，重点是变（去）身（衣）是吧~~~</p>

<p><img src="https://lh4.googleusercontent.com/-npas_x5v_Ws/UoA3P_LItuI/AAAAAAAABVI/Tq_Xlor4G1w/s500/q5eapJ2ZkZ6VqKo.gif" alt="IE 娘变身 1" /></p>

<p><img src="https://lh3.googleusercontent.com/-w3JY7Loctos/UoA3Qdt5OcI/AAAAAAAABVQ/jcIyrz-D0fE/s500/q5eapJ6akZ6VqKs.gif" alt="IE 娘变身 2" /></p>

<p><img src="https://lh4.googleusercontent.com/-1BynTt13KdI/UoA3QVj2q2I/AAAAAAAABVM/kuboxQc7EsQ/s500/q5eapJ_bkZ6VqKw.gif" alt="IE 娘变身 3" /></p>

<p>看到网上说，IE 娘属于 loli。这些人一定不是 loli 控吧，下面才是 loli 好吗！！！</p>

<p><img src="https://lh3.googleusercontent.com/-1Y7P8OzT1ug/UoAjY1LvFTI/AAAAAAAABUk/dk_XQK39W7Q/s250/250px-12105984.jpg" alt="火狐娘" /></p>

<p><img src="https://lh3.googleusercontent.com/-n4qWs3l1DCk/UoAjZN8uY7I/AAAAAAAABUs/HW80NPmf_A0/s640/59_MacOS.jpg" alt="Mac OS X 娘" /></p>

<p><img src="https://lh3.googleusercontent.com/-2d3_rTQM2UI/UoAjZP7iYnI/AAAAAAAABUo/YK6RLfefr2A/s500/Chrome.jpg" alt="Chrome 娘" /></p>

<p>最后的最后，给出的是官（萌）方（娘）介（百）绍（科）的链接：</p>

<ul>
  <li><a href="http://zh.moegirl.org/IE%E5%A8%98">IE 娘</a></li>
  <li><a href="http://zh.moegirl.org/Firefox%E5%A8%98">火狐娘</a></li>
  <li><a href="http://zh.moegirl.org/Chrome">Chrome 娘</a></li>
  <li><a href="http://zh.moegirl.org/Mac_OS_X%E5%A8%98">Mac OS X 娘</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电风扇如何用一个马达同时完成转动扇叶和摆头]]></title>
    <link href="http://pikipity.github.io/blog/funny-gif.html"/>
    <updated>2013-11-10T10:33:00+08:00</updated>
    <id>http://pikipity.github.io/blog/funny-gif</id>
    <content type="html"><![CDATA[<p>今天看到一个 GIF 图，很有意思，重点不是机械的原理，重点是这种 GIF 图怎么做啊！（误）</p>

<p><img src="https://lh6.googleusercontent.com/-w8KIYt_Ep_o/Un7wADaDW3I/AAAAAAAABTw/1kPaM-PeNSg/s500/1fff2111.gif" alt="电风扇原理" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起将 processing 镶嵌在网页上]]></title>
    <link href="http://pikipity.github.io/blog/sketchpad.html"/>
    <updated>2013-11-05T21:42:00+08:00</updated>
    <id>http://pikipity.github.io/blog/sketchpad</id>
    <content type="html"><![CDATA[<p>一直想找一种方法，将 processing 生成的程序放到网页上。在搜索了一番 Google 之后发现要使用 <a href="http://processingjs.org/">processing.js</a> 才可以，但是要设置自己的网页才可以，太麻烦了，于是就放弃了。今天在浏览 <a href="http://processingjs.org/">processing.js</a> 官网说明的时候发现，在<a href="http://processingjs.org/articles/p5QuickStart.html">《Processing.js Quick Start - Processing Developer Edition》</a>一文中介绍了以下两个网站可以在线编写并共享自己的 processing 代码和效果：</p>

<ol>
  <li>
    <p><a href="http://sketchpad.cc/">sketchpad</a></p>

    <p>这个网站上，不仅可以实现在线编写和分享代码，还可以自由浏览别人的共享代码，所有程序的效果可以实时演示，编辑器中还提供多人合作功能，很方便。</p>

    <p>缺点也很显著，编辑器虽然提供语法高亮，但是高不高亮完全没有用，所有文字一个颜色（只有 class 部分和别的不一个颜色）。第二个缺点不晓得是不是我浏览器的问题，贴出来的动画会播放一段时间之后突然放大，导致鼠标定位出现错误，很是奇怪。</p>

    <p><img src="https://lh3.googleusercontent.com/-Cx0ZXzkD2ho/UnkDB9mWrDI/AAAAAAAABTc/FiQVDRkoVCs/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.22.47.png" alt="sketchpad 编辑器界面" /></p>

    <p>下面是我为了测试编写的一段小代码：</p>

    <iframe id="ifr" width="200" height="235" scrolling="no" style="background: url(http://studio.processingtogether.com/static/img/jun09/pad/connectingbar.gif) no-repeat center 60px;" src="http://studio.processingtogether.com/sp/pad/iframe/ro.9DUd1JyjanBXc/rev.925?autostart=0"></iframe>
  </li>
  <li>
    <p><a href="http://hascanvas.com/">hascanvas</a></p>

    <p>这个网站设计的很独特，编辑器隐藏在左边，鼠标靠近浏览器左边缘的时候，编辑器就会自动弹出，鼠标移开编辑区后，就会保存一次代码并编译，结果就显示在整个页面上。但是我用和上面一模一样的代码进行测试始终报错，这里只好拿别人的代码演示一下了。（貌似鼠标位置依然有偏差）</p>

    <iframe src="http://hascanvas.com/crossing/embed" frameborder="0" scrolling="no" style="width:600px;height:400px;"></iframe>

    <p><img src="https://lh6.googleusercontent.com/-gSeb362FAWw/UnkDCOO0AMI/AAAAAAAABTg/7bDgI4cjK80/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.36.00.png" alt="hascanvas 界面" /></p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
