<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[将 Google Scholar 上的搜索结果导出为 BibTex]]></title>
    <link href="http://pikipity.github.com/blog/bibtex-in-google-scholar.html"/>
    <updated>2013-04-12T18:20:00+08:00</updated>
    <id>http://pikipity.github.com/blog/bibtex-in-google-scholar</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-2ut2cDCgHbk/UWfg8TuUpOI/AAAAAAAAAvc/w2pTgBXwvBc/s621/Screen%2520Shot%25202013-04-12%2520at%25206.24.30%2520PM.png" width="480" /></p>

<p>BibTex 是一种用于管理文献、产生文献目录的格式，主要用于 LaTex 的参考书目的管理，但是格式要求很严格，而且英文文献管理时到底每个条目对应的是什么，让人很头疼。今天在 <a href="http://scholar.google.com/">Google Scholar</a> 上搜索论文的时候发现每个条目底下都有一个 “Cite” 按钮：</p>

<p><img src="https://lh4.googleusercontent.com/-UTz8Uw-kwGQ/UWfghmcarGI/AAAAAAAAAvQ/RTIRPc8aaUY/s718/Screen%2520Shot%25202013-04-12%2520at%25204.01.45%2520PM.png" width="480" /></p>

<p>点了之后发现竟然可以把文献的引用直接导出为 BibTex 格式：</p>

<p><img src="https://lh3.googleusercontent.com/-sj9krf4OAf4/UWfgh6zE-lI/AAAAAAAAAvI/TwmuUiIWPNM/s800/Screen%2520Shot%25202013-04-12%2520at%25204.01.55%2520PM.png" width="480" /></p>

<p>瞬间有了一种遇到神器的感觉，热泪盈眶啊…………。如果将上图下面的方框选中的话，以后再进行搜索，每个搜索结果下面就会直接出现 “Import to BibTex” 的选项，真是太好用了。</p>

<p><img src="https://lh6.googleusercontent.com/-lGp1PQIQntw/UWfgh-uPU7I/AAAAAAAAAvA/mX1NIyr4lXI/s716/Screen%2520Shot%25202013-04-12%2520at%25204.04.02%2520PM.png" width="480" /></p>

<p>和我一样觉得 <a href="http://scholar.google.com/">Google Scholar</a> 好用的，可以再试试 Chrome 上的这两个插件：</p>

<ol>
  <li><a href="https://chrome.google.com/webstore/detail/scholar-search/iaoheikkcfcbplmldmgogdooknbbbcnf">Scholar search</a>: 在 Chrome 扩展栏上添加一个图标，点击图标就可以搜索了。</li>
  <li><a href="https://chrome.google.com/webstore/detail/google-scholar-context-me/enmmfafpcihjfbkeoncplhjjkglkhdff">Google Scholar Context Menu</a>：当在Chrome 中选中一段文本再点右键的时候，菜单中会出现 “Search Google Scholar for “……”“的选项。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国的富二代]]></title>
    <link href="http://pikipity.github.com/blog/money-man.html"/>
    <updated>2013-04-12T15:01:00+08:00</updated>
    <id>http://pikipity.github.com/blog/money-man</id>
    <content type="html"><![CDATA[<p>中国的富二代到底是什么样的呢？他们到底过着怎样的生活呢？老外好像比我们更想知道，于是 BBC 拍摄了一部纪录片《外国人眼中的中国富二代》来告诉你中国的富二代们在做些什么。</p>

<embed src="http://player.youku.com/player.php/sid/XNDI3MjYyMDU2/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双面中国人]]></title>
    <link href="http://pikipity.github.com/blog/double-face-chinese.html"/>
    <updated>2013-04-12T14:59:00+08:00</updated>
    <id>http://pikipity.github.com/blog/double-face-chinese</id>
    <content type="html"><![CDATA[<p>好听又有趣的一首歌。</p>

<embed src="http://player.youku.com/player.php/sid/XNTM5NjExNjY4/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github 五岁了]]></title>
    <link href="http://pikipity.github.com/blog/github-5-years-old.html"/>
    <updated>2013-04-12T14:48:00+08:00</updated>
    <id>http://pikipity.github.com/blog/github-5-years-old</id>
    <content type="html"><![CDATA[<p>感谢 Tom Preston-Werner、Chris Wanstrath和PJ Hyett 创建这样一个资源共享、合作平台，收集了一些 Github 章鱼猫的图片，可以到<a href="http://pan.baidu.com/share/link?shareid=472164&amp;uk=4080321956">这里</a>下载合集（共28张）</p>

<p><img src="https://lh3.googleusercontent.com/-GtUg-uGWQqM/UWevcsehRSI/AAAAAAAAAtc/kLS-HYQ3bOo/s224/images%2520%25287%2529.jpeg" width="200" /><img src="https://lh5.googleusercontent.com/-xIBU5KTBVcI/UWevbE4xKAI/AAAAAAAAAsY/E-TE4XsxJgw/s224/images%2520%25282%2529.jpeg" width="200" /><img src="https://lh6.googleusercontent.com/-B9FrMxvY9oM/UWevdOl2eWI/AAAAAAAAAtY/0OzTMCCARKE/s224/images%2520%25289%2529.jpeg" width="200" /><img src="https://lh3.googleusercontent.com/-GhzQ2PNotbI/UWevacnK2rI/AAAAAAAAAuI/ud_BkEGqWTk/s235/images%2520%252817%2529.jpeg" width="200" /><img src="https://lh3.googleusercontent.com/-VkRkffqG3p0/UWevYtjxHLI/AAAAAAAAAts/vkcrXe-KnZw/s512/founding-father.jpg" width="200" /><img src="https://lh6.googleusercontent.com/-0BwtaQ5bB_I/UWevZOsK-YI/AAAAAAAAAtw/m31AKo0PS30/s224/images%2520%252811%2529.jpeg" width="200" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 下用 Tkinter 制作 GUI]]></title>
    <link href="http://pikipity.github.com/blog/python-tkinter.html"/>
    <updated>2013-04-11T00:36:00+08:00</updated>
    <id>http://pikipity.github.com/blog/python-tkinter</id>
    <content type="html"><![CDATA[<h3 id="gui">什么是 GUI</h3>

<p>既然要制作 GUI，那么就要先明确什么是 GUI。<a href="http://zh.wikipedia.org/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2">wiki</a>上是这么说的:</p>

<blockquote>
  <p>图形用户界面（Graphical User Interface，简称 GUI）是指采用图形方式显示的计算机操作用户接口。</p>
</blockquote>

<p>曾经有个同学这么跟我说，“MATLAB 有个 GUI 的功能，貌似很强大啊”，听完我就凌乱了，图形用户界面什么时候成了 MATLAB 的专属功能了？我平常用的 Windows 或者 Linux、Mac 都是在图形用户界面下进行操作的，如果想看一看命令行界面，Windows 可以在“运行”中输入 <code>cmd</code> 然后回车，Linux下可以直接 <code>alt+F1</code>（切换回来用 <code>alt+F7</code>）。简单来说，GUI 提供给用户一种更加直白的图形化的人机交互界面。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/X-Window-System.png/720px-X-Window-System.png" width="480" alt="1990年代早期Unix 平台上运行的 X Window System" /></p>

<h3 id="python--gui-">Python 中的 GUI 工具包</h3>

<p>如果想用 Python 语言制作出一个程序的 GUI，不仅仅可以用 Tkinter 一个包，最常见的还有 wxPython 和 PyQt，还有很多很多（我不熟悉啊 (╯▽╰)）。</p>

<ol>
  <li>
    <p>wxPython：wxPython 创建的是 wxWidgets。它的好处是，可以通过简单的命令就创建出比较漂亮的界面，并且在中国的使用人数挺多，遇到问题在网上找起答案来比较轻松。缺点是并不是 Python 的标准工具包，还需要另外安装。官网在<a href="http://www.wxpython.org/">这里</a>，官网提供的英文教程在<a href="http://wiki.wxpython.org/Getting%20Started">这里</a></p>

    <p><img src="https://lh3.googleusercontent.com/-lckWJC8vAoc/UWYhrAqM7kI/AAAAAAAAAqw/UTu3LsfWLXA/s640/wxPython.jpg" width="480" alt="wxPython" /></p>
  </li>
  <li>
    <p>PyQt：和名字一样，创建的是 Qt 的 GUI。Qt 的 GUI 当然是漂亮的不能再漂亮了。优点是，创建出的 GUI 很漂亮，且有图形化的 GUI 设计软件 Qt Designer 来使整个设计过程简单化。缺点：同样不是 Python 的标准工具包，还需要另外安装，如果手工输入 GUI 代码习惯了，有时候图形化的 GUI 设计软件反而不习惯。官网在<a href="http://www.riverbankcomputing.co.uk/software/pyqt/intro">这里</a>，<a href="http://blog.csdn.net/wescom/article/details/4727114">这里</a>有一个比较不错的中文教程，主要讲的是 Qt Designer 的入门使用，很不错。</p>

    <p><img src="https://lh6.googleusercontent.com/-mCcMvwpzwqQ/UWYhrOvfVpI/AAAAAAAAAqs/plQq7BcSrwU/s640/QtPy.png" width="480" alt="Qt Designer" /></p>
  </li>
  <li>
    <p>Tkinter: 从名字可以看出，创建的是 Tk 的GUI。优点很明显，是一个已经半官方化的工具包，可以直接使用，无需安装，并且教程众多，几乎所有介绍 Python 入门的书，只要提及 GUI 设计都会讲 Tkinter。缺点一样明显，设计出的 GUI 很难看，要问多难看，你自己看看 Python 的那个 IDLE 就好了，土的掉渣啊，而且元件一样很少，如果只是编写一些小程序的话还可以，如果编写大程序要用到比较复杂的元件的话，就需要从提供的元件里找一些替代品了，手工输入代码，有时候很累啊。但是我认为用 Tkinter 来入门 GUI 设计是很好的，因为思路清晰，代码简单，这也就是为什么我在这里只介绍 Tkinter 的原因。一个英文教程在<a href="http://www.pythonware.com/library/tkinter/introduction/index.htm">这里</a>，由于我不想记住所有元件的方法，所以用到的话就来这里查询，很方便。</p>

    <p><img src="https://lh3.googleusercontent.com/-mTq-K8KM-Tk/UWYhrLi4D2I/AAAAAAAAAq0/bRsZe5macLk/s512/Tkinter.png" width="480" alt="Tkinter" /></p>
  </li>
</ol>

<h3 id="gui-">GUI 的设计基本思路</h3>

<p>但你开始学习 Python 的时候，所有都会考诉你，Python 是 <a href="http://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">OOP（面向对象程序设计）</a>的程序语言，但是我认为“类”的概念对于初学者是非常难以理解的，而且也没有人规定在 Python 中必须使用“类”，所以我下面的例子，都不是以定义“类”的形式出现，而是以简单的定义“函数”的形式出现，使代码简单、易懂。</p>

<p>对于 GUI 的设计，我认为是“不要着急，不要着急”。先确保实现主要功能的函数正常运行再来考虑 GUI 也不迟。GUI 的设计主要包括下面三个步骤：</p>

<ol>
  <li>创建主窗体</li>
  <li>创建元件</li>
  <li>显示元件</li>
  <li>进入窗体的主循环</li>
</ol>

<p>下面是一个简单的例子：</p>

<pre><code>import Tkinter

root=Tkinter.Tk()  %创建主窗体
MainLabel=Tkinter.Label(root,text="I am so ugly. -- Tkinter",font="Times 16 bold")  %创建元件
MainLabel.pack()  %显示元件
root.mainloop()  %进入窗体的主循环
</code></pre>

<p>这个例子中，只包含一个元件是 <code>Label</code>，最后效果就是</p>

<p><img src="https://lh6.googleusercontent.com/-W2YkdsudA-8/UWYmD-s8nDI/AAAAAAAAArE/zVuwNeJgLeA/s230/Screen%2520Shot%25202013-04-11%2520at%252010.53.57%2520AM.png" width="200" /></p>

<p>根据需要，可以在主窗口中创建多个元件，每一个元件所拥有的参数不同，但是有一点是一样的，就是第一个参数一定是其所属的窗口的变量名。上面的例子中，元件 <code>Label</code>就是隶属于 <code>root</code>，所以在调用 <code>pack</code> 方法之后，这个元件就会在 <code>root</code> 窗口中显示了，只与显示的位置和显示的样子，需要调整 <code>pack</code> 方法的参数，我这里使用默认值，所以什么参数也没有，具体 <code>pack</code> 的用法可以参照<a href="http://www.360doc.com/content/12/0922/02/3234041_237501468.shtml">这里</a>。</p>

<p>这三步其实就是 Tkinter GUI 设计的全部了，剩下的就是每个元件的位置、样子、显示的文字、显示的图像、调用的函数等等元件参数上的设定了，这就涉及到每个元件包含哪些参数、每个参数是什么意思的问题了，这个可以通过查询<a href="http://www.pythonware.com/library/tkinter/introduction/index.htm">我提到的那个网站</a>来得到。</p>

<p>在 GUI 设计中有以下几点需要注意（<strong>持续更新中</strong>）：</p>

<ol>
  <li>
    <p>对于元件函数的调用，有两种方式：直接绑定和间接绑定。直接绑定就是在元件 <code>Button</code> 中的参数 <code>command</code> 中设定回调的函数名称，如下：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=InputString)
</code></pre>

    <p>间接绑定是用 <code>bind</code> 方法，对于所有元件都有这个方法，形式如下：</p>

    <pre><code>ButtonInput.bind('&lt;Return&gt;',InputString)
</code></pre>

    <p><code>bind</code> 需要指定一种触发方式，这里的触发方式就不再仅仅局限于 <code>Button</code> 的左键单击了，键盘输入、鼠标点击都是可以的，我这里的触发方式是 <code>&lt;Return&gt;</code>，也就是回车。但是要注意的是，<code>bind</code> 是绑定在一个元件上的，也就是说，当焦点在这个元件上的时候触发才有用，而且回调的函数必须要要有一个 <code>event</code> 作为输入参数，如果没有就直接 <code>None</code> 好了，如下：</p>

    <pre><code>def InputString(event=None):
   …
   …
   …
</code></pre>

    <p>这两种方法使用的时候有一个共同需要注意的地方就是，回调函数不要出现参数，下面这种就是错误的：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=InputString())
</code></pre>

    <p>如果这样，程序就会直接调用函数 <code>InputString()</code>，而不是等到用户点击按钮的时候再调用了，如果一定要向回调的函数中加入参数的话，就用 <code>lambda</code> 吧，如下：</p>

    <pre><code>ButtonInput=Tkinter.Button(root,text="Input",command=lambda x: InputString(x))
</code></pre>
  </li>
  <li>显示元件的方法不仅仅有 <code>pack()</code>，还有 <code>grid()</code>，如果元件排列需要很整齐，可以用 <code>grid()</code>，通过输入行数和列数来控制元件的显示位置，两者的比较和使用，可以参见<a href="http://purpen.iteye.com/blog/74830">这里</a>。</li>
  <li>创建主窗口用 <code>Tkinter.Tk()</code>，但是有的时候需要有一些子窗口，可以用 <code>Tkinter.Toplevel()</code> 来创建，保证子窗口一创建出来就在所有窗口的最前面。当运行完某个回调函数需要找回焦点的时候可以用所有元件都有的方法 <code>focus()</code>，来得到某个元件的焦点。</li>
  <li>
    <p>窗口退出的时候，可以用方法 <code>quit()</code>，也可以用 <code>destroy()</code>，比如：</p>

    <pre><code>root.quit()
</code></pre>
  </li>
  <li>
    <p>如果某个元件需要更新，比如图片刷新，可以先调用 <code>destroy()</code> 这个方法摧毁掉这个元件，再将这个元件重建。如果只是 <code>Label</code> 元件的文字上的变动（比如状态栏的文字变化），可以用 <code>StringVar()</code>，需要输入什么直接调用 <code>set()</code> 方法就可以了，如下：</p>

    <pre><code>v = Tkinter.StringVar()
Tkinter.Label(master, textvariable=v).pack()
v.set("New Text!")
</code></pre>
  </li>
  <li>
    <p>菜单栏的创建比较麻烦，如下：</p>

    <pre><code> from Tkinter import *
 root = Tk()

 def hello():
     print('hello')

 def about():
     print('我是开发者')

 menubar = Menu(root)

 #创建下拉菜单File，然后将其加入到顶级的菜单栏中
 filemenu = Menu(menubar,tearoff=0)
 filemenu.add_command(label="Open", command=hello)
 filemenu.add_command(label="Save", command=hello)
 filemenu.add_separator()
 filemenu.add_command(label="Exit", command=root.quit)
 menubar.add_cascade(label="File", menu=filemenu)

 #创建另一个下拉菜单Edit
 editmenu = Menu(menubar, tearoff=0)
 editmenu.add_command(label="Cut", command=hello)
 editmenu.add_command(label="Copy", command=hello)
 editmenu.add_command(label="Paste", command=hello)
 menubar.add_cascade(label="Edit",menu=editmenu)
 #创建下拉菜单Help
 helpmenu = Menu(menubar, tearoff=0)
 helpmenu.add_command(label="About", command=about)
 menubar.add_cascade(label="Help", menu=helpmenu)

 #显示菜单
 root.config(menu=menubar)

 mainloop()
</code></pre>

    <p>其中 <code>tearoff=0</code> 就是下拉菜单和窗口是一体的，不能独立形成一个窗口，效果如下：</p>

    <p><img src="https://lh6.googleusercontent.com/-7vMkEb-xO1A/UWfmMhlAm8I/AAAAAAAAAvs/vWqDhrNnK5o/s136/Screen%2520Shot%25202013-04-12%2520at%25206.46.35%2520PM.png" width="200" /></p>

    <p>如果 <code>tearoff=1</code>，则效果如下，点击那个虚线会形成一个新的窗口。</p>

    <p><img src="http://pic002.cnblogs.com/images/2012/370835/2012102220204555.png" width="200" /><img src="http://pic002.cnblogs.com/images/2012/370835/2012102220205355.png" width="200" /></p>
  </li>
  <li>简单的提示窗口（比如报错之类的），可以直接调用 <code>tkMessageBox</code> 库，具体用法可以参见<a href="http://www.pythonware.com/library/tkinter/introduction/standard-dialogs.htm">这里</a>。简单的数字输入、文件选取、颜色选取，可以直接调用 <code>tkSimpleDialog</code> 库，具体用法可以参见<a href="http://www.pythonware.com/library/tkinter/introduction/x1164-data-entry.htm">这里</a></li>
  <li>
    <p>Tkinter 自带的下拉框元件 <code>Listbox</code> 很不好用，可以使用 <code>ttk</code> 库中的 <code>Combobox</code> 元件，使用如下：</p>

    <pre><code>boudrate=Tkinter.StringVar()
boudrate.set("9600")
manul_boudrate=ttk.Combobox(root,text=boudrate,values=["2400","9600","12900"])
</code></pre>

    <p>需要得到 <code>Combobox</code> 中选中的字符串的时候，直接 <code>boudrate.get()</code> 就可以了。</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天开始可以登记结婚了]]></title>
    <link href="http://pikipity.github.com/blog/22-years-old.html"/>
    <updated>2013-04-07T10:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/22-years-old</id>
    <content type="html"><![CDATA[<p>今天是22岁的生日，终于到了法定结婚年龄了，女朋友给我做了个视频，感动死了。谢谢周围一直以来支持我的人们，非常感谢，真是不知道说什么好了，直接上视频吧。T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T T^T </p>

<embed src="http://player.56.com/v_OTAwNjQ4OTE.swf" type="application/x-shockwave-flash" width="480" height="405" allowfullscreen="true" allownetworking="all" allowscriptaccess="always" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第六章 计时器/计数器]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-6.html"/>
    <updated>2013-04-04T09:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-6</id>
    <content type="html"><![CDATA[<p>计时器与计数器使用的寄存器和它们的工作原理是一样的，当计时时脉从“0”变为“1”的时候，内部的累加器加一，当累加器溢出的时候，检查中断，如果中断置能，便进入中断，否则重新开始计数。它们唯一的不同就是使用的计时时脉不一样，计时器使用的是内部时脉，因为内部时脉很稳定，所以可以用来计算时间；计数器使用的是从 T1 或者 T0 口输入的外部时脉，如果这个外部时脉的信号代表一个事件发生的次数，那么计时/计数器就是在计算这个事件发生的次数。8051中有两个计时/计数器– Timer0 和 Timer1。</p>

<h2 id="section">控制寄存器</h2>

<p>计时/计数器由两个寄存器来控制，它们分别为 TCON 和 TMOD。Timer0 和 Timer1 各有16位用来存放累加数目的寄存器（根据使用的模式不一样，这16位的功能不一样，不一定全部用来计数）。存放 Timer0 累加数目的寄存器是 TH0（高八位）和 TL0（低八位）；存放 Timer1 累加数目的寄存器是 TH1（高八位）和 TL1（低八位）。</p>

<h3 id="tcon">TCON</h3>

<p>TCON 允许位元寻址。每一位代表的意思如下：</p>

<pre><code>TF1  TR1  TF0  TR0  IE1  IT1  IE0  IT0
</code></pre>

<ul>
  <li>TF1 和 TF0: Timer1/Timer0 的溢出旗标。当用来存放累加数目的寄存器（也就是 THx 和 TLx）溢出的时候硬件自动置一，当进入对应中断向量的时候硬件自动清零。</li>
  <li>TR1 和 TR0：Timer1/Timer0 的运行控制位。置一则开启 Timer1/Timer0，Timer1/Timer0 便开始计时或者计数；清零则关闭 Timer1/Timer0，Timer1/Timer0 停止计时或者计数（其实还会受到 TMOD 中 GATE 位的影响，在设置的时候需要注意）。</li>
  <li>IE1 和 IE0: 外部中断 INT1/INT0 边缘触发旗标。当检测到外部中断信号源边缘的时候，硬件自动置一，进入 INT1/INT0 所对应的的中断服务时，硬件自动清零</li>
  <li>IT1 和 IT0：INT1/INT0 触发方式控制位。当置一的时候，外部中断源处于下降沿的时候触发对应的外部中断服务；清零的时候，外部中断源处于低电平（也就是“0”）的时候触发对应的外部中断服务（如果一直处于低电平，就会不停的触发中断服务，使用 INT1/INT0 的时候需要注意）。</li>
</ul>

<p>由于 IEx 和 ITx 是用来控制外部中断 INTx 的，这一部分先不管它们，以后再介绍。TFx 会在进入中断之后硬件自动清零，所以当我们使用计时/计数器的中断服务的时候一般不用管这一位。所以对于计时/计数器，一般真正使用的只有 TRx 位，用来启动和停用 计时/计数器。</p>

<h3 id="tmod">TMOD</h3>

<p>TMOD 不可以位元寻址。TMOD是用来选择8051的计时/计数器工作模式的。在8051中，计时/计数器有四种模式，区别主要是集中在 THx 和 TLx 的16位如何使用的问题上，这四种模式分别为：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">M1</th>
      <th style="text-align: center">M0</th>
      <th style="text-align: center">计时/计数器模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">13位计时器</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">16位计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">8位自动重载计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">两个8位计时/计数器</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>13位计时器：一般很少用到，现在的部分8051系列已经去掉了这个功能。使用 THx 的8位和TLx 的第5位组成的13位来存放累加的数字。</li>
  <li>16位计时/计数器：非常常用，用 THx 和 TLx 的整个16位来存放累加数字。可以存放的数字很大，但是每次进入中断之后都需要软件重新载入下次计时/计数的初始值。</li>
  <li>8位自动重载计时/计数器：TLx 用来存放累加的数字，当 TLx 溢出之后，会自动将 THx 中的数字加载到 TLx 中，作为下次计时/计数的初始值。虽然可以存放的数字不大，但是不用每次进入中断之后用软件重新载入，方便，且速度更快。</li>
  <li>两个8位计时/计数器：一般很少用到，现在的部分8051系列已经去掉了这个功能。在这个功能下，Timer1 不能使用，所有跟 Timer1 有关的控制位都转而控制 TH0，TL0则继续由 Timer0 的控制位控制。及其没有用处，因为得到的效果还不如用 Timer0 和 Timer1 分别设置为两个8位自动重载计时/计数器。</li>
</ul>

<p>TMOD 每一位对应的意思如下（前四位对应 Timer1，后四位对应 Timer0）：</p>

<pre><code>GATE  C/T  M1  M0  GATE  C/T  M1  M0
</code></pre>

<ul>
  <li>GATE：选择开启方式是硬件控制还是软件控制。当置一的时候，开启方式是硬件控制，当 TCON 中 TRx 置一且 INTx 为高的时候，对应的计时/计数器才开始计时/计数，否则不开启；当清零的时候，开启方式为软件控制，TRx 置一就可以开启。</li>
  <li>C/T：计时器和计数器选择位。置一则为计数器，清零则为计时器。</li>
  <li>M1 和 M0：计时/计数器模式选择位，对应的模式见上表。</li>
</ul>

<h2 id="section-1">设置思路</h2>

<p>在使用计时/计数器的时候要先对其进行设置，例如选择哪个计时/计数器，什么模式，初值为何，都要预先设置，但由于涉及的寄存器有四个，所以考虑的时候有些复杂，下面介绍的是设置的基本思路。</p>

<p>首先，你要明确以下几个问题，然后再开始设置：</p>

<ol>
  <li>你要使用哪个计时/计数器，是 Timer0 还是 Timer1？用做计时器还是计数器？</li>
  <li>你所使用的计时/计数器什么时候开启？开启方式是什么，是软件开启还是硬件开启？</li>
  <li>你所使用的计时/计数器的工作模式是上面四种中的哪一个？</li>
  <li>开启的时候，计时/计数的初值是多少？每次运行完中断之后的重载值是多少？</li>
</ol>

<p>明确了以上问题，就可以开始设置计时/计数器了。可以遵照下面几步走：</p>

<ol>
  <li>
    <p>设置 TMOD。建议 Timer0 和 Timer1 分开设置，运用 <code>ANL</code> 和 <code>ORL</code> 两个命令，在不干扰另一个计时/计数器的情况下，设置自己需要的那一个。虽然命令行数增加，运行时间增加，但是多消耗的时间很少可以忽略，好处是不会混淆。<code>ANL</code> 用来清零，需要清零的位放零，其他位放一，<code>ORL</code>用来置一，需要置一的位放一，其他位放零。例如要设置使用 Timer0作为计数器，软件开启，模式为16位计时/计数器，可以这样设置 TMOD：</p>

    <pre><code>ANL TMOD,#11110101B
ORL TMOD,#00000101B
</code></pre>
  </li>
  <li>
    <p>设置计时/计数的初值，根据选择的模式和需要，对 THx 和 TLx 进行赋值。当将其作为计时器的时候会有个计时周期（也就是多久进行一次加一操作）的问题。</p>

    <p>对于
8051而言，存在两种时间：时钟周期和机械周期。时钟周期就是时钟电路的振荡频率所对应的周期，也就是 <script type="math/tex">\frac{1}{f_{osc}}</script>。机械周期是 CPU 完成一个基本操作（取指令，读或写数据等）所需要的时间，8051中12个时钟周期等于一个机械周期，也就是<script type="math/tex">\frac{12}{f_{osc}}</script>。计时器的计时周期就是机械周期，对于<script type="math/tex">12MHz</script>震荡频率而言，也就是<script type="math/tex">1\mu s</script>。这样我们就可以计算出我们需要的初值是多少了。如果选择的模式是16位计时/计数器，我们可以用如下方式进行赋值（x就是你要预设的初值）：</p>

    <pre><code>MOV TH0,#HIGH (65536-x)
MOV TL0,#LOW (65536-x)
</code></pre>

    <p>如果是8位自动重载计时/计数器，可以这样设置初值（y是要重载的值，x是预设的初值）：</p>

    <pre><code>MOV TH0,#(256-y)
MOV TL0,#(256-x)
</code></pre>
  </li>
  <li>
    <p>开启，跟你的需要，在必要时候，将 TRx 置一。</p>
  </li>
</ol>

<p><img src="https://lh6.googleusercontent.com/-f35zg4EmAZw/UVz2cCeJePI/AAAAAAAAAqU/uyTI6Cl2kE0/s640/Countdown%2520timer%2520with%2520microcontroller%2520AT89C51.png" width="480" alt="AT89C51 制作的时钟（图片来自 Engineers Garage）" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Proteus 中使用 UART串口与PC进行互动仿真]]></title>
    <link href="http://pikipity.github.com/blog/use-uart-in-proteus.html"/>
    <updated>2013-04-02T22:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/use-uart-in-proteus</id>
    <content type="html"><![CDATA[<p>在 Proteus 中进行单片机仿真的时候，可能会需要进行 UART 串口的仿真，当然我们可以通过 “Virtual Terminal” 来仿真 UART 串口的输入和输出，但是有时候是需要单片机与电脑连同后，由电脑上的软件通过 UART 串口进行数据的收发，这个时候如果再用 “Virtual Terminal” 的话并不能很好的仿真出软件与单片机之间的通信结果。</p>

<p><img src="https://lh4.googleusercontent.com/-0QW99JxJmok/UVsMhdpHWjI/AAAAAAAAApw/c7DoTmnOUG0/s800/Virtual_terminal.gif" width="950pt" alt="Proteus 中的 Virtual Terminal" /></p>

<p>于是，我决定用虚拟端口工具，在 Windows 中模拟两个端口直接连接在一起的情况。我使用的虚拟端口软件是 “Configure Virtual Serial Port Driver” （简称 “VSPD”）。这个软件可以虚拟出任意两个 COM 口（也就是串列口）之间的连接，设置也很简单，只要选择要连接的两个端口，然后点击“添加端口”就可以了，要取消的话，只要点击“重置端口”，你设置的端口就全部取消了。大家可以到这里下载<a href="http://pan.baidu.com/share/link?shareid=443416&amp;uk=4080321956">破解汉化版</a>。</p>

<p><img src="https://lh4.googleusercontent.com/-0iOkN3SazmU/UVsWic47b6I/AAAAAAAAAqE/x28t6nHYFGU/s800/VSPD.gif" width="VSPD 设置" /></p>

<p>有了这个软件我们就可以在 Proteus 中与 PC 进行单片机的 UART 串口通信仿真了。首先在 Proteus 中右键，在 Library 中找到搜索 “COMPIM” 就可以找到 UART 串口接头，将其和单片机相连，TXD对TXD，RXD对RXD，然后双击 “COMPIM”，设置波特率和将要使用的 COM 口，然后设置 VSPD，将对应的 COM 口和需要的 COM 相连就可以了。</p>

<p><img src="https://lh5.googleusercontent.com/-5LeyirS6M3E/UVsWYJjBMxI/AAAAAAAAAqA/kiNOxjZ1a1k/s800/COMPIM.gif" width="Proteus 中的 COMPIM" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地图投影和球体点距相关]]></title>
    <link href="http://pikipity.github.com/blog/di-tu-tou-ying-he-qiu-ti-dian-ju-xiang-guan.html"/>
    <updated>2013-04-02T21:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/di-tu-tou-ying-he-qiu-ti-dian-ju-xiang-guan</id>
    <content type="html"><![CDATA[<p>感谢 <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#122;&#101;&#110;&#116;&#097;&#111;&#052;&#050;&#049;&#049;&#048;&#064;&#113;&#113;&#046;&#099;&#111;&#109;">Diegozeng</a> 的投稿。（标题很专业的样子 ( ⊙o⊙ ) ）</p>

<p>今天的话题来源于下面这张图片.</p>

<p><img src="https://lh4.googleusercontent.com/-IYF2HAvxXzY/UVrXw4li8qI/AAAAAAAAApY/CbqqSDd7emw/s365/Untitled1.png" width="480" alt="图一" /></p>

<p>下面是美国人对此图的描述：</p>

<blockquote>
  <p>Take a close look at the North Korea war room photos.  The maps showing the ballistic missile trajectories use a flat earth projection- straight in over the Pacific Ocean.</p>
</blockquote>

<p>地图上显示了几条比直的由朝鲜飞向美国的导弹线路，乍一看没什么特别的. 其实如果这些“直线”真的是所谓的导弹轨迹的话，那么朝鲜的导弹实际上是走了“弯路”了，也许会需要更多的成本去支持这次导弹的飞行。把北朝鲜到美国奥斯丁最近的路线画出来，实际上应该是这样的:</p>

<p><img src="https://lh6.googleusercontent.com/-GzZTuUHHBcI/UVrXwyx4ECI/AAAAAAAAApg/KkYFVhrmuac/s364/Untitled2.png" width="480" alt="图二" /></p>

<p>看起来的确有点奇怪，很多人也许有一个疑问，两点之间的最短距离轨迹不应该是连接他们之间的直线么,这大概成为了一种 common sense. 新浪微博 @盈川兄 转了这张图片，从底下的评论来看，还是有很多人的第一反应是：朝鲜的导弹路线是最近的.</p>

<!--more-->

<p>这其实是一个有意思的地理问题, 我们现在通常看到的地图都是平面的，而地球是类求体（有点像一个梨子）. 这是怎么做到的. 相信高中学文的同学都有个大概的了解了，这个过程是通过一种叫“地图投影”的办法实现的. 由于地球的表面近似是一个球面，上面任意一个点其实可以用（$\phi,\lambda$）来表示（结合球坐标（$r，\phi，\lambda$），因为$r$可以看做一个常数，球面就可以降维到二维的（$\phi，\lambda$）），而投影以后的是一个平面，对应的就是平面直角坐标系xOy了，因而其上任意一点可以用（$x，y$）来表示.这是一个二维到二维的变化，从数学维度的角度想一想，这就是一个二维坐标系的转化，并没有升降维的麻烦，应该不是一个太过复杂的过程(一个简单的例子：直角坐标系转极坐标系，就是一个极为简单的过程). 不过仔细一想，球面和平面毕竟不一样，笔者小时侯曾经吧地球仪表面的那层纸撕了下来，愣是没能铺成一个平面的类似地图的东西，总有些“隆起”或者“下凹”的地方. 因而当时就有了一种想法，平面的地图都是“不准的”，或者说，至少不能简单粗暴地完成一个曲面到平面的转换. “地图投影”很大程度上解决了这个问题，当然方法和种类有很多种，具体请看<a href="http://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1">这里</a>，不过大概的思路都是一致的，正如前面说的，将曲面转换成平面，笔者小时候的经历验证了“物理法”是不可行的，因而这样的地图投影法自然会带来一定程度的失真. 也就是说，从理论上讲，地图上的大多数看起来是直线的地方其实在实际中并不是直线，而看起来是曲线的在实际中却可能真的是一条直线. 所以也就不难理解为什么图二的曲线是北朝鲜到美国奥斯丁最短的距离，而不是图一所示的直线了. 不过比较坑爹的情况是，基本每个地图都有比例尺，这就让人忍不住用比例尺以直线去丈量两地间的直线距离，而之前的讨论有说明了我们实际丈量很可能是一条曲线，尤其对于较远距离的两点，这个偏差应该会更大些，也就是说，地图上每一块特定区域都应该对应一个特定的比例尺。好吧，其实经过上面的分析，大家也都能发现所谓比例尺的确是“不准”的，尤其是表示大范围的（比如世界地图）就尤其不准了, 所以当别人询问北京到巴西圣保罗空中直线距离有多远时，千万别拿着直尺在自家的世界地图上测量在做一个比值运算了，因为你会发现，距离越远，这种“尺量法”的偏差基本上就越大.</p>

<p>接下来再说说图二中的最短路径是怎么画出来的吧. 数学上有个定理：</p>

<blockquote>
  <p>球面上两点的最近距离是这两点对应大圆的劣弧长</p>
</blockquote>

<p>听起来有点复杂，好像还要有点空间想象能力才比较好理解. 这段劣弧在地理上叫做“测地线”，也就是地球表面任意两点间距离最短的连线. 大圆是指截面过圆心的圆，是过着两点的所有圆构成的圆系中半径最大的一个. 其实简单说起来可以这么记忆：“半径越大，弧长越短.”，这也是高中地理老师经常搪塞不太喜欢数学的文科生的一段总结.下面的图可以简单说明这点：</p>

<p><img src="https://lh4.googleusercontent.com/-Mlf-8W-XdYE/UVrXw1WiO1I/AAAAAAAAApQ/snqOtVvsDDc/s188/Untitled3.png" width="250" alt="图三" /></p>

<p>很明显<script type="math/tex">l_2</script>这段劣弧对应的圆的半径比<script type="math/tex">l_1</script>的大一些，而<script type="math/tex">l_2</script>的长度却小于<script type="math/tex">l_1</script>。 具体严格的数学证明请看<a href="http://blog.csdn.net/liminlu0314/article/details/8553926">这里</a></p>

<p>当理解了这一点以后，就不难明白为什么图二看似绕弯子的曲线确实最短的距离了，因为它实际上是这样的：</p>

<p><img src="https://lh3.googleusercontent.com/-8-H5IlKYzrQ/UVrXxVKb4LI/AAAAAAAAApc/IumapwHODRk/s339/Untitled4.png" width="480" alt="图四" /></p>

<p>从地球的俯视图（北极朝上）来看，图二的曲线就变成了一天近似直线了，相信如果直接看图四，很多人都会对这条轨迹是北朝鲜到美国OCA的最短距离而深信不疑吧，而图四的直线的确就是对应着图二的那条曲线。太多的时候我们都被自己的眼睛“蒙骗”了，眼见也不一定为实啊。 看起来朝鲜人是要多了解一下GIS（地理信息系统）了，当然这也算是一句玩笑话，人家可没说这是导弹飞行的最终路线,不过作为一个和平爱好者，笔者希望这仅仅是一种设想和恶搞啊，从中了解一些基本的数学地理知识才是最实在的。</p>

<p>最后不禁想吐嘈一下：为什么高中地理是文科学科？众所周知，地理这块到了大学就是纯理的学科，尤其是GIS. 当时分科时笔者挥泪阔别了喜爱多年的地理学科（从小拆地球仪做平面地图的伤不起.）, 地理这东西完全不该和政治历史放在一起称作什么“政史地”啊~~，请让理科的课回到理科生的怀抱中吧！ </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[只有程序员才会相信的黄历 -- 程序员老黄历]]></title>
    <link href="http://pikipity.github.com/blog/huang-li-of-programmers.html"/>
    <updated>2013-04-02T20:27:00+08:00</updated>
    <id>http://pikipity.github.com/blog/huang-li-of-programmers</id>
    <content type="html"><![CDATA[<p>今天在逛 <a href="http://gurudigger.com/">Guru Diger</a> 的时候看到了<a href="http://gurudigger.com/ideas/573">这样</a>一个创意 – <a href="http://sandbox.runjs.cn/show/ydp3it7b">程序员老黄历</a>，非常有趣。（等等，我看看，我想在朝向是东76度，那个今天不变成了？貌似永远不会出现这个方向编程Bug最少(╯▽╰)）</p>

<p><img src="https://lh3.googleusercontent.com/-wtsyR-2zlPI/UVrQv7m9U0I/AAAAAAAAAo4/shdNiBLxR0E/s512/Screen%2520Shot%25202013-04-02%2520at%25208.32.23%2520PM.png" width="480" alt="程序员老黄历" /></p>

<p>我认为是个不错的 CSS 编程范例，直接右键看源代码就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[愚人节快乐！]]></title>
    <link href="http://pikipity.github.com/blog/happy-april-fools.html"/>
    <updated>2013-04-01T18:50:00+08:00</updated>
    <id>http://pikipity.github.com/blog/happy-april-fools</id>
    <content type="html"><![CDATA[<p>大好的愚人节，Google当然不会放过，一起来看看 Google 又放出了哪些愚人节特别项目吧 O(∩_∩)O</p>

<h3 id="google-map-">Google Map 藏宝图模式</h3>

<p><img src="https://lh3.googleusercontent.com/-ftlXpynzbeE/UVl2_57igtI/AAAAAAAAAoU/gkau5SGx-8I/s800/Screen%2520Shot%25202013-04-01%2520at%25207.52.26%2520PM.png" alt="Google Map 藏宝图模式" width="480" /></p>

<p>今天，大家可以在 Google Map中切换到藏宝图模式。开启之后，整个地图变为了古旧的欧式藏宝图风格，街道、国界分界什么全部消失，只剩下一些树木、山峰和标志性地标物。街景模式也变了，变为从一个望远镜里看到的古旧老照片。到<a href="http://maps.google.com.hk/maps?hl=en&amp;tab=wl">这里</a>来体验一下，据说真的有隐藏宝藏哦！！（什么都没找到？那个，你可以和视频里学一学，放到火上烤一烤怎么样？）</p>

<p><img src="https://lh5.googleusercontent.com/-Eevt4yaCNwg/UVl2_9OoobI/AAAAAAAAAoY/DVLh3x-pNL8/s800/Screen%2520Shot%25202013-04-01%2520at%25206.48.38%2520PM.png" alt="藏宝图里的澳门大学" width="480" /></p>

<embed src="http://www.tudou.com/v/n1hyncm52ys/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="youtube-">Youtube 其实是一个规模宏大的视频比赛！！</h3>

<p>经过八年收集参赛作品，从今天起，Youtube 不再接受新的投稿，接下来，Youtube 的三万人评审团将会选出一个胜出视频，届时其他视频都将消失掉了！！</p>

<embed src="http://www.tudou.com/v/EdcwhD3ae4k/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="gmail-blue">Gmail Blue</h3>

<p>历史六年研发，新的 Gmail 诞生了，全蓝色 Gmail – Gmail Blue！！(╯▽╰)</p>

<embed src="http://www.tudou.com/v/Cm59Hhc9dto/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="section">吧啦吧啦版日语输入法</h3>

<p><img src="https://lh5.googleusercontent.com/-5t1K9KWaxWE/UVl8RVcSQII/AAAAAAAAAoo/sFaDO3gh6ZI/s800/Screen%2520Shot%25202013-04-01%2520at%25208.22.55%2520PM.png" alt="吧啦吧啦版日语输入法" width="480" /></p>

<p>这个是真的可以用的哦，到<a href="http://www.google.co.jp/ime/patapata/message.html">这里</a>就可以用了。模拟摩尔斯电码的形式，只需要敲击一个键就可以输入英文、日语、字符表情。但是貌似是这样，你需要的超强的记忆力或者电光火石一样的反应力，就是这样。（话说，那个打字眼睛不错哦，对于不会盲打的亲们很适合哦！！）</p>

<embed src="http://www.tudou.com/v/yKdicT_4Wnk/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="google-">Google 嗅觉</h3>

<p>这个作为压轴，因为这是最有意思的了，现在，Google 允许你通过气味进行搜索，并可以在结果中提供搜索结果的气味，快到<a href="http://www.google.com/intl/zh-TW/landing/nose/">这里</a>开始 Google 的嗅觉搜索吧（Google 提醒您：如要查詢較為敏感的內容，請啟用安全搜尋以防萬一。你是不是想歪了 (╯▽╰)）。希望大爷您愚人节玩的开心 (have fun)！！</p>

<embed src="http://www.tudou.com/v/PXEZRBe-0Cc/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你真的懂 Excel 么？]]></title>
    <link href="http://pikipity.github.com/blog/excel-game.html"/>
    <updated>2013-03-31T11:46:00+08:00</updated>
    <id>http://pikipity.github.com/blog/excel-game</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-UlxnYCvwxMM/UVe59_pmBZI/AAAAAAAAAnc/Wmuz-QC1iBI/s550/5153b5fd15930.png" alt="Excel RPG" width="550pt" /></p>

<p>是的，你没有看错，一名加拿大会计师 Cary Walkin 用 Excel 做了一个 RPG 游戏 Arena.Xlsm。可在 Excel 2007、Excel 2010、Excel 2013 版本中运行，游戏虽然不大，只有 1M 大小，但是内容并不输给一般的 RPG 游戏：</p>

<ul>
  <li>超过 2000 种随机生成的敌人；</li>
  <li>超过 1000 种物品可组成39种物品组合；</li>
  <li>8 个 BOSS,4个不同的结局；</li>
  <li>4 个区域供玩家探索；</li>
  <li>31 种法术技能；</li>
  <li>15 种独特物品，具有独一无二的属性；</li>
  <li>36 项成就。</li>
</ul>

<p>看着就很想玩了吧，可以到<a href="http://pan.baidu.com/share/link?shareid=428267&amp;uk=4080321956">这里</a>下载。我认为这件事可以告诉我们两点：</p>

<ol>
  <li>编程什么的貌似谁都可以学会嘛！</li>
  <li>学会计的貌似很闲嘛！</li>
</ol>

<p><img src="https://lh3.googleusercontent.com/-hO807qyDQoY/UVe1xV7uKPI/AAAAAAAAAm4/RRZ626Cn6cw/s520/Screen%2520Shot%25202013-03-31%2520at%252012.02.57%2520PM.png" alt="Excel 三国杀" width="550pt" /></p>

<p><img src="https://lh4.googleusercontent.com/-8krewItCKJU/UVe1xeyvn5I/AAAAAAAAAm0/P7PrgT_re08/s523/Screen%2520Shot%25202013-03-31%2520at%252012.03.36%2520PM.png" alt="Excel 三国杀" width="550pt" /></p>

<p>另外一个是已经很出名的 Excel 三国杀，已经有了PC、Android、IOS 三个版本，快点下载来试试吧。点<a href="http://www.mafengwoo.com/">这里</a>去官网。</p>

<p>所以说，不要再说你会 Excel 了，山外有山，人外有人。现在用 Latex 用的，打开 Word 都不晓得怎么用了，更不要说 Excel 了，我还是研究研究怎么用 Python 读取和写入 Excel 比较靠谱吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贫嘴的鞋子]]></title>
    <link href="http://pikipity.github.com/blog/talking-shoe.html"/>
    <updated>2013-03-29T02:24:00+08:00</updated>
    <id>http://pikipity.github.com/blog/talking-shoe</id>
    <content type="html"><![CDATA[<p>Google在SXSW 2013大会上展示了叫做 “Talking Shoe” 的运动鞋，下面是一个宣传视频。</p>

<embed src="http://player.youku.com/player.php/sid/XNTI0NjM0NzQw/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

<p>有没有发现，神烦啊，我穿个鞋子而已，做什么，记录我的一举一动，还要发微博？不，我相信，那一定不是微博，那一定是 Google+，绝对是。听听那怪蜀黍一样的怪异声音（要是谷歌娘的声音我就不发出来吐槽了）：</p>

<ul>
  <li>在你站着不动的时候他会说：如果站着不动也是项运动的话，你丫肯定是世界冠军了！</li>
  <li>在你坐着不对的时候他会说：真他娘的无聊啊！</li>
  <li>在你走起来的时候他会说：开始带点感了啊！</li>
  <li>在你小跑起来的时候他会说：我喜欢这种威风吹过脸庞的感觉！</li>
  <li>在探测到你走入街头篮球场的时候他会说：上啊！</li>
  <li>当你完全运动起来的时候他会说：快打119啊你丫太火了！</li>
  <li>在你运动完休息的时候他会说：重新穿上我让咱们再战一场啊！</li>
</ul>

<p>相信我，即使倒贴我钱我也不会要这样鞋子的，因为它会永远只说一句话:</p>

<blockquote>
  <p>This is super boring !</p>
</blockquote>

<p>但是相信我，不是我 boring，是 Google 你闲着没事干了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[震动的 ipad，你可以想象么？]]></title>
    <link href="http://pikipity.github.com/blog/vibrator-ipad.html"/>
    <updated>2013-03-29T01:53:00+08:00</updated>
    <id>http://pikipity.github.com/blog/vibrator-ipad</id>
    <content type="html"><![CDATA[<p>苹果公司发布了一项了与 ipad 有关的专利，是关于支持振动器的音频编解码器。一个双频道编码译码器通常有两个输出引线，在立体声模式中可用来驱动两个扬声器，或者是在单声道模式下驱动一个振动器和一个扬声器。每个频道都有自己的数字 - 模拟转换器以及音频功率放大器，接收声频信号，驱动扬声器。这项专利能让 iPad 像 iPhone 那样，获得振动模式，拥有消息提醒功能。这项专利的发明人是 Timothy Johnson。</p>

<p><img src="https://lh4.googleusercontent.com/-3T2VZxwjuzc/UVSCp1f4oYI/AAAAAAAAAmU/sw9uAy2OWws/s512/6a0120a5580826970c017ee99cdeeb970d-800wi.jpg" width="550pt" /></p>

<p><img src="https://lh5.googleusercontent.com/-DTf1MOTRZAM/UVSCpxhpReI/AAAAAAAAAmQ/dbgBi8aqPe4/s800/6a0120a5580826970c017ee99cdc4b970d-800wi.jpg" width="550pt" /></p>

<p>但是让 ipad 震动起来真的大丈夫？不会震坏么（我是说桌子 (╯﹏╰) ）？那么大的玩意在桌子上如果真的震起来会不会和发生地震一样啊？我很好奇 ( ⊙o⊙ ) ~~~~~~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那年我还是个纯真的小男孩 -- 《唐老鸭大冒险》]]></title>
    <link href="http://pikipity.github.com/blog/duck-tales-2.html"/>
    <updated>2013-03-28T22:38:00+08:00</updated>
    <id>http://pikipity.github.com/blog/duck-tales-2</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/DuckTales2.jpg" alt="唐老鸭大冒险 2" width="350pt" /></p>

<p>听到这个名字好像回忆不起来是什么了，但是看了上面的截图你要是再想不起来，就真的是没有童年了，当年红白机（也就是小霸王啦）上无敌好玩的解密游戏。玩家控制唐纳德在五个不同的地域寻找宝藏，每个地图可以重复进出，最终目标是找齐隐藏地图，打败最终 BOSS，其中包含了大量的解密元素和隐藏要素，不是对地图超级熟悉经常在里面迷路，如果说一个大型迷宫可以迷路也就算了，一个横版过关也可以迷路，这个游戏真的是逆天的无敌有没有。小时后无限手残啊，一个地图打一天都过不了啊，很是怀念啊。</p>

<p>为什么今天突然拿出这个来说呢，因为我看到《唐老鸭大冒险》竟然要出复刻版了，预计会在今年夏季登陆Wii U、XBOX360 以及 PS3 平台。先看一下宣传视频吧，很是期待啊，貌似多了很多关卡啊。</p>

<embed src="http://player.youku.com/player.php/sid/XNTMwOTUyOTI0/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

<p>没关系，对于我们这些没有高端设备的人，可以下个红白机虚拟器在电脑上玩一下老版，回一下童年也是很不错的嘛。对于我们这些手残党，也可以看一下<a href="http://space.bilibili.tv/374377">“岚少”</a>的视频娱乐一下嘛，日文全翻译，很好的。</p>

<embed src="http://player.youku.com/player.php/sid/XNTI4OTAwMTc2/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过几何概型来估算&pi;]]></title>
    <link href="http://pikipity.github.com/blog/find-pi.html"/>
    <updated>2013-03-28T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/find-pi</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/find_pi.jpg" alt="几何概型估算&pi;" width="550pt" /></p>

<p>被涛神要求帮着写了一个通过模拟几何概型实验来估算 π 的 Matlab 函数。这个几何概型的实验是这样的：在一个二维直角坐标系中，存在一个以原点为中心，以1为半径的圆，和一个以原点为中心，边长为2的正方形（如图），向圆中随机投放点，计算此点在圆内的概率（忽略边线）我们可以得到如下公式，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{array}{rcl}
P&=&\frac{S_{circle}}{S_{square}}\\
&=&\frac{\pi r^2}{\left( 2r\right)^2}\\
&=&\frac{\pi}{4}
\end{array} %]]&gt;</script>

<p>所以我们只要将上面得到的概率乘以4，就可以估算出 π 的值。很明显，既然是概率实验，那么存在一次试验中使用点的个数问题，使用的点越多，理论上得到的 π 的值应该越接近真实值。</p>

<p>涛神希望这个函数实现下面几点要求：</p>

<ol>
  <li>可以一次性通过一个矩阵输入多次实验，每次实验中使用的点数不一样。</li>
  <li>将多次实验所得到的 π 的值放在一个矩阵里进行输出。</li>
  <li>使用 <code>rand</code> 函数。</li>
  <li>不使用循环。</li>
</ol>

<p>由于 <code>rand</code> 的函数无法一次性产生多个二维随机数矩阵，又由于不能使用循环，使得这个函数的编写比较麻烦（吐槽一下，即使可以产生多个二维随机数矩阵我也没法进行后续操作啊！！）。于是我的想法如下：</p>

<ol>
  <li>根据最大的点数，用 <code>rand</code> 函数产生一个三维矩阵，前两个维度分别表示每个点的横纵坐标，最后一个维度表示第几次实验。例如，如果进行三次试验，每次试验的实验点数为1，10，100，那么就用 <code>rand</code> 生成一个100*2*3的随机矩阵。</li>
  <li>根据所需要的不同实验中不同的点数对实验结果进行取样。继续上面的举例，我们就在第一个试验的结果（如果结果存在矩阵 <code>a</code> 中，那么实验一的结果也就是 <code>a(:,:,1)</code>）中只使用第一组数据，在第二个实验的结果中只使用前10组数据，在第三个实验的结果中只使用前100组数据。</li>
  <li>通过上面的理论公式，计算得到结果，并输出。</li>
  <li>在整个过程中，使用 <code>reshape</code> 函数进行二维和三维矩阵之间的转化。</li>
</ol>

<p>程序如下：</p>

<pre><code>function y=find_pi(n)
%y=find_pi(n)
%input: n, a array for number of experiments, like [10 100 1000]
%output: y, the approximate value of pi for every experiment

%generate the matrix that will be used to sample results
sample=triu(ones(max(n),max(n)),0);
sample=sample(1:end,[n;n]);
sample=reshape(sample,max(n),2,length(n));
%generate the data matrix
total_number_exp=length(n);
maximum=max(n);
all_experiment=rand(maximum,2,total_number_exp);
%sample results
all_experiment=all_experiment.*sample;
%calculate value of pi
final_experiment=(all_experiment.*2-1);
final_result=sum(final_experiment.^2,2);
y=sum(final_result&lt;1)./reshape(n,1,1,length(n));
y=reshape(y,[1,length(y)]).*4;
</code></pre>

<p>主要用到下面几个常用函数：</p>

<ol>
  <li><code>triu(ones(n,n),0)</code>: 生成一个单位矩阵的上三角矩阵，其中 <code>n</code> 必须是一个正整数。</li>
  <li><code>reshape</code>: 根据需要将矩阵重建为与原矩阵不同维数的矩阵。</li>
  <li><code>rand</code>: 从0到1中抽取随机数生成矩阵。</li>
  <li><code>sum</code>: 求和，可以根据括号中的条件计算符合条件的点的个数。</li>
</ol>

<p>用 <code>y=find_pi([100 1 10 1000])</code> 进行四次测试，结果为 <code>[3.0800 0 3.6000 3.0800]</code>，<code>[3.3200 4.0000 3.2000 3.2240]</code>, <code>[3.3200 4.0000 3.2000 3.1640]</code> 和 <code>[3.3200 4.0000 2.8000 3.0880]</code>，运行正常，结果看起来是真确的啦。</p>

<p>存在一个问题，当运行实验点数较多的情况，比如10000次的时候，函数会卡死，但是把函数语句单独提出来使用一切正常，只是会有小卡顿，看来是我的小 MBP 内存不够了。但是问题还是很明显的，不论最小的点数是多少，都要至少产生两个以最大点数为基础的大矩阵来运算，实在是太浪费了，但是不让使用循环，浪费就浪费吧。函数已放在<a href="https://github.com/pikipity/Find-pi">我的 Github</a>，欢迎来 Fork 我，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google要成立博物馆了？]]></title>
    <link href="http://pikipity.github.com/blog/googleartproject.html"/>
    <updated>2013-03-27T23:24:00+08:00</updated>
    <id>http://pikipity.github.com/blog/googleartproject</id>
    <content type="html"><![CDATA[<p>今天在网上搜索 <a href="https://www.google.com/search?q=google+project+glass&amp;aq=0&amp;oq=google+project&amp;aqs=chrome.0.0j57j65l3j0.4384&amp;sourceid=chrome&amp;ie=UTF-8#hl=en&amp;safe=active&amp;sclient=psy-ab&amp;q=google+project&amp;oq=google+project&amp;gs_l=serp.3..0i20j0l3.615.2967.0.4103.8.8.0.0.0.1.1619.3694.3j1j1j8-2.7.0...0.0...1c.1.7.psy-ab.EQaeD3OJNhU&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.44342787,d.aGc&amp;fp=f7d9c8fbbb7e8602&amp;biw=1280&amp;bih=728">“Google project”</a> 竟然发现了这样的一个网站 – <a href="http://www.googleartproject.com/zh-cn/collections/">“Art Project”</a>。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject.jpg" alt="Google Art Project" width="550pt" /></p>

<p>里面共收录214个博物馆中8366位艺术家的39859件作品的照片，最让我惊异的是我看到了<strong>“湖南省博物馆”</strong>，但是貌似只有这一个中国博物馆而已，里面的展品也只有50件。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_1.jpg" alt="名单中的湖南省博物馆" width="550pt" /></p>

<p>侧边条允许“查找”、“添加到陈列室”（就是添加到自己账户的收藏里）、“分享”和“幻灯片演示”。“分享”仅支持”Google+”、“Facebook”、“Twitter”和“电子邮件”，中国人常用的社交网络就没有了，但是可以直接分享页面网址（这有个毛用，要网址我直接在地址栏里复制就好了，干嘛还要点你的侧边栏）。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_2.jpg" alt="侧边栏" width="350pt" /></p>

<p>点进艺术品后可以放大，但是仅仅就是放大图片而已，如果图片不清晰，放大也就不清晰了。还可以查看“详细资料”，但是我看了三四个，都是什么都没有，哎，就这样吧，可怜兮兮的。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_3.jpg" alt="香港艺术博物馆的 Crisp air in mountains and lakes（还是有高清大图的）" width="550pt" /></p>

<p>总的来看这个 “Google Art Project” 要想获得广泛认可和认知还需要点时间，但是既然 Google 连 Reader 都杀了，说不定这个玩意儿哪天也就没了，趁着还在，上去看看那些艺术品吧，尽管只是照片而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环保？文明？我们的地狱？]]></title>
    <link href="http://pikipity.github.com/blog/2013-earth-hour.html"/>
    <updated>2013-03-22T18:51:00+08:00</updated>
    <id>http://pikipity.github.com/blog/2013-earth-hour</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/60+CN_logo.jpg" width="550pt" /></p>

<p>2013年2月23日星期六，晚上8:30到9:30是一年一度的<a href="http://earthhour.wwf.org.hk/">“地球一小时”</a>活动，<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E4%B8%80%E5%B0%8F%E6%97%B6">“Wiki”</a> 上是这么说的:</p>

<blockquote>
  <p>地球一小时（英语：Earth Hour）是一个全球性节能活动，提倡于每年三月的最后一个星期六当地时间晚上20:30，家庭及商界用户关上不必要的电灯及耗电产品一小时。希望借此活动推动电源管理，减少能源消耗，唤起人们以实际行动应对全球变暖的意识。</p>

  <p>该活动最初由环保团体世界自然基金会澳洲及悉尼晨锋报合作发起，并于澳洲悉尼当地时间2007年3月31日，晚上8:30至9:30期间举行了第一次活动。地球一小时2007有近220万人参与，相信节省了当天悉尼市市电电源的2.2%至10.2%。2008年，该活动被推广到世界各地，全球40多个城市，近380个城镇接力执行该活动。</p>
</blockquote>

<p>玩过《海岛大亨》的同学们都知道，环保主义者什么的最讨厌了~~~~~~。我当然不是反对环保，但是人类文明的进步本身就是对环境掠夺的过程，当这种掠夺超过环境承受能力，那么就被我们称为“破坏生态环境”。但是人类发展如此迅速，怎么不可能超过环境的限制。更何况科技发展到今天，电力带来的污染已经可以说是一直在降低了，更重要的是其他污染因素。其实我想吐槽的是下面的视频，一小时发电厂产生的污染如果和生产你们用的那些荧光灯里的纽扣电池的污染比起来可以说是小巫见大巫了，这样真的“大丈夫”？</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/2UywrjnOaUE" frameborder="0" allowfullscreen=""></iframe>

<p>不管怎么说，还是要宣传一下环保的，从小事做起就好了，下面是<a href="http://www.earthhour.org.cn/index.php">“我做绿V客”</a>的宣传海报，这个活动还是不错的</p>

<p><img src="http://pikipity.github.com/images/post/print-ad.jpg" width="550pt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[海盗湾里最老的种子]]></title>
    <link href="http://pikipity.github.com/blog/thepiratebay-ten-years-old.html"/>
    <updated>2013-03-18T20:49:00+08:00</updated>
    <id>http://pikipity.github.com/blog/thepiratebay-ten-years-old</id>
    <content type="html"><![CDATA[<p>为了庆祝 <a href="http://thepiratebay.se/">“海盗湾”</a> 今年十岁，<a href="http://torrentfreak.com/the-pirate-bays-oldest-torrent-is-revolution-os-130317/?utm_source=dlvr.it&amp;utm_medium=twitter">“TorrentFreak”</a> 网站找到了在湾里漂泊最久的一个种子 – <a href="http://thepiratebay.se/torrent/3211770/Revolution_OS">《操作系统革命》</a>。<a href="http://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD">“维基”</a>上是这么说的：</p>

<blockquote>
  <p>《操作系统革命》（Revolution OS）是一部2001年由J·T·S·摩尔（J. T. S. Moore）导演的纪录片电影，该电影追述了GNU、Linux、自由软件运动以及开放源代码运动长达二十余年的历史。该片的主演有理查德·斯托曼、林纳斯·托瓦兹、布鲁斯·斐伦斯、拉里·奥古斯丁与埃里克·雷蒙等。</p>
</blockquote>

<p>微软首席执行官史蒂夫·鲍尔默(Steve Ballmer)不是说过么：</p>

<blockquote>
  <p>Linux就是癌症</p>
</blockquote>

<p>就让这个癌症来的更猛烈些吧。</p>

<p>最后，让我们来瞻仰一下那些为了自由软件与开源代码付出毕生精力的大神们吧。</p>

<embed src="http://www.tudou.com/v/Nbz3C92uFuQ/&amp;resourceId=0_05_02_99&amp;tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可能真的是我们被 Google 宠坏了]]></title>
    <link href="http://pikipity.github.com/blog/google-reader-user.html"/>
    <updated>2013-03-18T10:04:00+08:00</updated>
    <id>http://pikipity.github.com/blog/google-reader-user</id>
    <content type="html"><![CDATA[<p>转自<a href="http://www.guao.hk/">“谷奥”</a> Kunkka 的<a href="http://www.guao.hk/posts/is-google-doing-evil-for-closing-google-reader.html">“关闭 Google Reader 是作恶之举？”</a>。</p>

<p>Google Reader将要被关闭，大家都很不爽，因为又一个好服务即将离我们而去。</p>

<p>可是惋惜归惋惜，我只是觉得，人应该要感恩，毕竟Google做的已经够多了：它已经无偿地为大家运营了这么一个服务8年。8年了，这个服务没从大家手中拿过一分钱！说白了，就是Google不欠大家什么，即使它关闭Google Reader这个举动再不高明，它还是不欠用户们什么东西。</p>

<p>但是看到那么多人，甚至包括站长也说关闭Google Reader就是作恶，我瞬间就不淡定了。这都啥跟啥嘛，难道粉了Google这么多年的人，连这种基本东西都没搞清楚吗？虽然Google Reader被关闭，确实值得惋惜，但是这跟“作恶”有什么关系吗？是不是弄得你不爽了，就是Google作恶了？</p>

<p>举个简单的例子就是：关闭Google Reader，在我看来，几乎就跟楼下大街上生意不红火的小吃店关门大吉一般，正常的不能再正常。人们可以因为再吃不到既便宜牛肉又给得多的牛肉面而惋惜，但是人们却不会（也不应该）因为老板不再为他们提供这么良心的牛肉面而去谴责老板。</p>

<p>另外，Google自己说的“不作恶”，从来就是指的，赚钱不必作恶；从来就是指的，他们不会对竞争对手用下三滥的手段；从来就是指的，他们不会像别的公司那样，用欺骗，用劫持流量的办法来赚钱。关于这段，<a href="http://www.google.com/about/company/philosophy/">可以看官方页面的第6条</a>。</p>

<p>那么，关闭Google Reader从哪里能说的上是作恶？难道关闭Google Reader这服务就是一种下三滥手段，就是用来排挤竞争对手，就是用来赚亏心钱的？</p>

<p>我一直认为Google是一家有道德，有些许理想主义，有些许天马行空的公司。这是我一直热爱Google的原因。而从关闭GR这事来看，Google提供数据导出方案，提供缓冲时间让用户过渡。我看不出这些做法哪里不道德。这个关闭行动之中，Google的行为合乎法律、合乎情理、合乎道德。虽然关闭GR让我不爽，但是我没法说服自己改变对Google的看法，因为道德还在，理想主义与天马行空依然。</p>

<p>Google还是那个Google，它没变，变的只是人心，被宠坏的人心。</p>
]]></content>
  </entry>
  
</feed>
