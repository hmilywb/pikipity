<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[俄罗斯行车记录仪纪实]]></title>
    <link href="http://pikipity.github.com/blog/positive-energy.html"/>
    <updated>2013-07-18T08:02:00+08:00</updated>
    <id>http://pikipity.github.com/blog/positive-energy</id>
    <content type="html"><![CDATA[<p>这部短片充分说明了，要想拍摄一部感人的微电影，需要有一部好的行车记录仪做摄像机和一首好听的曲子当BGM。（&lt;-泥垢了）</p>

<embed src="http://player.youku.com/player.php/sid/XNTUyMTM1NTgw/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果电脑 MagSafe 电源接口]]></title>
    <link href="http://pikipity.github.com/blog/magsafe.html"/>
    <updated>2013-07-17T18:57:00+08:00</updated>
    <id>http://pikipity.github.com/blog/magsafe</id>
    <content type="html"><![CDATA[<p>第一次看到苹果电脑的电源接口就觉得设计的很独特。和平常的电脑不一样，不是将接口插入到电脑上，而是用一块磁铁将电源接口吸附在电脑上。这样的好处是防止突然撦拽电源线的时候，损伤电源接口或是电脑。而且电脑上的接口不仅小而且深度不深，不占地方还易于清理。真的是很好的设计。今天在网上看到一篇译文，专门介绍苹果电脑电源接口的结构，还有指示灯变颜色的原理的，于是抄录在这里。译文原文在<a href="http://www.mac52ipod.cn/post/apple-magsafe-connector-structure-and-how-it-works.php">这里</a>，英文原文在<a href="http://www.righto.com/2013/06/teardown-and-exploration-of-magsafe.html">这里</a>。</p>

<h2 id="magsafe-">苹果电脑 MagSafe 电源接口的结构，还有指示灯变颜色的原理</h2>

<h3 id="fans">转载自“苹果fans博客”</h3>

<p>苹果电脑的 MagSafe 电源接口挺有意思的，一方面它靠磁力吸在笔记本机身上，插拔方便而且有人踢到电源线时自动断开，不会像传统 PC 电源那样把笔记本从桌子上拉的掉下来；另一方面有个小 LED 灯能显示充电状态。下面说说苹果电脑 MagSafe 电源接口的内部结构和工作原理：几个触点都是干什么的？充电的过程和指示灯变色的原理是什么？苹果电脑是怎么读出 MagSafe 电源的型号和序列号的？</p>

<p><img src="https://lh4.googleusercontent.com/-Ke_F1z1wvpc/UeZ9y6D-s4I/AAAAAAAAA4E/xBs52Hu2gFU/s400/1373621865_1295fa9a.jpg" alt="5个功能对称的触电" /></p>

<p>苹果电脑 MagSafe 电源接口有 5 个触点，最外侧的两个用于接地，靠近中间的两个触点用于传输电力，最中间那个用于电脑和充电器的芯片之间传输信号。</p>

<p>触点是对称的，所以插反了也没问题。另外老款 MagSafe 电源的中间那个触点明显比另外四个细的多。触点外面那一圈金属用于吸附苹果笔记本的电源口，但没有磁力，Mac 主机的电源口有磁力（你拿钥匙什么的伸过去也能被吸住）。</p>

<p><img src="https://lh3.googleusercontent.com/-j6U1GIEhVWQ/UeZ9y1mZT7I/AAAAAAAAA4I/unoLWQV1ANU/s400/1373623159_47729f47.jpg" alt="MagSafe 解剖图" /></p>

<p>扒开 MagSafe 电源接口外面的保护层，可以看到电路板上的 LED 灯（图中间的白色部分）和一颗小小的芯片（较远一侧那个黑色的方块）。它储存电源的序列号等身份信息，控制充电电流，控制指示灯颜色。</p>

<p>每次把 MagSafe 电源插到苹果电脑侧面的接口上时，会经过以下步骤：</p>

<ul>
  <li>插到电脑上之前，MagSafe 只维持大约 100 µA 的极弱电流</li>
  <li>插头吸到苹果电脑上一瞬间，MagSafe 电源检测到上面说的那股极弱电流遇到了阻性负载，电阻值也吻合，于是开始全功率供电。苹果电脑检测到电源口有供电后，就通过接口中间那个触点读取 MagSafe 芯片里储存的身份信息，确认后就接受供电。</li>
  <li>苹果电脑通过接口中间那个触点发送信号给 MagSafe 电源里的芯片，控制插头上那颗 LED 灯改变颜色以显示供电状态：电池充电中（橙色）还是电池已充满只给主机供电（绿色）。</li>
</ul>

<p><img src="https://lh5.googleusercontent.com/-UM580t1rc1E/UeZ9yzOLaMI/AAAAAAAAA4Q/6iIM52wwxoc/s400/1373627863_89193c4f.png" alt="MagSafe 电源信息" /></p>

<p>你打开 Mac 的 “系统信息”，在硬件栏里也能看到当前所接的 MagSafe 电源的信息，就是通过中间那个触点从电源自带那颗芯片传过来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 隐藏软件]]></title>
    <link href="http://pikipity.github.com/blog/command-plus-h.html"/>
    <updated>2013-07-17T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/command-plus-h</id>
    <content type="html"><![CDATA[<p>在 Mac OS X 系统中有一个非常好用的功能，就是“隐藏应用程序”。在选定某个应用程序的状态下，按 <code>command+H</code> 就可以隐藏当前选定的软件，按 <code>command+option+H</code> 就可以隐藏当前所有未选定的软件，起到的效果和最小化（顺带一提最小化当前窗口的快捷键是 <code>command+M</code>）一样，唯一的区别就是：“最小化”是对于窗口而言的；“隐藏”是对于软件而言的。也就是说，如果将一个窗口最小化，那么仅仅是当前此窗口最小化，但是如果一个软件被隐藏，那么此软件各个桌面上的窗口都会被最小化。由于 Mac OS X 使用 dock 对于当前打开的窗口和软件进行管理，最小化的窗口和未最小化的窗口难以区分（除非你已经在设置中将<code>将窗口最小化为应用程序图标</code>取消勾选，但是那样的话，当最小化的图标很多时，你的 dock 就会变得拥挤不堪）。所以“隐藏”比“最小化”更加方便程序的统一管理。</p>

<p>在隐藏应用程序之后，又出现一个问题，我们很难通过 dock 一眼看出哪个程序已经被隐藏了，我们可以通过开启“已经隐藏的软件图标在 dock 上虚化的功能”，效果如下图。开启方法是在终端中输入：</p>

<pre><code>defaults write com.apple.Dock showhidden -bool YES;killall Dock
</code></pre>

<p>dock 重启之后就可以了，当然如果你已经将<code>将窗口最小化为应用程序图标</code>取消勾选，那么这条命令就没有任何用处了。</p>

<p>关闭的方法是在终端中输入：</p>

<pre><code>defaults write com.apple.Dock showhidden -bool NO;killall Dock
</code></pre>

<p><img src="https://lh5.googleusercontent.com/-L0dW4pXnznc/UeXjaxXktmI/AAAAAAAAA3o/VvtuU_ZgnnE/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-07-17%2520%25E4%25B8%258A%25E5%258D%25888.19.01.png" alt="隐藏软件虚化特效" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[鼠标发明人道格拉斯·恩杰尔巴特去世]]></title>
    <link href="http://pikipity.github.com/blog/history-mouse.html"/>
    <updated>2013-07-04T21:41:00+08:00</updated>
    <id>http://pikipity.github.com/blog/history-mouse</id>
    <content type="html"><![CDATA[<p>鼠标发明人道格拉斯·恩杰尔巴特(Douglas C. Engelbart)本周二去世，享年88岁。你不知道它是谁？其实我也不知道，总的来说，就是下面这个老人。他发明了鼠标，却没有从这项发明中得到任何好处，斯坦福研究院申请了鼠标的专利，并授权给了苹果电脑，而这个老人从来就没有出现在人们的眼界之中，不曾记住，也就无法提及忘却。</p>

<p><a href="http://s1302.photobucket.com/user/pikipity/media/U5388P2DT20130704083317_zps4d2a037b.jpg.html" target="_blank"><img src="http://i1302.photobucket.com/albums/ag140/pikipity/U5388P2DT20130704083317_zps4d2a037b.jpg" border="0" alt="道格拉斯·恩杰尔巴特" /></a></p>

<p>最后回忆一下那些我们听说过、见过、用过和梦想过的鼠标吧！！ &gt;_&lt;</p>

<iframe src="http://prezi.com/embed/4hg_0pi7irkq/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;features=undefined&amp;disabled_features=undefined" width="550" height="400" frameborder="0"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一起调戏谷歌娘]]></title>
    <link href="http://pikipity.github.com/blog/download-google-voice.html"/>
    <updated>2013-06-06T15:23:00+08:00</updated>
    <id>http://pikipity.github.com/blog/download-google-voice</id>
    <content type="html"><![CDATA[<p>最近发现谷歌娘的声音真的是好有爱啊，但是下载的时候太麻烦了。在<a href="https://translate.google.com.hk/?hl=en&amp;tab=wT">谷歌翻译</a>里，为了下载一段谷歌娘的声音，还需要打开开发者工具去找对应的 requirment ，麻烦死了。这种重复性工作还是交给软件自己来完成吧，于是写了这样一个软件，用来自动下载谷歌娘“甜美、可人”的声音。</p>

<p>可以在 Windows, Linux, Mac OS X 上运行，对于 Linux 和 Mac OS X，直接在解压目录下打开终端，运行 <code>python ./main.py</code> 即可。Windows 用户也可以直接用 “setup.exe” 安装或是直接点击 “dist” 文件夹下面的 “main.exe” 直接运行程序。</p>

<p>你可以到<a href="http://pikipity.github.io/Download-Google-Voice">这里</a>下载程序。下面是程序截图：</p>

<p><img src="http://i1302.photobucket.com/albums/ag140/pikipity/5C4F5E555FEB71672013-06-064E0B534832532_zps2b24e890.png" border="0" alt="Download-Google-Voice for Mac" /></p>

<p><img src="http://i1302.photobucket.com/albums/ag140/pikipity/5C4F5E555FEB71672013-06-064E0B534833026_zps8f4eb922.png" border="0" alt="Download-Google-Voice for Windows" /></p>

<p>PS: 英文语音的谷歌娘变成大叔音了~~~~~  o(&gt;﹏&lt;)o  +_+  /(ㄒoㄒ)/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符动画转化器]]></title>
    <link href="http://pikipity.github.com/blog/video-to-txt.html"/>
    <updated>2013-05-30T20:45:00+08:00</updated>
    <id>http://pikipity.github.com/blog/video-to-txt</id>
    <content type="html"><![CDATA[<p>这是一个字符动画转化器，可以将普通视频转换成字符动画并播放。软件主页在<a href="http://pikipity.github.io/video-to-txt">这里</a>。图包在<a href="http://pan.baidu.com/share/link?shareid=552715&amp;uk=4080321956">这里</a>。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=584094&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps = Google Earth ! -- 新谷歌地图体验]]></title>
    <link href="http://pikipity.github.com/blog/new-google-map.html"/>
    <updated>2013-05-24T12:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/new-google-map</id>
    <content type="html"><![CDATA[<p><a href="http://pikipity.github.io/blog/google-i-slash-o-live.html">Google I/O 大会</a>上发布了新的谷歌地图，现在还是测试版，但是 Google 用户可以<a href="https://maps.google.com/help/maps/helloworld/desktop/preview/">申请体验新版的谷歌地图</a>，我于5月18日发出申请，今天终于收到邮件 “Welcome to the new Google Maps.”。好高兴啊，等不及了，赶快体验一下吧。</p>

<p>初感觉，界面的流畅程度和美观程度都有了提高，这难道是我的错觉？</p>

<p><img src="https://lh3.googleusercontent.com/-mvnxsZ-mi-Q/UZ78ahcKUpI/AAAAAAAAA2w/796I8Pa9kOw/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%258812.57.59.png" alt="新谷歌地图" /></p>

<p><img src="https://lh3.googleusercontent.com/-mB1W9dbkKuw/UZ78Y8-1gNI/AAAAAAAAA2g/wYMbs9gfEgs/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.32.25.png" alt="3大明显改变" /></p>

<p>和旧版对比，有3大很明显的变化：</p>

<ol>
  <li>
    <p>放大、缩小调节栏移动到了右下角，街景小人消失了，取而代之的是一个可以收缩的 “Explore” 栏，展开之后，会显示你当前地图显示区域的一些著名地区的街景，只要点击就可以到达那个地方的街景。</p>

    <p><img src="https://lh6.googleusercontent.com/-eJbL_sb8M7I/UZ78QAar1sI/AAAAAAAAA18/6p7kKxXzA9U/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.02.12.png" alt="可以收缩的 &quot;Explore&quot; 栏" /></p>

    <p>或者在地图上任一点击一个地方，搜索条上都会出现 “Street View” 选项，点击就可以进入街景模式（把鼠标移上去街景所示的地方在地图上就会出现一个闪光黑点，很贴心）。</p>

    <p><img src="https://lh5.googleusercontent.com/-bEFAq76cxBc/UZ78QEjaUdI/AAAAAAAAA14/UnMZuhp_n_w/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.04.20.png" alt="搜索栏也可进入街景模式" /></p>

    <p>进入街景模式之后右下角地图显示你现在的位置，点击即可返回地图模式。整个操作非常贴心，没有上手难度，而且衔接动画也很流畅。</p>

    <p><img src="https://lh5.googleusercontent.com/-YKW-bAZyeNw/UZ78R50brvI/AAAAAAAAA2E/DnPXB7rrnRY/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.03.17.png" alt="街景模式有小地图指示位置" /></p>
  </li>
  <li>
    <p>大家一定注意到上图中在地图模式中左下角的 “Earth” 字样了。点击即可进入地球模式，从今往后，再也不用为了看看实体建筑去开启“谷歌地球”那个臃肿且没啥用处的软件了，在谷歌地图里一键切换，省心省力。</p>

    <p><img src="https://lh6.googleusercontent.com/-Z2Ph3hpHAng/UZ78aqGRnfI/AAAAAAAAA20/YbWvJ1B6DkQ/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.35.01.png" alt="Google Maps 里的 Google Earth" /></p>

    <p>但是 3D 建筑视图只支持部分地区，至少澳门不支持（放平了还是一张纸片，山脉还是有的）。看了看“波士顿”的 3D 建筑，作为地图，这样也就可以了吧（有总比没有好，有点实感吧）。</p>

    <p><img src="https://lh4.googleusercontent.com/-34x79BCI3Xg/UZ78Vh-Hu9I/AAAAAAAAA2Q/bhx106CS-_g/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.14.42.png" alt="澳门只有山是 3D 的，囧" /></p>

    <p><img src="https://lh6.googleusercontent.com/-FJFS2f3Vuqk/UZ78WIsvXYI/AAAAAAAAA2U/wQVlNBV7b54/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.21.10.png" alt="波士顿的 3D 建筑" /></p>
  </li>
  <li>
    <p>搜索栏的变化最大了吧，几乎所有以前侧栏的功能都集成到了搜索栏中。将鼠标移动到你的搜索结果上就会自动弹出西面图片中那一坨东西，这样子的集成后，侧边栏取消，让地图占据整个屏幕，很爽啊（毕竟地图才是主题，以前侧边栏占掉三分之一的屏幕让人很是难受）。</p>

    <p><img src="https://lh3.googleusercontent.com/-H_uivjcTnM0/UZ78Y6hhePI/AAAAAAAAA2k/4Fw-rgVWZFM/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-24%2520%25E4%25B8%258B%25E5%258D%25881.23.02.png" alt="侧边栏都集成到了搜索栏中" /></p>

    <p>搜索结果也不再是显示在侧边栏（毕竟侧边栏不复存在了），而是直接在地图上加粗显示，更加直观了。</p>
  </li>
</ol>

<p>整体来说，新的谷歌地图更加漂亮，更加简便，更加实用。希望赶快能够用到正式版才好。有兴趣的赶快到<a href="https://maps.google.com/help/maps/helloworld/desktop/preview/">这里</a>自己申请体验新版的 Google Maps 吧。下面是一段新 Google Maps 的介绍视频。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/THxJHcR1D2c?rel=0" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['今天晚上吃神马？' 基本完成]]></title>
    <link href="http://pikipity.github.com/blog/what-to-eat-v1-dot-0-publish.html"/>
    <updated>2013-05-22T11:00:00+08:00</updated>
    <id>http://pikipity.github.com/blog/what-to-eat-v1-dot-0-publish</id>
    <content type="html"><![CDATA[<p>“今天晚上吃神马？” Version 1.0 完成。可以到<a href="http://pikipity.github.io/what-to-eat/">项目主页</a>下载。下载下来之后，源码、打包之后的程序都在其中，主程序在 “dist” 文件夹中，双击即可使用（注意路径中不要有中文）。</p>

<p>Python 编写，Tkinter 做 GUI，预想中的功能都已经实现：</p>

<ol>
  <li>
    <p>从 <a href="http://takeaway.happymacao.com/">take away Macao</a> 自动抓取餐厅信息，包括：</p>

    <ol>
      <li>餐厅名</li>
      <li>电话</li>
      <li>附注</li>
      <li>营业时间</li>
      <li>餐厅地址</li>
      <li>菜单网址（点击，从浏览器直接打开）</li>
    </ol>
  </li>
  <li>随机抽取一个餐厅</li>
  <li>可以设置自己所在地区，根据所在地区抓取不同的餐厅</li>
</ol>

<p>下一步需要改善的地方：</p>

<ol>
  <li>找到一种能够释放内存的方法：连续多次点击之后，由于开启过多进程导致内存占用过大</li>
  <li>找到一种抓取图片的好方法，直接抓取菜单并显示（不用打开浏览器了），抓取餐厅标志并显示</li>
  <li>还要改善一下难看的界面</li>
</ol>

<p>难看的界面：</p>

<p><img src="https://lh6.googleusercontent.com/-0LOtRStfxr0/UZwyBbsQVkI/AAAAAAAAA1M/PIMFjt78Kgc/s493/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.46.25.png" alt="主界面" /></p>

<p><img src="https://lh5.googleusercontent.com/-a2Oi-gBpdlA/UZwyBUl35AI/AAAAAAAAA1U/fN6xmErUDyE/s495/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.07.png" alt="选定停手" /></p>

<p><img src="https://lh3.googleusercontent.com/-NGCLPdiXNts/UZwyBt50H0I/AAAAAAAAA1Y/bnrhcwGZ9cQ/s594/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.30.png" alt="设定界面" /></p>

<p><img src="https://lh3.googleusercontent.com/-41jnXgPFCN0/UZwyB5nHiJI/AAAAAAAAA1c/cNVfhZjztZ0/s571/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-22%2520%25E4%25B8%258A%25E5%258D%258810.47.42.png" alt="关于我" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kramdown 语法文档翻译（二）]]></title>
    <link href="http://pikipity.github.com/blog/kramdown-syntax-chinese-2.html"/>
    <updated>2013-05-19T10:42:00+08:00</updated>
    <id>http://pikipity.github.com/blog/kramdown-syntax-chinese-2</id>
    <content type="html"><![CDATA[<p>上接<a href="http://pikipity.github.io/blog/kramdown-syntax-chinese-1.html">kramdown 语法文档翻译（一）</a></p>

<h3 id="section">段落</h3>

<p>一个段落的第一行可以加入三个空格的缩进，其他行可以有任意数量的缩进，因为段落支持自动换行。但是需要补充的一点就是，当一个“定义列表行”出现的时候，一个段落会自动中断。</p>

<p>你可以用一个或多个空行来区分两个连续的段落。需要注意的是源文件中的一个空行并不意味着在输出文件中也是一个空行（因为“懒语法”）！如果你希望在输出中有一个空行（就好像 <code>&lt;br/&gt;</code> 标签），你需要在一行结束加上至少两个空格或是两个斜线！注意，一个段落的最后一行不可以是空行，这种空行会被忽略。开头和结尾的空格不会被纳入段落文字中。</p>

<p>下面给出的是一个段落效果的举例（<code>⋅</code>代表空格）：</p>

<pre><code>This para line starts at the first column. However,
⋅⋅⋅⋅⋅⋅the following lines can be indented any number of spaces/tabs.
⋅⋅⋅The para continues here.

⋅⋅This is another paragraph, not connected to the above one. But⋅⋅
with a hard line break. \\
And another one.
</code></pre>

<p>效果如下：</p>

<p>This para line starts at the first column. However,
      the following lines can be indented any number of spaces/tabs.
   The para continues here.</p>

<p>This is another paragraph, not connected to the above one. But<br />
with a hard line break. <br />
And another one.</p>

<h3 id="section-1">标题</h3>

<p>krandown支持 “Setex” 和 “atx” 格式的标题。所有形式都可以在一个独立的文件中使用</p>

<ul>
  <li>
    <p>“Setext” 格式</p>

    <p>“Setext” 格式必须以一行文字（标题文字）和一行只有等号（对于第一级标题）或者破折号（对于第二级标题）。标题文字可以在开头加入三个空格，但是开头和结尾的空格都不会被纳入标题文字中。等号和破折号的数量没有区分，一个就足够了，但是多个可能更好看。等号和破折号必须顶头开始。下面是一个例子：</p>

    <pre><code>First level header
==================
  
Second level header
-----
  
   Other first level header
=
</code></pre>

    <p>因为 “Setext” 的标题是在一个块级元素的开始，所以这意味着它们之前必须有空行。但是它们之后不需要有空行:</p>

    <pre><code> This is a normal
 paragraph.
   
 And a Header
 ---------------
 And a paragraph
   
 &gt; This is a blockquote.
   
 And a Header
 ----------------
</code></pre>

    <p>但是为了文档的易读性最好在 “Setext” 标题的后面也用一个空行。</p>

    <p>值得一提的是一种边缘情况：</p>

    <pre><code> header
 ---
 para
</code></pre>

    <p>一般来说，”Setext” 标题比“横线规律”（后面将提到）考前</p>
  </li>
  <li>
    <p>“atx” 格式</p>

    <p>“atx” 格式的标题必须以一行以一个或多个井号字符开头然后跟标题文字的文字开始。在井号符号之前不允许有空格。井号的数量代表标题的级数：一个井号代表第一级标题，两个代表第二级标题，以此类推直到最多六个井号代表第六级标题。在标题文字之后你可以加入任意数量的井号。任何标题文字开头和结尾的空格都不会纳入到标题文字中。下面是一个举例：</p>

    <pre><code># First level hearder
  
### Third level header ###
  
## Second level header #################
</code></pre>

    <p>下过如下：</p>

    <h1 id="first-level-hearder">First level hearder</h1>

    <h3 id="third-level-header">Third level header</h3>

    <h2 id="second-level-header">Second level header</h2>
  </li>
  <li>
    <p>表明标题 ID</p>

    <p>kranmdown 支持一种非常好的方法来设置标题的 ID，这种方法来自于 <a href="http://michelf.com/projects/php-markdown/extra/">PHP Markdown Extra</a> 和 <a href="http://maruku.rubyforge.org/">Maruku</a>：如果你在标题后面跟一个左大括号（和标题文字至少以一个空格隔开）、一个井号、标题 ID 和 一个右大括号，那么就为一个标题设置了一个 ID。如果你在 “atx” 风格的标题后面跟有一个井号，那么标题 ID 必须跟在结尾的井号之后。下面是一个例子：</p>

    <pre><code>Hello    {#id}
-------
  
# Hello   {#id}
  
# Hello   {#id}
</code></pre>
  </li>
</ul>

<p>PS: 此项翻译工程即将变成有生之年系列了。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google I/O 直播]]></title>
    <link href="http://pikipity.github.com/blog/google-i-slash-o-live.html"/>
    <updated>2013-05-14T15:46:00+08:00</updated>
    <id>http://pikipity.github.com/blog/google-i-slash-o-live</id>
    <content type="html"><![CDATA[<iframe allowtransparency="true" src="https://developers.google.com/events/announce/googleio2013/?a=on&amp;cn=&amp;cu=&amp;w=640&amp;h=425" style="border:0;box-shadow:0 0px 20px #888;-webkit-box-shadow:0 0px 20px #888;-khtml-box-shadow:0 0px 20px #888;-moz-box-shadow:0 0px 20px #888;-ms-box-shadow:0 0px 20px #888;-o-box-shadow:0 0px 20px #888;width:640px;height:725px"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人人都是艺术家]]></title>
    <link href="http://pikipity.github.com/blog/everyone-is-artister.html"/>
    <updated>2013-05-14T13:54:00+08:00</updated>
    <id>http://pikipity.github.com/blog/everyone-is-artister</id>
    <content type="html"><![CDATA[<p>如果你认为没有艺术细胞的普通人就画不出具有艺术气息的画作，那么你就大错特错了。在<a href="http://weavesilk.com/">Silk</a>上，你随便画几笔都能得到超级漂亮的画作，不仅有<a href="http://weavesilk.com/">网页版</a>，还有<a href="http://click.linksynergy.com/fs-bin/stat?id=1ld*hl4tNqs&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Fsilk-interactive-generative%252Fid436590129%253Fmt%253D8%2526uo%253D4%2526partnerId%253D30">iphone 和 ipad 版</a>。人人都是艺术家~~~~~~~</p>

<p><img src="https://lh3.googleusercontent.com/-B0yMeLeEd6c/UZHRYsrHN3I/AAAAAAAAA0U/Xp25NucJdyY/s912/%25E4%25B8%258B%25E8%25BD%25BD.png" alt="别问我我画的是什么，因为我也不知道" /></p>

<p><img src="https://lh6.googleusercontent.com/-pPl5gb14n-Q/UZHRY_Z9L8I/AAAAAAAAA0Y/y2_HQsSmRJ0/s912/%25E4%25B8%258B%25E8%25BD%25BD%2520%25281%2529.png" alt="本来想画朵花的" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[走，挖矿去]]></title>
    <link href="http://pikipity.github.com/blog/bitcoin.html"/>
    <updated>2013-05-13T16:25:00+08:00</updated>
    <id>http://pikipity.github.com/blog/bitcoin</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-Xnp0l7ujJFc/UZDDciXam-I/AAAAAAAAAzk/35to9R39yQI/s495/36d5bca5dfe65375_thumb1.jpg" alt="比特币" /></p>

<p>比特币在中国乃至全世界已经是越来越火了，如果现在不去这里面掺一脚，将来可能就会于这种新尝试失之交臂了，所以说，走走走，带好锄头挖矿去~~~~</p>

<!--more-->

<h3 id="section">什么是比特币</h3>

<p>我就算是写上一大堆也没几个人愿意一点一点的看，那就直接上视频吧，清晰明了，快捷方便。</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XMjY4MTA3NDky" frameborder="0" allowfullscreen=""></iframe>

<p>如果看完上面的视频，你还没有动心，那么让我来告诉你，根据我现在（2013/5/13 4:48:56）在<a href="https://btcchina.com/">比特币中国交易平台</a>查到的信息，比特币成交价为<strong>701.01RMB</strong>，怎么样现在开始动心了么，一枚比特币就可以换700多人民币，而且挖矿的过程只不过是动用你电脑上现在不用的剩余资源，呵呵，现在已经蠢蠢欲动了吧。既然<a href="http://setiathome.berkeley.edu/">SETI@HOME</a>用电脑的剩余资源寻找外星人，那么我们为什么不能用自己电脑的剩余资源赚点钱呢？</p>

<h3 id="section-1">比特币的黑历史</h3>

<p><a href="http://bbs.btcman.com/">btcman</a> 论坛的 <a href="http://bbs.btcman.com/home.php?mod=space&amp;uid=338">挖煤矿工</a> 用<a href="http://bbs.btcman.com/forum.php?mod=viewthread&amp;tid=2547">一段话</a>简单直白的概述了比特币的由来：</p>

<blockquote>
  <p>1982年，大卫·乔姆(David Chaum)提出不可追踪的密码学网络支付系统。8年后，他将此想法扩展为密码学匿名现金系统，即Ecash。1998年，戴伟(Wei Dai)的论文阐述了一种匿名的、分布式的电子现金系统：b-money。与此同时，尼克·萨博(Nick Szabo)发明了Bitgold，提出工作量证明机制，用户通过竞争性地解决数学难题，然后将解答的结果用加密算法串联在一起公开发布，构建出一个产权认证系统。哈尔·芬尼(Hal Finney)则把该机制完善为一种“可重复利用的工作量证明”。在前人的工作基础之上，2008年，名不见经传的“中本聪”在metzdowd.com的密码学邮件组列表中发表了《比特币：一种点对点的现金支付系统》。2009年1月3日，比特币网络诞生，中本聪本人发布了开源的第一版比特币客户端。</p>
</blockquote>

<p>由上面的历史可以看出比特币的“生父”就是“中本聪”啦，那么这个人是谁呢？谁也不知道，看名字像是个日本人，但是这是一个网名啊，谁知道真的假的，网上流传着这样一种说法，说其实“中本聪”是一个俄罗斯人（俄罗斯人的密码学可是很厉害的~~~），比特币是俄罗斯黑社会为了洗黑钱而发明的一种虚拟币，也就是说，则是老毛子下的一盘很大的棋。</p>

<h3 id="section-2">如何挖矿</h3>

<p><img src="https://lh6.googleusercontent.com/-kj4r1JUXyaw/UZDEEMk9a7I/AAAAAAAAAzs/6CfyfkoTqb4/s560/unnamed17-560x274.jpg" alt="挖矿去" /></p>

<p>重点来了，既然我们害怕在比特币市场内投资（由于市场变动剧烈，你可能血本无归），那么我们可以自己动手丰衣足食。</p>

<p>首先明确，挖矿是怎样得到比特币的。你用电脑帮助比特币交易计算一组非常复杂的 hash 值，每计算出来一个，你就可以获得25比特币，<a href="http://www.businessinsider.com/how-bitcoins-are-mined-and-used-2013-4">这里</a>有一个详细的介绍。但是</p>

<blockquote>
  <p>事实上，单独挖矿模式几近被淘汰。由于挖矿的流行和发现矿源的困难导致现在需要3年以上才能挖掘到比特币。而如果你仅仅找一台PC并让它不停的运行一些算法，电费和设备的损耗会比得到的比特币还要贵的。</p>
</blockquote>

<p>所以现在没人再去 solo 了，都是进行联合挖矿（就是将多台电脑通过互联网形成一个虚拟的超级电脑来进行挖矿），一些网站会提供一个联合挖矿的矿池，当你在这个矿池内挖矿的时候，矿池会按照你完成工作的比例，付给你一定比例的奖金，你的矿机（就是用来挖矿的设备）越好，你完成的工作比例越高，你得到的奖金也就越多。很久以前，还可以 solo 的时候，用电脑的 CPU 挖矿就可以了，现在大部分人都在使用 GPU 或是计算性能更高的 <a href="http://bbs.21ic.com/icview-243258-1-1.html">FPGA</a>，现在专门用来挖矿的设备也开始如雨后春笋般不断地冒出来。下面就是为了挖矿需要准备的东西：</p>

<ol>
  <li>
    <p>首先，你需要有一个比特币的钱包，用来存放你的比特币。当然，如果你对交易平台足够放心，你可以直接将挖到的比特币汇往交易平台，但是并不推荐这样做，最近黑客频繁攻击各大比特币交易平台，它们的安全性并不是多么好，而且将来你说不定还会进行其他比特币交易，而不仅仅是拿比特币换钱，所以有个比特币钱包还是很必要的。</p>

    <p>比特币钱包分为两种：本地钱包和网络钱包。</p>

    <ul>
      <li>
        <p>本地钱包：顾名思义，就是在你的电脑上下载一个客户端，好处是绝对安全，除非其他人直接操控你的电脑，否则根本无法动你钱包里的东西。本地钱包有三种选择：</p>

        <ul>
          <li>标准比特币客户端：也就是官方客户端，当年“中本聪”开发的客户端。当刚安装完后必须下载整个（目前约3G）的区块链，这会占用几个小时的，并且每次启动客户端后，也需要几分钟的同步时间。<a href="https://zh-cn.bitcoin.it/wiki/%E9%A6%96%E9%A1%B5">这里</a>下载</li>
          <li>Armory：Armory 是最先进的Bitcoin的客户端，它提供了一系列的功能，有的甚至比Blockchain还强大。但是你需要为享受这些便利支付软件使用费用。Armory 客户端没有自己的网络功能，需要标准客户端在底层运行。它需要和标准客户端一起运行，至少需要2 GB的RAM ，因此在配置较差的的计算机上运行比较困难。<a href="https://bitcoinarmory.com/get-armory/">这里</a>下载</li>
          <li>Electrum：一个轻量级的桌面客户端，这意味着它不会下载完整的blockchain。相反，它需要服务器上做大量的工作。其实，这相当于一个网络钱包的客户端而已。汇钱等基本使用的话有图形化界面，但是稍微高级点的功能只能通过命令行才能使用。<a href="http://electrum.org/download.html">这里</a>下载。</li>
        </ul>
      </li>
      <li>
        <p>网络钱包：本地钱包占用的电脑硬盘实在是太多了，对于我们这种以娱乐为目的的人来说实在是太浪费了，使用网络钱包应该就可以了。但是网络钱包并不安全，黑客攻击、运营倒闭等等都会危机到你钱包里的比特币。对于网络钱包有下面两个选择：</p>

        <ul>
          <li>Blockchain：是一个在线钱包和桌面客户端之间的混合，提供高安全性的钱包。Blockchain是通过存储你的钱包的密匙和运行所必需的代码解密你的钱包在您的浏览器登录交易，所以Blockchain有没有办法访问您的资金。客户端还提供了可以下载和备份你的钱包到您的计算机，或印刷在纸张上。除此之外Blockchain提供了一些高级功能。如果您已经创建了你所私钥的密码，您可以将其导入到Blockchain，等于将你的钱包备份在你的大脑中。它还采用了先进的离线模式，让你在没有网络连接下使用离线的钱包，可以签名交易，无论通过印刷或记忆。当然，Blockchain也为iPhone和Android提供了自己的集成的移动应用程序。 官网在<a href="http://blockchain.info/wallet">这里</a></li>
          <li>Coinbase：一个还在测试的网络钱包，基本功能可以保障，也有iphone和Android客户端。官网在<a href="https://coinbase.com">这里</a>。我注册的就是这里。</li>
        </ul>
      </li>
    </ul>

    <p>不论是什么钱包，对于我们最重要的就是里面产生的那个 “Bitcoin Addresses”。这相当于一个向你你钱包内汇款的地址，这个地址可以生成无限个，钱包会把所有地址汇过来的钱收集在一起，为了安全，最好每次交易活动都用一个新的地址，旧地址忘了也没关系，只要钱包里保存着，有钱汇入就会自动汇总到总钱数里的。会生成 “Bitcoin Addresses”，并会复制粘贴 “Bitcoin Addresses”（复制粘贴应该没有人不会吧 -_-|||），就算学会钱包的基本用法了。</p>
  </li>
  <li>
    <p>你需要找一个联合挖矿的矿池，提供这种矿池的网站很多，比较出名的是以下三个：</p>

    <ul>
      <li><a href="https://mining.bitcoin.cz">Slush’s pool</a></li>
      <li><a href="https://deepbit.net">deepbit</a></li>
      <li><a href="https://www.btcguild.com">BTC Guild</a></li>
    </ul>

    <p>每个网站的使用方法基本都是一样的。注册一个账户，在账户里面你可以再建立 worker，每个账户里 worker 的数量是没有限制的。worker 分为两部分，worker 名和密码。这个就是你的工作账户（有点像是工作证），以后在挖矿软件上需要输入这个。为了防止冲突，建议每个挖矿机器上使用不同的 worker。密码不是重点（BTC Guild 上直接就不需要密码），因为别人即使知道了你 worker 的密码，最多也就是帮你挖矿（求之不得），不会对你造成任何危害，怎么简单怎么设吧。记得在你的钱包里生成一个 “Bitcoin Addresses”，放在矿池网站上，然后设置一个最小汇款金额，如果你急着想看到新比特币入账，可以设为0.1。</p>
  </li>
  <li>
    <p>OK。现在就差一个挖矿软件（也就是矿机）了。由于有关比特币的软件全部都是开源的，所以矿机也是各种各样，你需要根据你使用的硬件来选择矿机，如果你有独立显卡，尽可能使用GPU计算程序，因为设计结构和指令集不同，GPU 计算能力一般是CPU的几十至几百倍。如果使用AMD/ATI显卡，还需安装<a href="http://developer.amd.com/tools-and-sdks/heterogeneous-computing/amd-accelerated-parallel-processing-app-sdk/downloads/">AMD显卡开发包</a>。<a href="http://www.bitcoinx.com/bitcoin-mining-software/">这里</a>有一张现在比较流行的矿机的列表，你可以根据自己使用的操作系统和硬件来选择（BTC Guild 会很人性的提供一个矿机，如果你只在 BTC Guild 上挖矿的话，就是用那个矿机就好了）。</p>

    <ul>
      <li>Windows 用户建议使用 <a href="http://50miner.org/">50miner</a> 或是 <a href="http://guiminer.org/">GUIminer</a></li>
      <li>Mac 用户可以选择<a href="http://pan.baidu.com/share/link?shareid=521891&amp;uk=4080321956">这个</a></li>
      <li>Linux 用户可以看看<a href="https://docs.google.com/document/d/1Gw7YPYgMgNNU42skibULbJJUx_suP_CpjSEdSi8_z9U/preview?sle=true">这个</a>，一份 Ubuntu 挖矿指南。</li>
    </ul>

    <p>不论是哪一个软件，使用方法都是差不多的。下面是 GUIminer 的界面。</p>

    <p><img src="https://lh5.googleusercontent.com/-w66fdowLBDk/UZDBCKFIxXI/AAAAAAAAAzY/ljnjQiqQ-wQ/s825/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25886.30.46.png" alt="GUIMiner" /></p>

    <p>在 server 中选择你刚才注册的矿池网站的名字，如果不知道，可以去矿池网站的帮助里看一看。username 填写你 worker 的名字，密码是你 worker 的密码，device 中选择你用来挖矿的硬件，可以选择 GPU 就选择 GPU 吧，CPU 的话你连电费都赚不回来。Extra flags 可以不设置，它是设置挖矿软件运行参数的地方，具体怎么设置要根据你使用的软件来定。我一般就是设置一个 <code>-fxx</code>，“xx”数字越大，挖矿程序占用的硬件资源越少，允许你自由使用的硬件资源越多。好了，现在可以 “start mining!”。如果一切正常，你会看见右下角会出现你现在硬件的计算速度（如下图），并且电脑散热的部分一会儿会很烫，你用来运算的硬件（GPU或是CPU）的负载应该会飙升到100%左右，现在你的电脑就正式成为你的矿机了。(*^◎^*)</p>

    <p><img src="https://lh3.googleusercontent.com/-KS9LIR0JjuA/UZDErk5s6bI/AAAAAAAAAz0/55mpltDtDiA/s818/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25886.46.30.png" alt="右下角出现计算速度，我的 CPU 速度超级慢，还是 GPU 好啊" /></p>
  </li>
  <li>
    <p>最后就是如何把挖到比特币换为人民币了。首先到<a href="https://btcchina.com/">比特币中国</a>注册一个账户，进入账户之后，你就可以看到一个交易平台了，上面的内容都很直白明了。首先选择左边的“比特币充值”，会给你一个充值ID，从你的钱包中，将比特币汇入到“充值ID”中就可以了。然后再点选“卖出比特币”，等卖出得到的 RMB 到账之后，就可以点选“人民币提现”了。还是很方便的。</p>

    <p><img src="https://lh5.googleusercontent.com/-W3yO6MMvd6k/UZDN3gdKkuI/AAAAAAAAA0E/YrDRbUhQrbY/s364/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25887.17.29.png" alt="比特币换人民币" /></p>
  </li>
</ol>

<p>如果想了解跟多的关于比特币的信息，可以到<a href="https://zh-cn.bitcoin.it/wiki/%E9%A6%96%E9%A1%B5">比特币的中文wiki</a>或是<a href="https://bitcointalk.org/index.php?board=30.0">比特币的中文论坛</a>去看一看，会很有收获的。</p>

<p>我已经用我的 Macbook Pro 的 CPU 以 1.9Mhash/s 挖了一个多星期了，现在只有 0.00016 的比特币，其实这就是折腾，认真你就输了，你觉得呢？祝大家挖到满钱包的比特币。</p>

<p>PS：有没有人想和我一起开发个挖矿的 FPGA 板子啊，留言或是邮箱联系我啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谢谢你，妈妈]]></title>
    <link href="http://pikipity.github.com/blog/2013-mothers-day.html"/>
    <updated>2013-05-12T09:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/2013-mothers-day</id>
    <content type="html"><![CDATA[<p>谢谢你，妈妈，母亲节快乐，能够由你把我带到这个世界真是太好了。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=562991&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十章 LCD]]></title>
    <link href="http://pikipity.github.com/blog/lcd.html"/>
    <updated>2013-05-11T09:08:00+08:00</updated>
    <id>http://pikipity.github.com/blog/lcd</id>
    <content type="html"><![CDATA[<h3 id="lcd">什么是LCD</h3>

<p>LCD 就是液晶显示器，维基百科的解释在<a href="https://zh.wikipedia.org/wiki/%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%99%A8">这里</a>，以前的小液晶显示器没有背光，但是现在大多数 LCD 都会加入背光来使得显示器在没有外界光线的情况下也可以使用，但是背光的加入就让能耗上升了。</p>

<p>一般分为下面三种类型：</p>

<ul>
  <li>文字型：内部存储器中内建有文字图形，输入对应的 ASCII code 就可以显示文字了。</li>
  <li>绘图型：内部存储器无内建文字图形，所有显示的图形都必须按照 LCD 所对应的格式进行存储。</li>
  <li>文字绘图两用型：可在上面两种形式下自由切换。</li>
</ul>

<p>下面介绍最简单的文字型 <a href="https://docs.google.com/file/d/0B8AjE9xqZzSiNDhUMWNGdE1VMW8/edit?usp=sharing">LCD1602</a> 为例进行介绍。LCD1602 共两行，每行可以显示16个字符。液晶显示器本身的控制非常复杂，所以我们需要外加一个芯片对其进行控制，一般情况下，在市面上买到的液晶显示器已经内置了这个控制芯片。对于字符型，一般使用 <a href="https://docs.google.com/file/d/0B8AjE9xqZzSiM09lbkVrQzJ0dDQ/edit?usp=sharing">HD44780</a> 控制芯片来进行控制。</p>

<!--more-->

<h3 id="lcd1602-">LCD1602 接脚示意</h3>

<p><img src="https://lh6.googleusercontent.com/-TwNOURsoWgc/UY2e9twOMKI/AAAAAAAAAyk/V3-F2RomnuA/s720/SMK1632_LCD1602_3.jpg" alt="LCD1602" /></p>

<p>按照上图从左到右的顺序，每个接脚的意义为：</p>

<ul>
  <li>GND：接地</li>
  <li>Vcc: 电源（5V）</li>
  <li>V0：LCD亮度控制，一般用一个变阻器分压的方式来控制这个接脚的电压，一次来调节 LCD 显示的亮度，0V最亮</li>
  <li>RS：暂存器选择接脚。接高为资料暂存器，接低为指令暂存器</li>
  <li>R/W：读写选择接脚。接高为读，接低为写。</li>
  <li>E：致能 LCD 接脚</li>
  <li>D0~D7：资料线，传输数据</li>
  <li>Vcc: 背光电源，可以串连一个330Ω的电阻，然后之间连接到5V电源</li>
  <li>GND：背光地</li>
</ul>

<h3 id="section">控制方法</h3>

<p>LCD内部寄存器分为指令寄存器和资料寄存器。指令寄存器就是用来写入你要 LCD 执行的指令的地方，例如控制游标的移动，，控制游标的显示方式，读取忙碌旗标等等，当一条命令写入之后，LCD便会执行这条命令。资料寄存器就是用来写入希望LCD显示内容的地方，在资料输入前，必须先指定资料存储的地址，然后再输入资料的内容。</p>

<p>在控制的过程中要注意两点：</p>

<ol>
  <li>控制 E 来置能 LCD，要根据时序图来控制，简单来说就是：在读写前先拉低 E，再拉高 E，创造一个上升沿，读写结束后，要拉低 E。</li>
  <li>
    <p>LCD 对于数据的处理速度非常慢，所以数据是否读写完毕是一个非常重要的问题，有下面两种方法可以判断数据是否读写完毕：</p>

    <ol>
      <li>R/W 接脚接地，一直保持写的状态，每次写完数据之后预留出足够长的时间给LCD处理信号。虽然程序和电路简单，但是预留时间长短难以控制。</li>
      <li>R/W 不接地，通过读取 LCD 的忙碌旗标来判断数据是否读取完毕。虽然程序和电路复杂，但是不用考虑预留时间的长短。</li>
    </ol>
  </li>
</ol>

<h3 id="lcd-1">LCD模组命令</h3>

<p>下面的命令从左到右分别对应的接脚为</p>

<pre><code>RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0
</code></pre>

<ol>
  <li>
    <p>向指令寄存器中写入的指令: 游标指示的就是如果未重新指定资料存放的地址，新写入的资料就会在游标处显示。</p>

    <ul>
      <li>
        <p>功能设定:</p>

        <pre><code>0 0 0 0 1 DL N F X X
</code></pre>

        <p>DL: 资料长度。DL=0，高4位。DL=1,8位</p>

        <p>N: 可以显示的行数。N=0，一行。N=1，两行。</p>

        <p>F: 字形设定。F=0，5*7点阵。F=1，5*10点阵。</p>
      </li>
      <li>
        <p>显示器控制：</p>

        <pre><code>0 0 0 0 0 0 1 D C B
</code></pre>

        <p>D: 显示器开关</p>

        <p>C：是否用游标显示位元位置</p>

        <p>B：是否让游标闪烁</p>
      </li>
      <li>
        <p>输入模式设定：</p>

        <pre><code>0 0 0 0 0 0 0 1 I/D S
</code></pre>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">S</th>
              <th style="text-align: center">I/D</th>
              <th style="text-align: center">动作</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">字元不动，游标左移</td>
            </tr>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">字元不动，游标右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">游标不动，字元右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">游标不动，字元左移</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>清除显示（显示屏清零，游标回归左上角）：</p>

        <pre><code>0 0 0 0 0 0 0 0 0 1
</code></pre>
      </li>
      <li>
        <p>游标归位（资料不变，仅将游标移至左上角位置）：</p>

        <pre><code>0 0 0 0 0 0 0 0 1 X
</code></pre>
      </li>
      <li>
        <p>游标移位控制：</p>

        <pre><code>0 0 0 0 0 1 S/C R/L X X
</code></pre>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">S/C</th>
              <th style="text-align: center">R/L</th>
              <th style="text-align: center">动作</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">游标左移</td>
            </tr>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">游标右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">整屏左移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">整屏右移</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>
    <p>从指令寄存器读取忙碌旗标</p>

    <pre><code>0 1 BF A6 A5 A4 A3 A2 A1 A0
</code></pre>

    <p>BF: 忙碌旗标</p>

    <p>A0~A6: 游标所在位置</p>
  </li>
  <li>
    <p>向资料寄存器写入资料：资料寄存器分为两个 – CGRAM 和 DDRAM。在写入资料之前要先判断两件事：</p>

    <ol>
      <li>
        <p>现在游标所在的位置是否是下一笔数据要显示的位置。如果是，就直接向 DDRAM 写入资料就可以了；如果不是就移动游标到需要的位置或是从新指定 DDRAM 的地址。两行每行8个字的地址如下：</p>

        <p>第一行：从<code>0x00</code>到<code>0x0F</code></p>

        <p>第二行：从<code>0x40</code>到<code>0x4F</code></p>
      </li>
      <li>
        <p>要显示的字符在 ASCII 码中是否有对应。如果有，直接写入对应的 ASCII 码就可以了；如果没有就需要先在 CGRAM 中将这个字符造出来，造字分为两步，首先，指定这个新字符在 CGRAM 中存放的地址，然后向这个地址中写入要造的字符就可以了。每一个字符都是一个8*8的点阵，也就是说，你要连续写入8次数据。需要注意的是，左边三列有空出来，一般为了美观，最下面一行要空出来，下面是一个笑脸的造字示意图</p>

        <p><img src="https://lh3.googleusercontent.com/-k6OQiaSfv1A/UY2w9DI1x6I/AAAAAAAAAy0/-xuEFMzKUsk/s614/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-11%2520%25E4%25B8%258A%25E5%258D%258810.45.34.png" alt="存放在```0x40```的一个笑脸" /></p>

        <p>可以用来存放新字符的 CGRAM 的地址如下：<code>0x40</code>，<code>0x48</code>，<code>0x50</code>，<code>0x58</code>，<code>0x68</code>，<code>0x70</code>，<code>0x78</code>。要使用的时候，就和写入 ASCII 码一样，直接向 DDRAM 中写入 CGRAM 的地址就可以了。</p>
      </li>
    </ol>

    <p>写入资料的时候，先写入地址（如果地址就是光标位置就不用写入地址了），然后写入资料就可以了。</p>

    <p>命令如下：</p>

    <ul>
      <li>
        <p>CGRAM 地址写入（由于地址的高四位至少也是4，所以A7=0，A6=1）</p>

        <pre><code>0 0 0 1 A5 A4 A3 A2 A1 A0
</code></pre>
      </li>
      <li>
        <p>DDRAM 地址写入（A7必须是1，后面的7位按照提到的方法确定）</p>

        <pre><code>0 0 1 A6 A5 A4 A3 A2 A1 A0
</code></pre>
      </li>
      <li>
        <p>向 DDRAM 和 CGRAM 中写入资料：</p>

        <pre><code>1 0 D7 D6 D5 D4 D3 D2 D1 D0
</code></pre>
      </li>
      <li>
        <p>读取 DDRAM 和 CGRAM 中的资料：</p>

        <pre><code>1 1 D7 D6 D5 D4 D3 D2 D1 D0
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<h3 id="section-1">例程</h3>

<p>为了方便，这里用C语言编写例程，我们只要把命令放入一个.h头文件中，在需要的时候调用这个头文件里的函数就可以。我这里电路接法:</p>

<p><img src="https://lh5.googleusercontent.com/-gswQOTl2dNU/UY27DOjDqgI/AAAAAAAAAzE/rOD-GyLHY2U/s321/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-11%2520%25E4%25B8%258A%25E5%258D%258811.28.45.png" alt="LCD1602例程接法" /></p>

<p>ADDR0就是P1.0，ADDR1就是P1.1，ENLCD1就是P1.5，DB0~DB7就是P0.0~P0.7。头文件 LCD.h 如下</p>

<pre><code>#ifndef _LCD_H_
#define _LCD_H_

sbit ADDR0=P1^0;
sbit ADDR1=P1^1;
sbit ENCLD1=P1^5;
sbit DB0=P0^0;
sbit DB1=P0^1;
sbit DB2=P0^2;
sbit DB3=P0^3;
sbit DB4=P0^4;
sbit DB5=P0^5;
sbit DB6=P0^6;
sbit DB7=P0^7;

void waiting()
{
	P0=0xFF;
	while(DB7)
	{
		ENLCD1=0;
		ADDR0=0;
		ADDR1=1;
		ENLCD1=1;
	}
	ENLCD1=0;
}

void write_cmd(unsigned char cmd)
{
	waiting();
	ENLCD1=0;
	ADDR0=0;
	ADDR1=0;
	P0=cmd;
	ENLCD1=1;
	ENLCD1=0;
}

void write_data(unsigned char dat)
{
	waiting();
	ENLCD1=0;
	ADDR0=1;
	ADDR1=0;
	P0=dat;
	ENLCD1=1;
	ENLCD1=0;
}

void write_string(unsigned char addr,unsigned char *p)
{
	addr=addr|0x80;
	write_cmd(addr);
	while(*p!='\0')
	{
		write_data(*p++);
	}
}

void LCD_init()
{
	write_cmd(0x38);
	write_cmd(0x0C);
	write_cmd(0x06);
	write_cmd(0x01);
}

#endif
</code></pre>

<p>如果要输出一句”Hello World!”的话，主程序可以这样写:</p>

<pre><code>#include &lt;REG52.h&gt;
#include &lt;LCD.h&gt;
#include &lt;intrins.h&gt; 

unsigned char code World[]={"Hello World!"};

void main()
{
	LCD_init();
	write_string(0x00,World);
	write_string(0x42,World);
	while(1);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暑假开始 O(∩_∩)O]]></title>
    <link href="http://pikipity.github.com/blog/summer-vacation-2013.html"/>
    <updated>2013-05-10T09:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/summer-vacation-2013</id>
    <content type="html"><![CDATA[<p>暑假第一天，庆祝一下，福利放送~~~~~~~~~</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=556019&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[女朋友生日的影响]]></title>
    <link href="http://pikipity.github.com/blog/affect-of-girl-friend-birthday.html"/>
    <updated>2013-05-10T09:05:00+08:00</updated>
    <id>http://pikipity.github.com/blog/affect-of-girl-friend-birthday</id>
    <content type="html"><![CDATA[<p>今天去看了一下 Google Analysis 上我的网站的浏览量，吓死我了，女朋友生日给我带来了大量浏览量，天啊，这宣传也太有效了吧。</p>

<p><img src="https://lh5.googleusercontent.com/-H832N76TdRc/UYxI9ViL7aI/AAAAAAAAAyU/tkljiGJ0i6I/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-10%2520%25E4%25B8%258A%25E5%258D%25889.07.26.png" alt="5月8日惊人的浏览量" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电子发烧友《医疗电子特刊》]]></title>
    <link href="http://pikipity.github.com/blog/medical-elecfans-2013.html"/>
    <updated>2013-05-08T09:12:00+08:00</updated>
    <id>http://pikipity.github.com/blog/medical-elecfans-2013</id>
    <content type="html"><![CDATA[<p><a href="http://www.elecfans.com/">电子发烧友</a>出了一期《<a href="http://www.elecfans.com/tt/act2013/medical/?utm_source=banner&amp;utm_medium=email&amp;utm_campaign=tekan20130507">医疗电子特刊》</a>，还是很不错的，以后想从事医疗电子方面的可以看一下，了解一下现在医疗电子的发展局势。网址在<a href="https://docs.google.com/file/d/0B8AjE9xqZzSiOG5LVHdkYmd2T2s/edit?usp=sharing">这里</a></p>

<p><a href="https://docs.google.com/file/d/0B8AjE9xqZzSiOG5LVHdkYmd2T2s/edit?usp=sharing"><img src="https://lh5.googleusercontent.com/-JPg0luhQPyw/UYmn2p7RrlI/AAAAAAAAAyE/Wh-q37m8o7w/s500/fengmian.jpg" alt="电子发烧友《医疗电子特刊》" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可全方位移动机器人]]></title>
    <link href="http://pikipity.github.com/blog/tapikema.html"/>
    <updated>2013-05-08T08:54:00+08:00</updated>
    <id>http://pikipity.github.com/blog/tapikema</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-PfSqIt_Jo2U/UYmktnAyCHI/AAAAAAAAAx0/vwc7mb-5Pno/s450/1706864258774701006.jpg" alt="攻壳特工队" /></p>

<p>今天看到这样一个视频，总感觉这玩意在哪见过，最后恍然大悟，这不就是<a href="http://section9.seezone.net/index.php">《攻壳特工队》</a>里的<a href="http://baike.baidu.com/view/1512717.htm">“塔奇克马”</a>么？日本人的科技实力绝对不是盖的。( ⊙ o ⊙ )</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XMzMzOTE2MDI0" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生日快乐]]></title>
    <link href="http://pikipity.github.com/blog/happy-birthday-girl-friend.html"/>
    <updated>2013-05-07T23:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/happy-birthday-girl-friend</id>
    <content type="html"><![CDATA[<p>祝颖思生日快乐~~~~~~</p>

<p>终于赶在12点之前做完了，一个我自己编写的聊天软件，可能中文会出现乱码，在各个电脑上的测试结果都不一样让我都不知道怎么办了，希望你能正常打开。</p>

<p>安装程序乱码就没事了，只要打开软件之后不要乱码就好。</p>

<p>最喜欢看你的笑了，希望你天天都能快快乐乐。还有很多话，但是不着急。我们还是软件里说吧   </p>

<p>O(∩_∩)O   \(^o^)/  ( ^_^ )   (*^◎^*)</p>

<p>软件在这里下载：<a href="http://pan.baidu.com/share/link?shareid=511981&amp;uk=4080321956">Love You</a></p>

<p><img src="https://lh5.googleusercontent.com/-1U5iI1ftJek/UYkfseuWuhI/AAAAAAAAAxk/CBOI4N3nO8Q/s576/sy_20100930223139310040.jpg" alt="Happy Birthday to You" width="480" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第九章 时序]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-9.html"/>
    <updated>2013-05-01T00:09:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-9</id>
    <content type="html"><![CDATA[<p>时序在设计电路中很重要，在仿真软件中仿真正常，但是在实际中却出现各种各样奇怪的问题，例如LED应该亮的时候不亮，不应该亮的时候乱亮，导致整个LED矩阵一片混乱，如果接脚一切正常的话，一般就是时序不符合要求，更换芯片或是减少过程中的芯片数量一般就可以解决，但是这些并不是应该在完成产品之后再调整的，否则成本会大大增加，所以时序问题在设计初期就应该考虑进去，来保证最终产品的稳定运行。</p>

<p>每个芯片的说明书上一般会配有大量的时序图，下面是一张 AT89C51 读取外部程序寄存器时候的时序图。</p>

<p><img src="https://lh6.googleusercontent.com/-pshiBXBDYZk/UYCMoDCR-iI/AAAAAAAAAxQ/vC3Zt2T4RvU/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-01%2520%25E4%25B8%258A%25E5%258D%258811.29.57.png" alt="AT89C51 读取外部程序寄存器时的时序图" width="480" /></p>

<p>为了方便后面的讲解，我们在这里将时序图上的各个元素进行重新命名：</p>

<ul>
  <li>时序图中每一行对应一个接脚，我们在这里管这些接脚叫“对象”</li>
  <li>对于单片机或是芯片的时序图很简单，对于一个对象的一个时间下，此对象只有两种可能的状态：0或者1。我们管1叫“事件”，从0到1叫“事件发生”，从1到0叫“事件结束”。</li>
  <li>时序图上标出的各种各样的时间，例如<script type="math/tex">t_{LHLL}</script>、<script type="math/tex">t_{PLPH}</script>，我们管他们叫“要求”</li>
</ul>

<p>接下来的问题就是我们如何知道自己练的电路是否满足时序要求呢？我们可以按照下面的步骤，一步一步来确定<sup id="fnref:note1"><a href="#fn:note1" rel="footnote">1</a></sup>：</p>

<ol>
  <li>对于每一个元件时序图上的“事件”明确哪一个是“输入事件”<sup id="fnref:note2"><a href="#fn:note2" rel="footnote">2</a></sup>、哪一个是“输出事件”<sup id="fnref:note3"><a href="#fn:note3" rel="footnote">3</a></sup>。在这一步我们其实就可以确定接脚连法的逻辑是否正确了，如果两个“输入事件”对联那肯定就不对了。</li>
  <li>根据上面找到的“输入事件”，找到并标出停止于“输入事件”的“要求”。对于时序图所指示的这个元件来说，这些“要求”是需要外部元件来配合自己的，我管它们叫“真要求”，而其他“要求”是自己用来配合其他元件的，我管他们叫“假要求”。</li>
  <li>然后对于每一个元件的每一个“真要求”，根据接脚的连法，看对应的“假要求”是否满足就可以了。重点是看这个“真要求”起于何时止于何时，这样就可以找到对应的“假要求”了，然后对应大小关系，就可以了。</li>
</ol>

<h2 id="section">脚标</h2>

<div class="footnotes">
  <ol>
    <li id="fn:note1">
      <p>我这里忽略掉了导线产生的信号延迟，如果需要，直接加入就可以了<a href="#fnref:note1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:note2">
      <p>如果这个信号对于时序图所指示的这个元件是一个输入信号的话，我管它叫“输入事件”<a href="#fnref:note2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:note3">
      <p>如果这个信号对于时序图所指示的这个元件是一个输出信号的话，我管它叫“输出事件”<a href="#fnref:note3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
