<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[人人都是艺术家]]></title>
    <link href="http://pikipity.github.com/blog/everyone-is-artister.html"/>
    <updated>2013-05-14T13:54:00+08:00</updated>
    <id>http://pikipity.github.com/blog/everyone-is-artister</id>
    <content type="html"><![CDATA[<p>如果你认为没有艺术细胞的普通人就画不出具有艺术气息的画作，那么你就大错特错了。在<a href="http://weavesilk.com/">Silk</a>上，你随便画几笔都能得到超级漂亮的画作，不仅有<a href="http://weavesilk.com/">网页版</a>，还有<a href="http://click.linksynergy.com/fs-bin/stat?id=1ld*hl4tNqs&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=https%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Fsilk-interactive-generative%252Fid436590129%253Fmt%253D8%2526uo%253D4%2526partnerId%253D30">iphone 和 ipad 版</a>。人人都是艺术家~~~~~~~</p>

<p><img src="https://lh3.googleusercontent.com/-B0yMeLeEd6c/UZHRYsrHN3I/AAAAAAAAA0U/Xp25NucJdyY/s912/%25E4%25B8%258B%25E8%25BD%25BD.png" alt="别问我我画的是什么，因为我也不知道" /></p>

<p><img src="https://lh6.googleusercontent.com/-pPl5gb14n-Q/UZHRY_Z9L8I/AAAAAAAAA0Y/y2_HQsSmRJ0/s912/%25E4%25B8%258B%25E8%25BD%25BD%2520%25281%2529.png" alt="本来想画朵花的" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[走，挖矿去]]></title>
    <link href="http://pikipity.github.com/blog/bitcoin.html"/>
    <updated>2013-05-13T16:25:00+08:00</updated>
    <id>http://pikipity.github.com/blog/bitcoin</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-Xnp0l7ujJFc/UZDDciXam-I/AAAAAAAAAzk/35to9R39yQI/s495/36d5bca5dfe65375_thumb1.jpg" alt="比特币" /></p>

<p>比特币在中国乃至全世界已经是越来越火了，如果现在不去这里面掺一脚，将来可能就会于这种新尝试失之交臂了，所以说，走走走，带好锄头挖矿去~~~~</p>

<!--more-->

<h3 id="section">什么是比特币</h3>

<p>我就算是写上一大堆也没几个人愿意一点一点的看，那就直接上视频吧，清晰明了，快捷方便。</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XMjY4MTA3NDky" frameborder="0" allowfullscreen=""></iframe>

<p>如果看完上面的视频，你还没有动心，那么让我来告诉你，根据我现在（2013/5/13 4:48:56）在<a href="https://btcchina.com/">比特币中国交易平台</a>查到的信息，比特币成交价为<strong>701.01RMB</strong>，怎么样现在开始动心了么，一枚比特币就可以换700多人民币，而且挖矿的过程只不过是动用你电脑上现在不用的剩余资源，呵呵，现在已经蠢蠢欲动了吧。既然<a href="http://setiathome.berkeley.edu/">SETI@HOME</a>用电脑的剩余资源寻找外星人，那么我们为什么不能用自己电脑的剩余资源赚点钱呢？</p>

<h3 id="section-1">比特币的黑历史</h3>

<p><a href="http://bbs.btcman.com/">btcman</a> 论坛的 <a href="http://bbs.btcman.com/home.php?mod=space&amp;uid=338">挖煤矿工</a> 用<a href="http://bbs.btcman.com/forum.php?mod=viewthread&amp;tid=2547">一段话</a>简单直白的概述了比特币的由来：</p>

<blockquote>
  <p>1982年，大卫·乔姆(David Chaum)提出不可追踪的密码学网络支付系统。8年后，他将此想法扩展为密码学匿名现金系统，即Ecash。1998年，戴伟(Wei Dai)的论文阐述了一种匿名的、分布式的电子现金系统：b-money。与此同时，尼克·萨博(Nick Szabo)发明了Bitgold，提出工作量证明机制，用户通过竞争性地解决数学难题，然后将解答的结果用加密算法串联在一起公开发布，构建出一个产权认证系统。哈尔·芬尼(Hal Finney)则把该机制完善为一种“可重复利用的工作量证明”。在前人的工作基础之上，2008年，名不见经传的“中本聪”在metzdowd.com的密码学邮件组列表中发表了《比特币：一种点对点的现金支付系统》。2009年1月3日，比特币网络诞生，中本聪本人发布了开源的第一版比特币客户端。</p>
</blockquote>

<p>由上面的历史可以看出比特币的“生父”就是“中本聪”啦，那么这个人是谁呢？谁也不知道，看名字像是个日本人，但是这是一个网名啊，谁知道真的假的，网上流传着这样一种说法，说其实“中本聪”是一个俄罗斯人（俄罗斯人的密码学可是很厉害的~~~），比特币是俄罗斯黑社会为了洗黑钱而发明的一种虚拟币，也就是说，则是老毛子下的一盘很大的棋。</p>

<h3 id="section-2">如何挖矿</h3>

<p><img src="https://lh6.googleusercontent.com/-kj4r1JUXyaw/UZDEEMk9a7I/AAAAAAAAAzs/6CfyfkoTqb4/s560/unnamed17-560x274.jpg" alt="挖矿去" /></p>

<p>重点来了，既然我们害怕在比特币市场内投资（由于市场变动剧烈，你可能血本无归），那么我们可以自己动手丰衣足食。</p>

<p>首先明确，挖矿是怎样得到比特币的。你用电脑帮助比特币交易计算一组非常复杂的 hash 值，每计算出来一个，你就可以获得25比特币，<a href="http://www.businessinsider.com/how-bitcoins-are-mined-and-used-2013-4">这里</a>有一个详细的介绍。但是</p>

<blockquote>
  <p>事实上，单独挖矿模式几近被淘汰。由于挖矿的流行和发现矿源的困难导致现在需要3年以上才能挖掘到比特币。而如果你仅仅找一台PC并让它不停的运行一些算法，电费和设备的损耗会比得到的比特币还要贵的。</p>
</blockquote>

<p>所以现在没人再去 solo 了，都是进行联合挖矿（就是将多台电脑通过互联网形成一个虚拟的超级电脑来进行挖矿），一些网站会提供一个联合挖矿的矿池，当你在这个矿池内挖矿的时候，矿池会按照你完成工作的比例，付给你一定比例的奖金，你的矿机（就是用来挖矿的设备）越好，你完成的工作比例越高，你得到的奖金也就越多。很久以前，还可以 solo 的时候，用电脑的 CPU 挖矿就可以了，现在大部分人都在使用 GPU 或是计算性能更高的 <a href="http://bbs.21ic.com/icview-243258-1-1.html">FPGA</a>，现在专门用来挖矿的设备也开始如雨后春笋般不断地冒出来。下面就是为了挖矿需要准备的东西：</p>

<ol>
  <li>
    <p>首先，你需要有一个比特币的钱包，用来存放你的比特币。当然，如果你对交易平台足够放心，你可以直接将挖到的比特币汇往交易平台，但是并不推荐这样做，最近黑客频繁攻击各大比特币交易平台，它们的安全性并不是多么好，而且将来你说不定还会进行其他比特币交易，而不仅仅是拿比特币换钱，所以有个比特币钱包还是很必要的。</p>

    <p>比特币钱包分为两种：本地钱包和网络钱包。</p>

    <ul>
      <li>
        <p>本地钱包：顾名思义，就是在你的电脑上下载一个客户端，好处是绝对安全，除非其他人直接操控你的电脑，否则根本无法动你钱包里的东西。本地钱包有三种选择：</p>

        <ul>
          <li>标准比特币客户端：也就是官方客户端，当年“中本聪”开发的客户端。当刚安装完后必须下载整个（目前约3G）的区块链，这会占用几个小时的，并且每次启动客户端后，也需要几分钟的同步时间。<a href="https://zh-cn.bitcoin.it/wiki/%E9%A6%96%E9%A1%B5">这里</a>下载</li>
          <li>Armory：Armory 是最先进的Bitcoin的客户端，它提供了一系列的功能，有的甚至比Blockchain还强大。但是你需要为享受这些便利支付软件使用费用。Armory 客户端没有自己的网络功能，需要标准客户端在底层运行。它需要和标准客户端一起运行，至少需要2 GB的RAM ，因此在配置较差的的计算机上运行比较困难。<a href="https://bitcoinarmory.com/get-armory/">这里</a>下载</li>
          <li>Electrum：一个轻量级的桌面客户端，这意味着它不会下载完整的blockchain。相反，它需要服务器上做大量的工作。其实，这相当于一个网络钱包的客户端而已。汇钱等基本使用的话有图形化界面，但是稍微高级点的功能只能通过命令行才能使用。<a href="http://electrum.org/download.html">这里</a>下载。</li>
        </ul>
      </li>
      <li>
        <p>网络钱包：本地钱包占用的电脑硬盘实在是太多了，对于我们这种以娱乐为目的的人来说实在是太浪费了，使用网络钱包应该就可以了。但是网络钱包并不安全，黑客攻击、运营倒闭等等都会危机到你钱包里的比特币。对于网络钱包有下面两个选择：</p>

        <ul>
          <li>Blockchain：是一个在线钱包和桌面客户端之间的混合，提供高安全性的钱包。Blockchain是通过存储你的钱包的密匙和运行所必需的代码解密你的钱包在您的浏览器登录交易，所以Blockchain有没有办法访问您的资金。客户端还提供了可以下载和备份你的钱包到您的计算机，或印刷在纸张上。除此之外Blockchain提供了一些高级功能。如果您已经创建了你所私钥的密码，您可以将其导入到Blockchain，等于将你的钱包备份在你的大脑中。它还采用了先进的离线模式，让你在没有网络连接下使用离线的钱包，可以签名交易，无论通过印刷或记忆。当然，Blockchain也为iPhone和Android提供了自己的集成的移动应用程序。 官网在<a href="http://blockchain.info/wallet">这里</a></li>
          <li>Coinbase：一个还在测试的网络钱包，基本功能可以保障，也有iphone和Android客户端。官网在<a href="https://coinbase.com">这里</a>。我注册的就是这里。</li>
        </ul>
      </li>
    </ul>

    <p>不论是什么钱包，对于我们最重要的就是里面产生的那个 “Bitcoin Addresses”。这相当于一个向你你钱包内汇款的地址，这个地址可以生成无限个，钱包会把所有地址汇过来的钱收集在一起，为了安全，最好每次交易活动都用一个新的地址，旧地址忘了也没关系，只要钱包里保存着，有钱汇入就会自动汇总到总钱数里的。会生成 “Bitcoin Addresses”，并会复制粘贴 “Bitcoin Addresses”（复制粘贴应该没有人不会吧 -_-|||），就算学会钱包的基本用法了。</p>
  </li>
  <li>
    <p>你需要找一个联合挖矿的矿池，提供这种矿池的网站很多，比较出名的是以下三个：</p>

    <ul>
      <li><a href="https://mining.bitcoin.cz">Slush’s pool</a></li>
      <li><a href="https://deepbit.net">deepbit</a></li>
      <li><a href="https://www.btcguild.com">BTC Guild</a></li>
    </ul>

    <p>每个网站的使用方法基本都是一样的。注册一个账户，在账户里面你可以再建立 worker，每个账户里 worker 的数量是没有限制的。worker 分为两部分，worker 名和密码。这个就是你的工作账户（有点像是工作证），以后在挖矿软件上需要输入这个。为了防止冲突，建议每个挖矿机器上使用不同的 worker。密码不是重点（BTC Guild 上直接就不需要密码），因为别人即使知道了你 worker 的密码，最多也就是帮你挖矿（求之不得），不会对你造成任何危害，怎么简单怎么设吧。记得在你的钱包里生成一个 “Bitcoin Addresses”，放在矿池网站上，然后设置一个最小汇款金额，如果你急着想看到新比特币入账，可以设为0.1。</p>
  </li>
  <li>
    <p>OK。现在就差一个挖矿软件（也就是矿机）了。由于有关比特币的软件全部都是开源的，所以矿机也是各种各样，你需要根据你使用的硬件来选择矿机，如果你有独立显卡，尽可能使用GPU计算程序，因为设计结构和指令集不同，GPU 计算能力一般是CPU的几十至几百倍。如果使用AMD/ATI显卡，还需安装<a href="http://developer.amd.com/tools-and-sdks/heterogeneous-computing/amd-accelerated-parallel-processing-app-sdk/downloads/">AMD显卡开发包</a>。<a href="http://www.bitcoinx.com/bitcoin-mining-software/">这里</a>有一张现在比较流行的矿机的列表，你可以根据自己使用的操作系统和硬件来选择（BTC Guild 会很人性的提供一个矿机，如果你只在 BTC Guild 上挖矿的话，就是用那个矿机就好了）。</p>

    <ul>
      <li>Windows 用户建议使用 <a href="http://50miner.org/">50miner</a> 或是 <a href="http://guiminer.org/">GUIminer</a></li>
      <li>Mac 用户可以选择<a href="http://pan.baidu.com/share/link?shareid=521891&amp;uk=4080321956">这个</a></li>
      <li>Linux 用户可以看看<a href="https://docs.google.com/document/d/1Gw7YPYgMgNNU42skibULbJJUx_suP_CpjSEdSi8_z9U/preview?sle=true">这个</a>，一份 Ubuntu 挖矿指南。</li>
    </ul>

    <p>不论是哪一个软件，使用方法都是差不多的。下面是 GUIminer 的界面。</p>

    <p><img src="https://lh5.googleusercontent.com/-w66fdowLBDk/UZDBCKFIxXI/AAAAAAAAAzY/ljnjQiqQ-wQ/s825/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25886.30.46.png" alt="GUIMiner" /></p>

    <p>在 server 中选择你刚才注册的矿池网站的名字，如果不知道，可以去矿池网站的帮助里看一看。username 填写你 worker 的名字，密码是你 worker 的密码，device 中选择你用来挖矿的硬件，可以选择 GPU 就选择 GPU 吧，CPU 的话你连电费都赚不回来。Extra flags 可以不设置，它是设置挖矿软件运行参数的地方，具体怎么设置要根据你使用的软件来定。我一般就是设置一个 <code>-fxx</code>，“xx”数字越大，挖矿程序占用的硬件资源越少，允许你自由使用的硬件资源越多。好了，现在可以 “start mining!”。如果一切正常，你会看见右下角会出现你现在硬件的计算速度（如下图），并且电脑散热的部分一会儿会很烫，你用来运算的硬件（GPU或是CPU）的负载应该会飙升到100%左右，现在你的电脑就正式成为你的矿机了。(*^◎^*)</p>

    <p><img src="https://lh3.googleusercontent.com/-KS9LIR0JjuA/UZDErk5s6bI/AAAAAAAAAz0/55mpltDtDiA/s818/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25886.46.30.png" alt="右下角出现计算速度，我的 CPU 速度超级慢，还是 GPU 好啊" /></p>
  </li>
  <li>
    <p>最后就是如何把挖到比特币换为人民币了。首先到<a href="https://btcchina.com/">比特币中国</a>注册一个账户，进入账户之后，你就可以看到一个交易平台了，上面的内容都很直白明了。首先选择左边的“比特币充值”，会给你一个充值ID，从你的钱包中，将比特币汇入到“充值ID”中就可以了。然后再点选“卖出比特币”，等卖出得到的 RMB 到账之后，就可以点选“人民币提现”了。还是很方便的。</p>

    <p><img src="https://lh5.googleusercontent.com/-W3yO6MMvd6k/UZDN3gdKkuI/AAAAAAAAA0E/YrDRbUhQrbY/s364/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-13%2520%25E4%25B8%258B%25E5%258D%25887.17.29.png" alt="比特币换人民币" /></p>
  </li>
</ol>

<p>如果想了解跟多的关于比特币的信息，可以到<a href="https://zh-cn.bitcoin.it/wiki/%E9%A6%96%E9%A1%B5">比特币的中文wiki</a>或是<a href="https://bitcointalk.org/index.php?board=30.0">比特币的中文论坛</a>去看一看，会很有收获的。</p>

<p>我已经用我的 Macbook Pro 的 CPU 以 1.9Mhash/s 挖了一个多星期了，现在只有 0.00016 的比特币，其实这就是折腾，认真你就输了，你觉得呢？祝大家挖到满钱包的比特币。</p>

<p>PS：有没有人想和我一起开发个挖矿的 FPGA 板子啊，留言或是邮箱联系我啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谢谢你，妈妈]]></title>
    <link href="http://pikipity.github.com/blog/2013-mothers-day.html"/>
    <updated>2013-05-12T09:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/2013-mothers-day</id>
    <content type="html"><![CDATA[<p>谢谢你，妈妈，母亲节快乐，能够由你把我带到这个世界真是太好了。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=562991&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十章 LCD]]></title>
    <link href="http://pikipity.github.com/blog/lcd.html"/>
    <updated>2013-05-11T09:08:00+08:00</updated>
    <id>http://pikipity.github.com/blog/lcd</id>
    <content type="html"><![CDATA[<h3 id="lcd">什么是LCD</h3>

<p>LCD 就是液晶显示器，维基百科的解释在<a href="https://zh.wikipedia.org/wiki/%E6%B6%B2%E6%99%B6%E6%98%BE%E7%A4%BA%E5%99%A8">这里</a>，以前的小液晶显示器没有背光，但是现在大多数 LCD 都会加入背光来使得显示器在没有外界光线的情况下也可以使用，但是背光的加入就让能耗上升了。</p>

<p>一般分为下面三种类型：</p>

<ul>
  <li>文字型：内部存储器中内建有文字图形，输入对应的 ASCII code 就可以显示文字了。</li>
  <li>绘图型：内部存储器无内建文字图形，所有显示的图形都必须按照 LCD 所对应的格式进行存储。</li>
  <li>文字绘图两用型：可在上面两种形式下自由切换。</li>
</ul>

<p>下面介绍最简单的文字型 <a href="https://docs.google.com/file/d/0B8AjE9xqZzSiNDhUMWNGdE1VMW8/edit?usp=sharing">LCD1602</a> 为例进行介绍。LCD1602 共两行，每行可以显示16个字符。液晶显示器本身的控制非常复杂，所以我们需要外加一个芯片对其进行控制，一般情况下，在市面上买到的液晶显示器已经内置了这个控制芯片。对于字符型，一般使用 <a href="https://docs.google.com/file/d/0B8AjE9xqZzSiM09lbkVrQzJ0dDQ/edit?usp=sharing">HD44780</a> 控制芯片来进行控制。</p>

<!--more-->

<h3 id="lcd1602-">LCD1602 接脚示意</h3>

<p><img src="https://lh6.googleusercontent.com/-TwNOURsoWgc/UY2e9twOMKI/AAAAAAAAAyk/V3-F2RomnuA/s720/SMK1632_LCD1602_3.jpg" alt="LCD1602" /></p>

<p>按照上图从左到右的顺序，每个接脚的意义为：</p>

<ul>
  <li>GND：接地</li>
  <li>Vcc: 电源（5V）</li>
  <li>V0：LCD亮度控制，一般用一个变阻器分压的方式来控制这个接脚的电压，一次来调节 LCD 显示的亮度，0V最亮</li>
  <li>RS：暂存器选择接脚。接高为资料暂存器，接低为指令暂存器</li>
  <li>R/W：读写选择接脚。接高为读，接低为写。</li>
  <li>E：致能 LCD 接脚</li>
  <li>D0~D7：资料线，传输数据</li>
  <li>Vcc: 背光电源，可以串连一个330Ω的电阻，然后之间连接到5V电源</li>
  <li>GND：背光地</li>
</ul>

<h3 id="section">控制方法</h3>

<p>LCD内部寄存器分为指令寄存器和资料寄存器。指令寄存器就是用来写入你要 LCD 执行的指令的地方，例如控制游标的移动，，控制游标的显示方式，读取忙碌旗标等等，当一条命令写入之后，LCD便会执行这条命令。资料寄存器就是用来写入希望LCD显示内容的地方，在资料输入前，必须先指定资料存储的地址，然后再输入资料的内容。</p>

<p>在控制的过程中要注意两点：</p>

<ol>
  <li>控制 E 来置能 LCD，要根据时序图来控制，简单来说就是：在读写前先拉低 E，再拉高 E，创造一个上升沿，读写结束后，要拉低 E。</li>
  <li>
    <p>LCD 对于数据的处理速度非常慢，所以数据是否读写完毕是一个非常重要的问题，有下面两种方法可以判断数据是否读写完毕：</p>

    <ol>
      <li>R/W 接脚接地，一直保持写的状态，每次写完数据之后预留出足够长的时间给LCD处理信号。虽然程序和电路简单，但是预留时间长短难以控制。</li>
      <li>R/W 不接地，通过读取 LCD 的忙碌旗标来判断数据是否读取完毕。虽然程序和电路复杂，但是不用考虑预留时间的长短。</li>
    </ol>
  </li>
</ol>

<h3 id="lcd-1">LCD模组命令</h3>

<p>下面的命令从左到右分别对应的接脚为</p>

<pre><code>RS  R/W  D7  D6  D5  D4  D3  D2  D1  D0
</code></pre>

<ol>
  <li>
    <p>向指令寄存器中写入的指令: 游标指示的就是如果未重新指定资料存放的地址，新写入的资料就会在游标处显示。</p>

    <ul>
      <li>
        <p>功能设定:</p>

        <pre><code>0 0 0 0 1 DL N F X X
</code></pre>

        <p>DL: 资料长度。DL=0，高4位。DL=1,8位</p>

        <p>N: 可以显示的行数。N=0，一行。N=1，两行。</p>

        <p>F: 字形设定。F=0，5*7点阵。F=1，5*10点阵。</p>
      </li>
      <li>
        <p>显示器控制：</p>

        <pre><code>0 0 0 0 0 0 1 D C B
</code></pre>

        <p>D: 显示器开关</p>

        <p>C：是否用游标显示位元位置</p>

        <p>B：是否让游标闪烁</p>
      </li>
      <li>
        <p>输入模式设定：</p>

        <pre><code>0 0 0 0 0 0 0 1 I/D S
</code></pre>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">S</th>
              <th style="text-align: center">I/D</th>
              <th style="text-align: center">动作</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">字元不动，游标左移</td>
            </tr>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">字元不动，游标右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">游标不动，字元右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">游标不动，字元左移</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>清除显示（显示屏清零，游标回归左上角）：</p>

        <pre><code>0 0 0 0 0 0 0 0 0 1
</code></pre>
      </li>
      <li>
        <p>游标归位（资料不变，仅将游标移至左上角位置）：</p>

        <pre><code>0 0 0 0 0 0 0 0 1 X
</code></pre>
      </li>
      <li>
        <p>游标移位控制：</p>

        <pre><code>0 0 0 0 0 1 S/C R/L X X
</code></pre>

        <table>
          <thead>
            <tr>
              <th style="text-align: center">S/C</th>
              <th style="text-align: center">R/L</th>
              <th style="text-align: center">动作</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">游标左移</td>
            </tr>
            <tr>
              <td style="text-align: center">0</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">游标右移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">0</td>
              <td style="text-align: center">整屏左移</td>
            </tr>
            <tr>
              <td style="text-align: center">1</td>
              <td style="text-align: center">1</td>
              <td style="text-align: center">整屏右移</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>
    <p>从指令寄存器读取忙碌旗标</p>

    <pre><code>0 1 BF A6 A5 A4 A3 A2 A1 A0
</code></pre>

    <p>BF: 忙碌旗标</p>

    <p>A0~A6: 游标所在位置</p>
  </li>
  <li>
    <p>向资料寄存器写入资料：资料寄存器分为两个 – CGRAM 和 DDRAM。在写入资料之前要先判断两件事：</p>

    <ol>
      <li>
        <p>现在游标所在的位置是否是下一笔数据要显示的位置。如果是，就直接向 DDRAM 写入资料就可以了；如果不是就移动游标到需要的位置或是从新指定 DDRAM 的地址。两行每行8个字的地址如下：</p>

        <p>第一行：从<code>0x00</code>到<code>0x0F</code></p>

        <p>第二行：从<code>0x40</code>到<code>0x4F</code></p>
      </li>
      <li>
        <p>要显示的字符在 ASCII 码中是否有对应。如果有，直接写入对应的 ASCII 码就可以了；如果没有就需要先在 CGRAM 中将这个字符造出来，造字分为两步，首先，指定这个新字符在 CGRAM 中存放的地址，然后向这个地址中写入要造的字符就可以了。每一个字符都是一个8*8的点阵，也就是说，你要连续写入8次数据。需要注意的是，左边三列有空出来，一般为了美观，最下面一行要空出来，下面是一个笑脸的造字示意图</p>

        <p><img src="https://lh3.googleusercontent.com/-k6OQiaSfv1A/UY2w9DI1x6I/AAAAAAAAAy0/-xuEFMzKUsk/s614/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-11%2520%25E4%25B8%258A%25E5%258D%258810.45.34.png" alt="存放在```0x40```的一个笑脸" /></p>

        <p>可以用来存放新字符的 CGRAM 的地址如下：<code>0x40</code>，<code>0x48</code>，<code>0x50</code>，<code>0x58</code>，<code>0x68</code>，<code>0x70</code>，<code>0x78</code>。要使用的时候，就和写入 ASCII 码一样，直接向 DDRAM 中写入 CGRAM 的地址就可以了。</p>
      </li>
    </ol>

    <p>写入资料的时候，先写入地址（如果地址就是光标位置就不用写入地址了），然后写入资料就可以了。</p>

    <p>命令如下：</p>

    <ul>
      <li>
        <p>CGRAM 地址写入（由于地址的高四位至少也是4，所以A7=0，A6=1）</p>

        <pre><code>0 0 0 1 A5 A4 A3 A2 A1 A0
</code></pre>
      </li>
      <li>
        <p>DDRAM 地址写入（A7必须是1，后面的7位按照提到的方法确定）</p>

        <pre><code>0 0 1 A6 A5 A4 A3 A2 A1 A0
</code></pre>
      </li>
      <li>
        <p>向 DDRAM 和 CGRAM 中写入资料：</p>

        <pre><code>1 0 D7 D6 D5 D4 D3 D2 D1 D0
</code></pre>
      </li>
      <li>
        <p>读取 DDRAM 和 CGRAM 中的资料：</p>

        <pre><code>1 1 D7 D6 D5 D4 D3 D2 D1 D0
</code></pre>
      </li>
    </ul>
  </li>
</ol>

<h3 id="section-1">例程</h3>

<p>为了方便，这里用C语言编写例程，我们只要把命令放入一个.h头文件中，在需要的时候调用这个头文件里的函数就可以。我这里电路接法:</p>

<p><img src="https://lh5.googleusercontent.com/-gswQOTl2dNU/UY27DOjDqgI/AAAAAAAAAzE/rOD-GyLHY2U/s321/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-11%2520%25E4%25B8%258A%25E5%258D%258811.28.45.png" alt="LCD1602例程接法" /></p>

<p>ADDR0就是P1.0，ADDR1就是P1.1，ENLCD1就是P1.5，DB0~DB7就是P0.0~P0.7。头文件 LCD.h 如下</p>

<pre><code>#ifndef _LCD_H_
#define _LCD_H_

sbit ADDR0=P1^0;
sbit ADDR1=P1^1;
sbit ENCLD1=P1^5;
sbit DB0=P0^0;
sbit DB1=P0^1;
sbit DB2=P0^2;
sbit DB3=P0^3;
sbit DB4=P0^4;
sbit DB5=P0^5;
sbit DB6=P0^6;
sbit DB7=P0^7;

void waiting()
{
	P0=0xFF;
	while(DB7)
	{
		ENLCD1=0;
		ADDR0=0;
		ADDR1=1;
		ENLCD1=1;
	}
	ENLCD1=0;
}

void write_cmd(unsigned char cmd)
{
	waiting();
	ENLCD1=0;
	ADDR0=0;
	ADDR1=0;
	P0=cmd;
	ENLCD1=1;
	ENLCD1=0;
}

void write_data(unsigned char dat)
{
	waiting();
	ENLCD1=0;
	ADDR0=1;
	ADDR1=0;
	P0=dat;
	ENLCD1=1;
	ENLCD1=0;
}

void write_string(unsigned char addr,unsigned char *p)
{
	addr=addr|0x80;
	write_cmd(addr);
	while(*p!='\0')
	{
		write_data(*p++);
	}
}

void LCD_init()
{
	write_cmd(0x38);
	write_cmd(0x0C);
	write_cmd(0x06);
	write_cmd(0x01);
}

#endif
</code></pre>

<p>如果要输出一句”Hello World!”的话，主程序可以这样写:</p>

<pre><code>#include &lt;REG52.h&gt;
#include &lt;LCD.h&gt;
#include &lt;intrins.h&gt; 

unsigned char code World[]={"Hello World!"};

void main()
{
	LCD_init();
	write_string(0x00,World);
	write_string(0x42,World);
	while(1);
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暑假开始 O(∩_∩)O]]></title>
    <link href="http://pikipity.github.com/blog/summer-vacation-2013.html"/>
    <updated>2013-05-10T09:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/summer-vacation-2013</id>
    <content type="html"><![CDATA[<p>暑假第一天，庆祝一下，福利放送~~~~~~~~~</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=556019&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[女朋友生日的影响]]></title>
    <link href="http://pikipity.github.com/blog/affect-of-girl-friend-birthday.html"/>
    <updated>2013-05-10T09:05:00+08:00</updated>
    <id>http://pikipity.github.com/blog/affect-of-girl-friend-birthday</id>
    <content type="html"><![CDATA[<p>今天去看了一下 Google Analysis 上我的网站的浏览量，吓死我了，女朋友生日给我带来了大量浏览量，天啊，这宣传也太有效了吧。</p>

<p><img src="https://lh5.googleusercontent.com/-H832N76TdRc/UYxI9ViL7aI/AAAAAAAAAyU/tkljiGJ0i6I/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-10%2520%25E4%25B8%258A%25E5%258D%25889.07.26.png" alt="5月8日惊人的浏览量" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电子发烧友《医疗电子特刊》]]></title>
    <link href="http://pikipity.github.com/blog/medical-elecfans-2013.html"/>
    <updated>2013-05-08T09:12:00+08:00</updated>
    <id>http://pikipity.github.com/blog/medical-elecfans-2013</id>
    <content type="html"><![CDATA[<p><a href="http://www.elecfans.com/">电子发烧友</a>出了一期《<a href="http://www.elecfans.com/tt/act2013/medical/?utm_source=banner&amp;utm_medium=email&amp;utm_campaign=tekan20130507">医疗电子特刊》</a>，还是很不错的，以后想从事医疗电子方面的可以看一下，了解一下现在医疗电子的发展局势。网址在<a href="https://docs.google.com/file/d/0B8AjE9xqZzSiOG5LVHdkYmd2T2s/edit?usp=sharing">这里</a></p>

<p><a href="https://docs.google.com/file/d/0B8AjE9xqZzSiOG5LVHdkYmd2T2s/edit?usp=sharing"><img src="https://lh5.googleusercontent.com/-JPg0luhQPyw/UYmn2p7RrlI/AAAAAAAAAyE/Wh-q37m8o7w/s500/fengmian.jpg" alt="电子发烧友《医疗电子特刊》" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可全方位移动机器人]]></title>
    <link href="http://pikipity.github.com/blog/tapikema.html"/>
    <updated>2013-05-08T08:54:00+08:00</updated>
    <id>http://pikipity.github.com/blog/tapikema</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-PfSqIt_Jo2U/UYmktnAyCHI/AAAAAAAAAx0/vwc7mb-5Pno/s450/1706864258774701006.jpg" alt="攻壳特工队" /></p>

<p>今天看到这样一个视频，总感觉这玩意在哪见过，最后恍然大悟，这不就是<a href="http://section9.seezone.net/index.php">《攻壳特工队》</a>里的<a href="http://baike.baidu.com/view/1512717.htm">“塔奇克马”</a>么？日本人的科技实力绝对不是盖的。( ⊙ o ⊙ )</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XMzMzOTE2MDI0" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生日快乐]]></title>
    <link href="http://pikipity.github.com/blog/happy-birthday-girl-friend.html"/>
    <updated>2013-05-07T23:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/happy-birthday-girl-friend</id>
    <content type="html"><![CDATA[<p>祝颖思生日快乐~~~~~~</p>

<p>终于赶在12点之前做完了，一个我自己编写的聊天软件，可能中文会出现乱码，在各个电脑上的测试结果都不一样让我都不知道怎么办了，希望你能正常打开。</p>

<p>安装程序乱码就没事了，只要打开软件之后不要乱码就好。</p>

<p>最喜欢看你的笑了，希望你天天都能快快乐乐。还有很多话，但是不着急。我们还是软件里说吧   </p>

<p>O(∩_∩)O   \(^o^)/  ( ^_^ )   (*^◎^*)</p>

<p>软件在这里下载：<a href="http://pan.baidu.com/share/link?shareid=511981&amp;uk=4080321956">Love You</a></p>

<p><img src="https://lh5.googleusercontent.com/-1U5iI1ftJek/UYkfseuWuhI/AAAAAAAAAxk/CBOI4N3nO8Q/s576/sy_20100930223139310040.jpg" alt="Happy Birthday to You" width="480" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第九章 时序]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-9.html"/>
    <updated>2013-05-01T00:09:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-9</id>
    <content type="html"><![CDATA[<p>时序在设计电路中很重要，在仿真软件中仿真正常，但是在实际中却出现各种各样奇怪的问题，例如LED应该亮的时候不亮，不应该亮的时候乱亮，导致整个LED矩阵一片混乱，如果接脚一切正常的话，一般就是时序不符合要求，更换芯片或是减少过程中的芯片数量一般就可以解决，但是这些并不是应该在完成产品之后再调整的，否则成本会大大增加，所以时序问题在设计初期就应该考虑进去，来保证最终产品的稳定运行。</p>

<p>每个芯片的说明书上一般会配有大量的时序图，下面是一张 AT89C51 读取外部程序寄存器时候的时序图。</p>

<p><img src="https://lh6.googleusercontent.com/-pshiBXBDYZk/UYCMoDCR-iI/AAAAAAAAAxQ/vC3Zt2T4RvU/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-05-01%2520%25E4%25B8%258A%25E5%258D%258811.29.57.png" alt="AT89C51 读取外部程序寄存器时的时序图" width="480" /></p>

<p>为了方便后面的讲解，我们在这里将时序图上的各个元素进行重新命名：</p>

<ul>
  <li>时序图中每一行对应一个接脚，我们在这里管这些接脚叫“对象”</li>
  <li>对于单片机或是芯片的时序图很简单，对于一个对象的一个时间下，此对象只有两种可能的状态：0或者1。我们管1叫“事件”，从0到1叫“事件发生”，从1到0叫“事件结束”。</li>
  <li>时序图上标出的各种各样的时间，例如<script type="math/tex">t_{LHLL}</script>、<script type="math/tex">t_{PLPH}</script>，我们管他们叫“要求”</li>
</ul>

<p>接下来的问题就是我们如何知道自己练的电路是否满足时序要求呢？我们可以按照下面的步骤，一步一步来确定<sup id="fnref:note1"><a href="#fn:note1" rel="footnote">1</a></sup>：</p>

<ol>
  <li>对于每一个元件时序图上的“事件”明确哪一个是“输入事件”<sup id="fnref:note2"><a href="#fn:note2" rel="footnote">2</a></sup>、哪一个是“输出事件”<sup id="fnref:note3"><a href="#fn:note3" rel="footnote">3</a></sup>。在这一步我们其实就可以确定接脚连法的逻辑是否正确了，如果两个“输入事件”对联那肯定就不对了。</li>
  <li>根据上面找到的“输入事件”，找到并标出停止于“输入事件”的“要求”。对于时序图所指示的这个元件来说，这些“要求”是需要外部元件来配合自己的，我管它们叫“真要求”，而其他“要求”是自己用来配合其他元件的，我管他们叫“假要求”。</li>
  <li>然后对于每一个元件的每一个“真要求”，根据接脚的连法，看对应的“假要求”是否满足就可以了。重点是看这个“真要求”起于何时止于何时，这样就可以找到对应的“假要求”了，然后对应大小关系，就可以了。</li>
</ol>

<h2 id="section">脚标</h2>

<div class="footnotes">
  <ol>
    <li id="fn:note1">
      <p>我这里忽略掉了导线产生的信号延迟，如果需要，直接加入就可以了<a href="#fnref:note1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:note2">
      <p>如果这个信号对于时序图所指示的这个元件是一个输入信号的话，我管它叫“输入事件”<a href="#fnref:note2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:note3">
      <p>如果这个信号对于时序图所指示的这个元件是一个输出信号的话，我管它叫“输出事件”<a href="#fnref:note3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看 Fedora 19 Alpha，长知识]]></title>
    <link href="http://pikipity.github.com/blog/fedora19-alpha.html"/>
    <updated>2013-04-30T12:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/fedora19-alpha</id>
    <content type="html"><![CDATA[<p>Fedora 19 的版本代号为 “Schrödinger’s Cat”，最近薛定谔躺着也中枪，让我们来看看到底薛定谔的这只“胖次”给我们带了哪些新的玩物？</p>

<p><a href="http://fedoraproject.org/zh_CN/get-prerelease"><img src="https://lh6.googleusercontent.com/-X7BDIQYkShQ/UX9PhH6qR-I/AAAAAAAAAxA/5nibeeLBO8o/s200/f19alpha.png" alt="下载Fedora 19 Alpha" width="400" /></a></p>

<ul>
  <li>开发者助手：采用直观的一条龙方式帮助首次使用 Linux 作为开发环境的用户部署指定语言的开发环境、模板、样例，且允许创建和 Github 的链接。没啥好说的，对于用 Linux 开发的新手来说很实用</li>
  <li><a href="http://zh.wikipedia.org/wiki/%E4%B8%89%E7%BB%B4%E6%89%93%E5%8D%B0">3D 建模及打印</a>：增加对 OpenSCAD、Skeinforge、SFACT、Printrun 和 RepetierHost 等 3D 建模及打印工具的软件包。最近 3D 打印真的火起来了，虽然 4D 打印（材料的性质会随时间的变化而变化）已经开始研发，但是 3D 打印的实际应用和生活化还需要一段时间。</li>
  <li><a href="http://zh.wikipedia.org/wiki/Node.js">node.js</a>：增加流行的服务器端 JavaScript 实现 Node.js，以及其使用的包管理工具 npm。</li>
  <li><a href="http://zh.wikipedia.org/wiki/Ruby">Ruby</a> 2.0.0：增加新发布的 2.0.0 支持，已将保持提供对 1.9.3 的向后兼容。</li>
  <li>[Scratch](http://en.wikipedia.org/wiki/Scratch_(programming_language)：一个新的图形化的编程语言，主要用于计算机教学使用。是一个非常适合变成初学者玩的编程语言，非常有意思，只是在中国的推广比较弱，官网在<a href="http://info.scratch.mit.edu/">这里</a>，有中文文档下载。</li>
  <li>加入 Gnome 3.8、KDE 4.10 和 <a href="http://zh.wikipedia.org/wiki/MATE">MATE desktop</a> 1.6 的支持，这样一来主流桌面一应俱全了，很开心啊。说实话，当时刚换 Gnome 3 的时候各种不习惯，但是用惯了的话还是很有趣的。MATE desktop 的 Gnome 2 风格现在看起来还是丑了一点啊</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“扫雷”其实是一件燃到爆的游戏]]></title>
    <link href="http://pikipity.github.com/blog/saolei.html"/>
    <updated>2013-04-27T23:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/saolei</id>
    <content type="html"><![CDATA[<p>看完这个我才知道，原来“扫雷”还是这样<strong>燃</strong>的一个游戏。有兴趣的可以到这个<a href="http://saolei.net/">传说中的地方</a>看看，吓死人了。其实我是今天看了 <a href="https://zh.wikipedia.org/wiki/%E8%B8%A9%E5%9C%B0%E9%9B%B7">wikipedia</a> 才知道了这个<strong>燃到爆</strong>的游戏到底怎么玩。</p>

<embed src="http://17173.tv.sohu.com/playercs2008.swf?Flvid=1577735" quality="high" width="500" height="395" align="middle" allowscriptaccess="always" allowfullscreen="true" mode="transparent" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第八章 串口通信]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-8.html"/>
    <updated>2013-04-27T17:41:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-8</id>
    <content type="html"><![CDATA[<p>串口通信是CPU与周边其他设备传递数据的一种方式。8051单片机使用一组<a href="http://baike.baidu.com/view/15524.htm">全双工</a>的<a href="http://zh.wikipedia.org/wiki/UART">UART</a>，进行资料传输</p>

<h2 id="uart">UART的传输结构</h2>

<p>UART在传输一个字节（8个位元）的时候会在开始加入一个起始位元（一般为0），在末尾加上一个结束位元（一般为1），资料的传输如下：</p>

<pre><code>起始位元(0)  bit0 bit1 bit2 bit3 bit4 bit5 bit6 bit7 结束位元(1)
</code></pre>

<p>UART的接受端没有资料的时候为高电平（1），当检测到出现0时，开始接受数据，接收完8位数据之后，结束。注意：一个字节的数据是从最低位开始发送的。</p>

<p>这种传输方式也被计作<code>8N1</code>，第一个数字代表传输的符号数（此处为一个字节，8位，所以为”8”），第二个是是否根据数据中1的个数来进行验错（此处为”N”，意思是不验错，还可以为”E”，代表1的个数为偶数，”O”代表1的个数位奇数），最后一个数字是结束位元（此处结束位元为“1”）</p>

<h2 id="section">传输速度</h2>

<p>由于传输的数据很简单，所以通常以波特率来衡量传输速度，波特率指的是一秒钟传输的符号的个数，一般UART常用的波特率为1200、2400、4800、9600及19200等。</p>

<p>注意：不要和<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E7%89%B9%E7%8E%87">比特率</a>混淆，波特率指的是一秒钟传输的符号的个数，根据不同的调制形式，一个符号上可负载多个比特信息。比特率指的是1秒传输的比特数。</p>

<p>一般发射和接受端的波特率必须一样，否则会出现误传，但是如果波特率相差不是很大的话，错误率亦不会很大。</p>

<h2 id="uart-1">8051中UART工作机制</h2>

<p>当UART串口检测到有信号传入时，便将8位信号全部存到<code>SBUF</code>寄存器中，然后接受中断旗标置一，进入中断向量。</p>

<p>当向<code>SBUF</code>中移入数据的时候，UART便会将其发送出去，发送结束后，发送中断旗标置一，进入中断向量。</p>

<p>在发送和接受的过程中会使用 <code>Timer1</code> 来控制传输速率（波特率）</p>

<p>注意：尽管中断旗标不一样，但是中断向量却是同一个，都是 <code>23H</code>，所以在中断向量要判断到底是哪一个旗标让程序进入中断的。</p>

<h2 id="uart-2">UART设置</h2>

<p>由于UART要设置<code>Timer1</code>来控制波特率，所以设置比较复杂。需要用到<code>PCON</code>、<code>SCON</code>和<code>TMOD</code>、<code>TH1</code>、<code>TL1</code>。</p>

<h3 id="pcon">PCON</h3>

<p>不可位元寻址</p>

<pre><code>SMOD  -  -  -  GF1  GF0  PD  IDL
</code></pre>

<p>和UART有关的就是<code>SMOD</code>位，在后面的波特率计算公式中会出现。</p>

<h3 id="scon">SCON</h3>

<p>可位元寻址</p>

<pre><code>SM0  SM1  SM2  REN  TB8  RB8  TI  RI
</code></pre>

<ul>
  <li>
    <p>SM0与SM1：传输模式选择位</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">SM0</th>
          <th style="text-align: center">SM1</th>
          <th style="text-align: center">模式</th>
          <th style="text-align: center">描述</th>
          <th style="text-align: center">波特率</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">0</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center"><a href="http://elearning.stut.edu.tw/mechelec/ch8.htm">一般用于I/O扩充</a></td>
          <td style="text-align: center"><script type="math/tex">\frac{f_{os}}{12}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">0</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">8位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{32}\times\frac{f_{os}}{12(256-TH1)}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">1</td>
          <td style="text-align: center">0</td>
          <td style="text-align: center">2</td>
          <td style="text-align: center">9位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{64}f_{os}</script></td>
        </tr>
        <tr>
          <td style="text-align: center">1</td>
          <td style="text-align: center">1</td>
          <td style="text-align: center">3</td>
          <td style="text-align: center">9位元 UART</td>
          <td style="text-align: center"><script type="math/tex">\frac{2^{SMOD}}{32}\times\frac{f_{os}}{12(256-TH1)}</script></td>
        </tr>
      </tbody>
    </table>

    <p>一般使用模式1就可以了。</p>
  </li>
  <li>SM2: 在模式2和3中使能通信特性，一般不用。</li>
  <li>REN：使能接受，置一就是允许接受，置零就是不允许接收。</li>
  <li>TB8：在模式2和3中设定传输的第九位。</li>
  <li>RB8：在模式2和3中设定接受的第九位。</li>
  <li>TI：发送中断旗标。不能硬件置零。</li>
  <li>RI：接受中断旗标。不能硬件置零。</li>
</ul>

<h3 id="timer1">Timer1的设定</h3>

<p>一般选择8位自动重载模式就可以了，根据上面的波特率就可以计算出<code>TH1</code>中应该重载的数值。下面是一张设置对应表。</p>

<p><img src="https://lh4.googleusercontent.com/-IwsFV34WlVM/UXvO5DQs7qI/AAAAAAAAAww/nKiVKocEdsI/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-04-27%2520%25E4%25B8%258B%25E5%258D%25889.12.41.png" alt="UART设置对应表" width="450" /></p>

<h3 id="section-1">设置举例</h3>

<pre><code>;PCON设置
ANL PCON,#01111111B ;这里为SMOD=0，如果SMOD=1，就 ORL PCON,#10000000B
;设置传输模式
CLR SM0
SETB SM1
CLR SM2
;设置允许接受
SETB REN
;设置波特率
MOV TMOD,#00100000B ;Timer1 8位自动重载
MOV TH1,#0FDH       ;9600bps
SETB TR1            ;Timer1开始计时
;使能中断
SETB ES
SETB EA
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第七章 外部中断]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-7.html"/>
    <updated>2013-04-27T17:13:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-7</id>
    <content type="html"><![CDATA[<p>8051单片机提供两个外部中断口，当从这两个外部中断口接收到外部中断信号时程序就会跳到对应的中断向量的位置。这两个外部中断使用的是<code>P3.2/INT0</code>和<code>P3.3/INT1</code>两个口。<code>INT0</code>对应的中断向量为<code>03H</code>，<code>INT1</code>对应的中断向量为<code>13H</code>。</p>

<h3 id="section">外部中断的设置</h3>

<p>外部中断的设置使用的是可位元寻址的<code>TCON</code>的后四位，<code>TCON</code>各位的分布为（已在<a href="http://pikipity.github.com/blog/scm-priciple-6.html">第六章 计时器/计数器</a>中提过）:</p>

<pre><code>TF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0
</code></pre>

<ul>
  <li>IE1与IE0: 当检测到外部中断信号的边沿时，硬件置1；进入外部中断后，硬件置零。与软件无关</li>
  <li>IT0与IT1: 由软件置一或清零，控制外部中断的触发类型。置一则为下降沿除法（检测到下降沿就进入中断）。置零则为低电平触发（检测到低电平就进入中断）</li>
</ul>

<h3 id="section-1">触发方式的选择</h3>

<p>一般外部中断都是作为按键使用，由上面的设置可以看出，8051有两种外部中断触发方式，选择哪一种就成为了问题，两种各有优缺点：</p>

<ul>
  <li>下降沿触发：
    <ul>
      <li>
        <p>优点：程序编写简单，不会出现按键按下后就不断的触发中断的情况。设置方法如下：</p>

        <pre><code>SETB EX0
SETB IT0
SETB EX1
SETB IT1
SETB EA
</code></pre>
      </li>
      <li>
        <p>缺点：仅限于仿真中应用，实际应用中，无法防止误触按键的情况。并且按键只能局限于一下一下的按，不能出现长短按键的形式</p>
      </li>
    </ul>
  </li>
  <li>下降沿除法：
    <ul>
      <li>优点：通过软件的编写可以防止实际生活中误触按键的情况。基本思路就是在进入中断后先等待，一段时间后再次检测，看是否还是低电平，如果还是，就可以确定不是误触。可以通过程序编写出现长短按键的情况</li>
      <li>缺点：程序编写复杂，容易出现连续触发同一中断的情况</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可曾记得那个叫渚的女孩]]></title>
    <link href="http://pikipity.github.com/blog/ke-ceng-ji-de-na-ge-jiao-zhu-de-nu-hai.html"/>
    <updated>2013-04-15T22:17:00+08:00</updated>
    <id>http://pikipity.github.com/blog/ke-ceng-ji-de-na-ge-jiao-zhu-de-nu-hai</id>
    <content type="html"><![CDATA[<p>今天看到这样一个视频，觉得必须发上来，同样纪念一下那几个哭得死去活来的日日夜夜。</p>

<iframe height="498" width="510" src="http://player.youku.com/embed/XNTQyMzI4ODMy" frameborder="0" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电路在线仿真 CircuitLab]]></title>
    <link href="http://pikipity.github.com/blog/circuit-lab.html"/>
    <updated>2013-04-14T14:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/circuit-lab</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-deTm3UpSJbU/UWpMuGoHUWI/AAAAAAAAAwE/vfk_yAcBGrU/s912/Screen%2520Shot%25202013-04-14%2520at%25202.28.09%2520PM.png" width="480" alt="CircuitLab" /></p>

<p>今天推荐一个在线电路仿真平台 – <a href="https://www.circuitlab.com/">CircuitLab</a>。我推荐它主要有以下三点理由：</p>

<ol>
  <li>
    <p>界面友好、漂亮。下面的图片就是仿真界面，整个界面干净、简洁，每一部分是干什么的一目了然，基本就是即看即会，没有学习难度。仿真表达式、元件参数、仿真类型和 Spice 如出一辙，会用 Spice 就会用它。</p>

    <p><img src="https://lh4.googleusercontent.com/-roXJUk8YEhE/UWpMt56alSI/AAAAAAAAAv8/xOdU3O3Id-s/s800/Screen%2520Shot%25202013-04-14%2520at%25202.28.33%2520PM.png" width="480" /></p>
  </li>
  <li>
    <p>功能齐全。直流仿真、直流扫描、时域扫描、频域扫描一应俱全，结果和 Pspice 仿真结果对比，基本没有差别。元件也很齐全，不仅有MOSFET、BJT等模拟信号元件，还有如 Flip-flop、AND gate 等数字信号元件，允许混合仿真。仿真结果并不是只有图像输出，可以直接输出为数据的形式，很方便。</p>

    <p><img src="https://lh6.googleusercontent.com/-9bcBNFfIMTk/UWpQvprpvPI/AAAAAAAAAwg/SsBnHI5b9sY/s912/download.png" width="480" alt="Turn off time of 1N4007 diode" /></p>

    <p><img src="https://lh6.googleusercontent.com/-vSwD5cf2tlU/UWpQvaLCJgI/AAAAAAAAAwk/Pnf4UJ6-Xd0/s912/download%2520%25281%2529.png" width="480" alt="Turn off time of 1N4007 diode" /></p>
  </li>
  <li>
    <p>分享非常方便。保存电路图之后可以直接导出为多种主流图片格式，尤其是可以直接导出为 eps，插入到 <span class="latex">L<sup>a</sup>T<sub>e</sub>X</span> 中很是方便。也可以生成多种链接格式，在论坛、网页上插入很是方便、快捷。<a href="https://www.circuitlab.com/circuit/f6ex5x/diode-full-wave-rectifier/">这里</a>是一个 Diode full-wave rectifier，大家可以看一看。</p>

    <p><img src="https://lh3.googleusercontent.com/-2N9eayuom1c/UWpQvu52HcI/AAAAAAAAAwc/oCm6MvtAxSo/s396/Screen%2520Shot%25202013-04-14%2520at%25202.45.41%2520PM.png" width="380" alt="可生成的链接种类" /></p>
  </li>
</ol>

<p>这个在线电路仿真工具实在是居家旅行的必备神器啊。下面是一个官方介绍、演示视频。</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/f52GV1IpwVk" frameborder="0" allowfullscreen=""></iframe>

<p>网站在<a href="https://www.circuitlab.com/">这里</a>。喜欢的话，可以下载<a href="https://chrome.google.com/webstore/detail/circuitlab/haghanbgfkfpmepoohpigmglbfejljoj?utm_source=chrome-ntp-icon">这个</a>下载对应的 Chrome 插件，这样就不用每次打开编辑器都等待载入了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将 Google Scholar 上的搜索结果导出为 BibTex]]></title>
    <link href="http://pikipity.github.com/blog/bibtex-in-google-scholar.html"/>
    <updated>2013-04-12T18:20:00+08:00</updated>
    <id>http://pikipity.github.com/blog/bibtex-in-google-scholar</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-2ut2cDCgHbk/UWfg8TuUpOI/AAAAAAAAAvc/w2pTgBXwvBc/s621/Screen%2520Shot%25202013-04-12%2520at%25206.24.30%2520PM.png" width="480" /></p>

<p>BibTex 是一种用于管理文献、产生文献目录的格式，主要用于 LaTex 的参考书目的管理，但是格式要求很严格，而且英文文献管理时到底每个条目对应的是什么，让人很头疼。今天在 <a href="http://scholar.google.com/">Google Scholar</a> 上搜索论文的时候发现每个条目底下都有一个 “Cite” 按钮：</p>

<p><img src="https://lh4.googleusercontent.com/-UTz8Uw-kwGQ/UWfghmcarGI/AAAAAAAAAvQ/RTIRPc8aaUY/s718/Screen%2520Shot%25202013-04-12%2520at%25204.01.45%2520PM.png" width="480" /></p>

<p>点了之后发现竟然可以把文献的引用直接导出为 BibTex 格式：</p>

<p><img src="https://lh3.googleusercontent.com/-sj9krf4OAf4/UWfgh6zE-lI/AAAAAAAAAvI/TwmuUiIWPNM/s800/Screen%2520Shot%25202013-04-12%2520at%25204.01.55%2520PM.png" width="480" /></p>

<p>瞬间有了一种遇到神器的感觉，热泪盈眶啊…………。如果将上图下面的方框选中的话，以后再进行搜索，每个搜索结果下面就会直接出现 “Import to BibTex” 的选项，真是太好用了。</p>

<p><img src="https://lh6.googleusercontent.com/-lGp1PQIQntw/UWfgh-uPU7I/AAAAAAAAAvA/mX1NIyr4lXI/s716/Screen%2520Shot%25202013-04-12%2520at%25204.04.02%2520PM.png" width="480" /></p>

<p>和我一样觉得 <a href="http://scholar.google.com/">Google Scholar</a> 好用的，可以再试试 Chrome 上的这两个插件：</p>

<ol>
  <li><a href="https://chrome.google.com/webstore/detail/scholar-search/iaoheikkcfcbplmldmgogdooknbbbcnf">Scholar search</a>: 在 Chrome 扩展栏上添加一个图标，点击图标就可以搜索了。</li>
  <li><a href="https://chrome.google.com/webstore/detail/google-scholar-context-me/enmmfafpcihjfbkeoncplhjjkglkhdff">Google Scholar Context Menu</a>：当在Chrome 中选中一段文本再点右键的时候，菜单中会出现 “Search Google Scholar for “……”“的选项。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国的富二代]]></title>
    <link href="http://pikipity.github.com/blog/money-man.html"/>
    <updated>2013-04-12T15:01:00+08:00</updated>
    <id>http://pikipity.github.com/blog/money-man</id>
    <content type="html"><![CDATA[<p>中国的富二代到底是什么样的呢？他们到底过着怎样的生活呢？老外好像比我们更想知道，于是 BBC 拍摄了一部纪录片《外国人眼中的中国富二代》来告诉你中国的富二代们在做些什么。</p>

<embed src="http://player.youku.com/player.php/sid/XNDI3MjYyMDU2/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双面中国人]]></title>
    <link href="http://pikipity.github.com/blog/double-face-chinese.html"/>
    <updated>2013-04-12T14:59:00+08:00</updated>
    <id>http://pikipity.github.com/blog/double-face-chinese</id>
    <content type="html"><![CDATA[<p>好听又有趣的一首歌。</p>

<embed src="http://player.youku.com/player.php/sid/XNTM5NjExNjY4/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github 五岁了]]></title>
    <link href="http://pikipity.github.com/blog/github-5-years-old.html"/>
    <updated>2013-04-12T14:48:00+08:00</updated>
    <id>http://pikipity.github.com/blog/github-5-years-old</id>
    <content type="html"><![CDATA[<p>感谢 Tom Preston-Werner、Chris Wanstrath和PJ Hyett 创建这样一个资源共享、合作平台，收集了一些 Github 章鱼猫的图片，可以到<a href="http://pan.baidu.com/share/link?shareid=472164&amp;uk=4080321956">这里</a>下载合集（共28张）</p>

<p><img src="https://lh3.googleusercontent.com/-GtUg-uGWQqM/UWevcsehRSI/AAAAAAAAAtc/kLS-HYQ3bOo/s224/images%2520%25287%2529.jpeg" width="200" /><img src="https://lh5.googleusercontent.com/-xIBU5KTBVcI/UWevbE4xKAI/AAAAAAAAAsY/E-TE4XsxJgw/s224/images%2520%25282%2529.jpeg" width="200" /><img src="https://lh6.googleusercontent.com/-B9FrMxvY9oM/UWevdOl2eWI/AAAAAAAAAtY/0OzTMCCARKE/s224/images%2520%25289%2529.jpeg" width="200" /><img src="https://lh3.googleusercontent.com/-GhzQ2PNotbI/UWevacnK2rI/AAAAAAAAAuI/ud_BkEGqWTk/s235/images%2520%252817%2529.jpeg" width="200" /><img src="https://lh3.googleusercontent.com/-VkRkffqG3p0/UWevYtjxHLI/AAAAAAAAAts/vkcrXe-KnZw/s512/founding-father.jpg" width="200" /><img src="https://lh6.googleusercontent.com/-0BwtaQ5bB_I/UWevZOsK-YI/AAAAAAAAAtw/m31AKo0PS30/s224/images%2520%252811%2529.jpeg" width="200" /></p>
]]></content>
  </entry>
  
</feed>
