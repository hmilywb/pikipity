<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.io/atom.xml" rel="self"/>
  <link href="http://pikipity.github.io/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.io/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一起将 processing 镶嵌在网页上]]></title>
    <link href="http://pikipity.github.io/blog/sketchpad.html"/>
    <updated>2013-11-05T21:42:00+08:00</updated>
    <id>http://pikipity.github.io/blog/sketchpad</id>
    <content type="html"><![CDATA[<p>一直想找一种方法，将 processing 生成的程序放到网页上。在搜索了一番 Google 之后发现要使用 <a href="http://processingjs.org/">processing.js</a> 才可以，但是要设置自己的网页才可以，太麻烦了，于是就放弃了。今天在浏览 <a href="http://processingjs.org/">processing.js</a> 官网说明的时候发现，在<a href="http://processingjs.org/articles/p5QuickStart.html">《Processing.js Quick Start - Processing Developer Edition》</a>一文中介绍了以下两个网站可以在线编写并共享自己的 processing 代码和效果：</p>

<ol>
  <li>
    <p><a href="http://sketchpad.cc/">sketchpad</a></p>

    <p>这个网站上，不仅可以实现在线编写和分享代码，还可以自由浏览别人的共享代码，所有程序的效果可以实时演示，编辑器中还提供多人合作功能，很方便。</p>

    <p>缺点也很显著，编辑器虽然提供语法高亮，但是高不高亮完全没有用，所有文字一个颜色（只有 class 部分和别的不一个颜色）。第二个缺点不晓得是不是我浏览器的问题，贴出来的动画会播放一段时间之后突然放大，导致鼠标定位出现错误，很是奇怪。</p>

    <p><img src="https://lh3.googleusercontent.com/-Cx0ZXzkD2ho/UnkDB9mWrDI/AAAAAAAABTc/FiQVDRkoVCs/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.22.47.png" alt="sketchpad 编辑器界面" /></p>

    <p>下面是我为了测试编写的一段小代码：</p>

    <iframe id="ifr" width="200" height="235" scrolling="no" style="background: url(http://studio.processingtogether.com/static/img/jun09/pad/connectingbar.gif) no-repeat center 60px;" src="http://studio.processingtogether.com/sp/pad/iframe/ro.9DUd1JyjanBXc/rev.925?autostart=0"></iframe>
  </li>
  <li>
    <p><a href="http://hascanvas.com/">hascanvas</a></p>

    <p>这个网站设计的很独特，编辑器隐藏在左边，鼠标靠近浏览器左边缘的时候，编辑器就会自动弹出，鼠标移开编辑区后，就会保存一次代码并编译，结果就显示在整个页面上。但是我用和上面一模一样的代码进行测试始终报错，这里只好拿别人的代码演示一下了。（貌似鼠标位置依然有偏差）</p>

    <iframe src="http://hascanvas.com/crossing/embed" frameborder="0" scrolling="no" style="width:600px;height:400px;"></iframe>

    <p><img src="https://lh6.googleusercontent.com/-gSeb362FAWw/UnkDCOO0AMI/AAAAAAAABTg/7bDgI4cjK80/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-11-05%2520%25E4%25B8%258B%25E5%258D%258810.36.00.png" alt="hascanvas 界面" /></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QC12864B 控制库]]></title>
    <link href="http://pikipity.github.io/blog/qc12864b-library.html"/>
    <updated>2013-10-27T16:27:00+08:00</updated>
    <id>http://pikipity.github.io/blog/qc12864b-library</id>
    <content type="html"><![CDATA[<p>为了方便自己使用 8051 对 QC12864B 的控制编写了一个库文件。</p>

<p>QC12864B 自带字库，并且字库中带有中文，使用 ST7920 作为控制器。<a href="http://pan.baidu.com/s/1qrhEF">这里有关于 QC12864B 的说明文档下载</a></p>

<p>此项目可以到<a href="https://github.com/pikipity/QC12864B_8051.git">这里</a>查看和下载源代码。具体的使用信息，可以到 wiki 查询：</p>

<ol>
  <li><a href="https://github.com/pikipity/QC12864B_8051/wiki/How-to-use">How to use</a>：包括软件中如何引用和硬件如何连接的说明。</li>
  <li><a href="https://github.com/pikipity/QC12864B_8051/wiki/Functions">Function</a>：介绍了几个主要会使用到的函数。</li>
</ol>

<p>这里有一段视频项目中 <code>teasting</code> 文件夹中程序的运行结果：</p>

<embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117845240_3342829334_bh28RyE5DTLK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yHSBc1G8XoLHcwydP8h3xkoaq5Y/s.swf" type="application/x-shockwave-flash" name="sinaplayer" allowfullscreen="true" width="480" height="370" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[粘着系男子的15年纠缠不休]]></title>
    <link href="http://pikipity.github.io/blog/15-year.html"/>
    <updated>2013-10-26T22:27:00+08:00</updated>
    <id>http://pikipity.github.io/blog/15-year</id>
    <content type="html"><![CDATA[<p>看到最后才发现是大虐。。。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=114900&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS7 是在 Word 里面设计出来的么？]]></title>
    <link href="http://pikipity.github.io/blog/ios-in-word.html"/>
    <updated>2013-10-23T23:05:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ios-in-word</id>
    <content type="html"><![CDATA[<p>这个视频就是用来吐槽 IOS7 设计的吧，233333</p>

<embed src="http://player.youku.com/player.php/sid/XNjI1MTI5Mjgw/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贪吃蛇（8051）]]></title>
    <link href="http://pikipity.github.io/blog/snake-8051.html"/>
    <updated>2013-10-19T22:22:00+08:00</updated>
    <id>http://pikipity.github.io/blog/snake-8051</id>
    <content type="html"><![CDATA[<h3 id="section">简介</h3>

<p>使用 AT89C52 制作的贪吃蛇游戏。练习在 8051 上使用实时多任务系统。你可以到<a href="http://pikipity.github.io/snake_8051/">这里下载源码</a>。</p>

<p>一开始的构想是利用 LCD12864 来作为显示屏，于是选择了自己比较熟悉的 ST7920 作为控制器的 LCD12864，毕竟之前也使用同样的显示屏用 Arduino 做过尔罗斯方块，虽然图像显示处理缓慢，但是应该还是可以使用的，测试之后的结果大失所望，由于过于过于缓慢的图像显示导致屏幕闪烁现象过于严重，并且导致任务堵塞，程序堵死，于是放弃。改儿使用 4 块 8*8 LED 矩阵来做显示屏，由于要自己撰写显示函数和游戏函数，程序量徒然增加，还出现了单片机内存不足的现象，经过调试，最终结果还算不错，以下基本功能都已经实现：</p>

<ol>
  <li>蛇和食物的显示。</li>
  <li>蛇的移动，包括碰撞边界和自身之后的死亡判定和碰撞食物的判定。</li>
  <li>蛇在吃掉食物之后的增长效果。</li>
</ol>

<p>由于 8051 单片机本身内存与机能的限制，还有很多预想功能未能实现：</p>

<ol>
  <li>食物位置不是随机的，永远固定。</li>
  <li>食物数量固定，就是开始游戏之后的那几个食物，不会再增加了，吃完就获胜。</li>
  <li>蛇的最大长度是固定的。</li>
  <li>蛇的初试长度与位置都不是随机的，永远固定。</li>
</ol>

<h3 id="section-1">文件说明：</h3>

<ol>
  <li>lcd12864 文件夹中是使用 lcd12864 制作的初版游戏。仅实现了蛇的移动和边界碰撞判定。闪烁现象严重</li>
  <li>
    <p>LCD_array 文件夹中是最终成品。使用 4 个 8*8 的 LED 点阵来作为显示，4个按钮控制上下左右，还有一个 Reset 键用来重启单片机（也就是重启游戏）。此文件夹中包括以下文件</p>

    <ul>
      <li>
        <p>circuit 文件夹：Proteus 仿真电路图，如下</p>

        <p><img src="https://lh5.googleusercontent.com/-lG-RF7FdufE/UmJ34xQ_jUI/AAAAAAAABS8/sQYAz3mA0DA/s720/circuit.jpg" alt="仿真电路图" /></p>
      </li>
      <li>
        <p>program 文件夹：烧录入单片机中的程序文档，包括</p>

        <ul>
          <li>Main.h, Sch51.h, Sch51.c, 2<em>01</em>12g.h, 2<em>01</em>12g.c: 实时多任务系统所需的文件，由《PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS》一书提供。</li>
          <li>main.c: 主程序。main 函数所在。</li>
          <li>
            <p>ledarray.h, ledarray.c: LED 点阵显示函数：</p>

            <ul>
              <li>LED 点阵初始化函数：<code>led_init()</code></li>
              <li>绘制第一块与第二块 LED 点阵的函数：<code>draw1()</code></li>
              <li>绘制第三块与第四块 LED 点阵的函数：<code>draw2()</code></li>
              <li>清空显示的函数：<code>first_page()</code></li>
              <li>向某个坐标写入一个点的函数（左上角为原点，x轴正方向向右延伸，y轴正方向向下延伸，下同）：<code>set_dot()</code></li>
              <li>读取某个坐标是否有点存在的函数：<code>read_dot()</code></li>
            </ul>
          </li>
          <li>
            <p>game.h, game.c: 游戏控制及显示函数：</p>

            <ul>
              <li>根据蛇和食物的控制矩阵，向屏幕内绘制点的函数：<code>draw()</code></li>
              <li>控制蛇移动的函数：<code>move()</code></li>
              <li>检查按键的函数：<code>button()</code></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="section-2">最终效果：</h3>

<ol>
  <li>
    <p>胜利</p>

    <div><object id="sinaplayer" width="480" height="370"><param name="allowScriptAccess" value="always" /><embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117246371_3342829334_bBjjTyc/XmLK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yvSBsxF8HoLHcwydP8h1Rkra61Z/s.swf" type="application/x-shockwave-flash" name="sinaplayer" allowfullscreen="true" allowscriptaccess="always" width="480" height="370" /></object></div>
  </li>
  <li>
    <p>失败</p>

    <div><object id="sinaplayer" width="480" height="370"><param name="allowScriptAccess" value="always" /><embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=117246399_3342829334_aBnnR3M5DGXK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5yvSBsxL+HoLHcwydP8h1Rkra6NR/s.swf" type="application/x-shockwave-flash" name="sinaplayer" allowfullscreen="true" allowscriptaccess="always" width="480" height="370" /></object></div>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB 的函数中清理公用 workspace]]></title>
    <link href="http://pikipity.github.io/blog/clear-workspace-matlab.html"/>
    <updated>2013-10-16T18:51:00+08:00</updated>
    <id>http://pikipity.github.io/blog/clear-workspace-matlab</id>
    <content type="html"><![CDATA[<p>今天在编写一个 MATLAB 函数的时候，尝试使用 <code>clear all;</code> 来清理掉 workspace，结果运行后发现完全没有效果。查找了一下 MATLAB 的帮助文件才发现，每个函数在运行的时候都有自己的 workspace，所以如果在函数内部使用 <code>clear</code> 的话，清空的是函数自己的 workspace，不会影响到公用的 workspace。于是又到<a href="http://www.mathworks.com/matlabcentral/"> mathwork 的 MATLAB Center </a> 逛了一下，发现了一种很好的方法：使用 <code>evalin()</code> 函数。<a href="http://www.mathworks.com/matlabcentral/newsreader/view_thread/253314">原帖在这里</a>。</p>

<p>总结一下，就是使用下面的语句：</p>

<pre><code>evalin('caller','clear all');
</code></pre>

<p>或者使用</p>

<pre><code>evalin('base','clear all');
</code></pre>

<p>主要区别是，前一个不仅会清空公用 workspace，也会清空其他函数的 workspace。后一个仅仅只清空公用的 workspace。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keil C 中不再编译未使用的函数]]></title>
    <link href="http://pikipity.github.io/blog/linker-51.html"/>
    <updated>2013-10-13T23:16:00+08:00</updated>
    <id>http://pikipity.github.io/blog/linker-51</id>
    <content type="html"><![CDATA[<p>最近在为 AT89C52 编写 LCD12864 的头文件的时候发现 Keil 竟然无法自动识别未使用的函数，也就是说 Keil 会将所有函数全部编译一边，如果 main 函数中没有使用某个函数的话，这个没使用的函数不仅占用了单片机的内存，在编译结束后的 Warning 也让人很不舒服。所以去搜索了一下，大体有两种解决方法：</p>

<ol>
  <li>添加注释或者编译开关：如果对于小项目，这种方法的确可行，但是如果想编写一个具有通用意义的头文件的话，要一个个把不用的头文件注释掉，显然不实际。每次使用头文件都要修改一次注释和编译开关也不现实。所以这个方法不具有普遍适用意义。</li>
  <li>各个函数分别编写一个 C 文件，然后仅将用到的函数编译为 OBJ。每次使用头文件都要找到需要的函数然后编译一次，也很麻烦，此方法显然也不具有普遍适用意义。</li>
</ol>

<p>既然 Keil 默然的连接器无法识别未使用的函数，那么可不可以试试别的连接器呢？于是去<a href="http://www.keil.com/"> Keil 的官网</a>逛了一圈，发现 Keil 本身就可以将默认的连接器 BL51 换为另一种连接器 LX51。赶紧更换一下试一试，更换步骤如下：</p>

<ol>
  <li>工具栏 <code>Project</code> -&gt; 选择 <code>Options For Target 'xx'</code>。</li>
  <li>在 <code>Device</code> 选项卡，选中 <code>Use Extended Linker(LX51) instead of BL51</code>。</li>
</ol>

<p>但是编译一中发现问题依然没有解决，这是怎么回事呢？应该是还需要添加编译选项吧。于是又去看了一下<a href="http://www.keil.com/support/man/docs/lx51/default.htm"> LX 51 说明文档</a>，发现了 “REMOVEUNUSED” 这样一个选项：</p>

<blockquote>
  <p>The <strong>REMOVEUNUSED</strong> directive removes unused program and data segments provided that Data Overlaying is enabled. When you apply this directive unused functions along with the related data segments are deleted in the final executable program.</p>
</blockquote>

<p>这不就是我需要的嘛！！赶紧加上去：</p>

<p>在 <code>Options For Target 'xx'</code> 中的 <code>LX51 Misc</code> 选项卡中的 <code>Misc controls</code> 填写 “REMOVEUNUSED”。</p>

<p>再次编译，发现 Warning 不见了，编译之后的 hex 文件也小了，问题解决。</p>

<p>总结一下，就是三步：</p>

<ol>
  <li>工具栏 <code>Project</code> -&gt; 选择 <code>Options For Target 'xx'</code>。</li>
  <li>在 <code>Device</code> 选项卡，选中 <code>Use Extended Linker(LX51) instead of BL51</code>。</li>
  <li>在  <code>LX51 Misc</code> 选项卡中的 <code>Misc controls</code>， 填写 “REMOVEUNUSED”（不加引号）。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多人实时合作免费在线绘图软件 -- Process On]]></title>
    <link href="http://pikipity.github.io/blog/process-on.html"/>
    <updated>2013-10-05T08:51:00+08:00</updated>
    <id>http://pikipity.github.io/blog/process-on</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-Q0n9wEE-bYA/Uk9jd08BJuI/AAAAAAAABR4/QGkUPxMBvR8/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-05%2520%25E4%25B8%258A%25E5%258D%25888.48.46.png" alt="Process On" /></p>

<p>今天推荐一款用来绘图的在线应用 – <a href="http://www.processon.com/">Process On</a>，其内置了多种模版，非常适合绘制结构性很强的图片，例如流程图等。</p>

<p><img src="https://lh5.googleusercontent.com/-DX51QUQnnts/Uk9kIfSkO-I/AAAAAAAABSA/KqhLYRS-gOU/s720/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-05%2520%25E4%25B8%258A%25E5%258D%25888.56.29.png" alt="内置模版" /></p>

<p><img src="https://lh6.googleusercontent.com/-Qow5by5ZDps/Uk9krAeS5nI/AAAAAAAABSM/xHXpGkEiW_E/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-05%2520%25E4%25B8%258A%25E5%258D%25888.58.58.png" alt="绘制界面" /></p>

<p>上图就是绘制界面了，也许第一眼看是去觉得及其普通，甚至左边所提供的备选图形都和<a href="http://dia-installer.de/">开源软件 Dia</a>如出一辙。的确，其绘图功能没有什么出众的地方，如果想快速绘制出专业的流程图，这款软件并不是一个很好地选择，毕竟<a href="http://office.microsoft.com/en-us/visio/">微软的 Visio</a> 比它专业几百倍。但是今天之所以推荐它，是因为其强大的在线多人合作功能。这里所说的多人合作不是指一人保存退出之后其他人才可以观看和修改，如果是那样的话，用 <a href="https://www.dropbox.com">Dropbox</a> 就可以了，这里所说的合作是实时合作，只要每个人都在线，就可以由作者通过“邀请协作者”的方式将其他人添加入编辑群中，每个协作者的修改都会实时显示在其他协作者的画面上。如果协作者们距离很远，还可以通过内置的“聊天”功能来进行讨论。很大程度上方便了多人流程图绘制的问题，再也不会出现，一个人掌握电脑其他人在旁边七嘴八舌导致操作者不知道应该如何是好的情况。</p>

<p><img src="https://lh6.googleusercontent.com/-iR6I-HdwVgY/Uk9p3JLSJNI/AAAAAAAABSg/syr21nwsI3Q/s740/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-05%2520%25E4%25B8%258A%25E5%258D%25889.19.13.png" alt=" Visio 文件导入帮助" /></p>

<p>并且其支持 <a href="http://office.microsoft.com/en-us/visio/">Visio</a> 文件的导入。还有一个类似于社交网络的共享圈，可以通过关注其他人来了解对方正在制作什么样的图片，也可以通过搜索来发现其他人共享出来的图片。总而言之，这是一款不可多得多人实时在线合作绘图网站。</p>

<p><img src="https://lh6.googleusercontent.com/-Rh-C4psyJ84/Uk9p3JQe4AI/AAAAAAAABSk/gozi3_wdROw/s912/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-05%2520%25E4%25B8%258A%25E5%258D%25889.18.27.png" alt="类似于社交网络的共享圈" /></p>

<p><a href="http://www.processon.com/">这里是 Process On 的网址，免费注册和使用。</a></p>

<p><a href="https://chrome.google.com/webstore/detail/processon-online-diagramm/pnggaliohjcaboolkcpjhfondbjlehkm?utm_source=chrome-ntp-icon">Chrome 上没有 Process On 的在线编辑器的应用，只有一个网站快捷方式的应用</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决澳门大学 ummoodle 上 PDF 文件在 IOS 无法正常打开或下载的问题]]></title>
    <link href="http://pikipity.github.io/blog/ummoodle-pdf.html"/>
    <updated>2013-10-04T21:11:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ummoodle-pdf</id>
    <content type="html"><![CDATA[<p>澳门大学的 ummoodle 在更新之后就出现了 pdf 文件在 IOS 设备上无法正常打开的状况，打开包含 pdf 的网页之后就会出现如下画面：</p>

<p><img src="https://lh3.googleusercontent.com/-QQxd0viyyg8/Uk7Cc9wZh5I/AAAAAAAABRE/reSNdTtOBrA/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252020%252019%2520PM.png" alt="无法拖动和下载的 pdf 文件" /></p>

<p>pdf 文件就好像一个没有完整显示的图片一样在那里，没法下载和拖动。但是此问题仅限于 IOS 设备里的浏览器，电脑上的浏览器可以正常显示，Android 设备上无法显示文件，但是会显示一条链接，点击连接之后就可以下载文件了，所以很显然是 IOS 设备的浏览器对于网页的解析出现了问题，于是我研究了一下一个含有 pdf 文件的网页，发下了下面的一段代码：</p>

<pre><code>&lt;object id="resourceobject" data="https://ummoodle.umac.mo/pluginfile.php/74630/mod_resource/content/1/elec414-2013-2.pdf" type="application/pdf" width="800" height="600"&gt;

&lt;param name="src" value="https://ummoodle.umac.mo/pluginfile.php/74630/mod_resource/content/1/elec414-2013-2.pdf" /&gt;

Click &lt;a href="https://ummoodle.umac.mo/pluginfile.php/74630/mod_resource/content/1/elec414-2013-2.pdf" &gt;elec414-2013-2.pdf&lt;/a&gt; link to view the file.

&lt;/object&gt;
</code></pre>

<p>很显然，网页本身是想调用 IOS 内置的 pdf 阅览器来浏览 pdf 文件，但是由于浏览器排版的原因（固定宽高的设定很明显不适合移动设备啊），导致此被预览的 pdf 文件被其他区块所覆盖，进而导致用户无法对 pdf 文件进行操作。由于 Android 系统没有内置 pdf 阅览器，所以只会显示文件链接，从而避免了排版问题。</p>

<p>既然原因找到，那么就来想一想解决方法吧。很显然，学校对网页的改进还需要时间，那么就从自身做起吧，基本来说想到了两种解决方案：</p>

<ol>
  <li>禁用 IOS 内置的 pdf 阅览器。这个方法比较复杂，由于 IOS 取消了 safari 设置中“禁用内置 pdf 阅览器”的选项，导致现在想要禁用 pdf 阅览器就必须直接删除<code>/Library/</code>下的 pdf 阅览器的插件才行，必须越狱之后安装 iFile 才可以。此方法不仅麻烦，由于需要触碰到系统文件，还比较危险，一旦删错文件，后果不堪设想。</li>
  <li>使用 moodle 的 APP，例如 <a href="https://itunes.apple.com/us/app/my-moodle/id461289000?mt=8">My Moodle</a> 和 <a href="https://itunes.apple.com/au/app/moodle-mobile/id633359593?mt=8">Moodle Mobile</a>，暂时我还没有使用过，但是据使用者说，可以正常打开 pdf 文件。</li>
  <li>
    <p>直接浏览目标网页的 html 源代码，找到 pdf 文件原始地址来打开。我选择使用这种方法，一次设置之后，以后使用也很方便，熟练以后，因为 ummoodle 的各个网页的 html 代码结构都差不多，所以也是很快捷的。由于 IOS 上的 safari 浏览器无法直接查看源代码，所以需要借助一些可以查看 html 的网站来实现这个方法，我借助的是<a href="http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/">这个</a>网站的方法。原理就是利用 “GeSHi” 这个小程序将网页发送给 “ole.michelsen.dk” 的服务器来解析网页的 html 代码，然后显示出来（还带有代码高亮呦！！）。具体的设置如下：</p>

    <ol>
      <li>
        <p>在 IOS 上用 safari 随便打开一个网页，然后保存为书签，为了以后方便，书签起名叫“查看源代码”</p>

        <p><img src="https://lh6.googleusercontent.com/-GJzD1e5flq4/Uk7CacaecPI/AAAAAAAABQM/7yNUfqyc85s/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252002%252034%2520PM.png" alt="我这里保存 Google 为书签" /></p>

        <p><img src="https://lh3.googleusercontent.com/-UwnXN2sL5Dc/Uk7CaT4DWHI/AAAAAAAABQY/TRDTziQF2pQ/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252003%252059%2520PM.png" alt="书签起名叫“查看源代码”" /></p>
      </li>
      <li>
        <p>打开<a href="http://ole.michelsen.dk/viewsource/bookmarklet.min.js">这个</a>链接，将里面的内容全选并复制。</p>

        <p><img src="https://lh3.googleusercontent.com/-HMF-lKk1y-M/Uk7CclMamRI/AAAAAAAABRA/HzhlBHulUBA/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252007%252032%2520PM.png" alt="复制所有内容" /></p>
      </li>
      <li>
        <p>在书签中找到刚才保存的书签，并将刚才复制的内容粘贴到此书签的 URL 处，点击“完成”保存书签就可以了。</p>

        <p><img src="https://lh4.googleusercontent.com/-HsLL8-EF6tk/Uk7CaRtwBII/AAAAAAAABQU/Tjad3nkRsko/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252004%252027%2520PM.png" alt="编辑“查看源代码”书签" /></p>

        <p><img src="https://lh4.googleusercontent.com/-WzvU_jk6DA0/Uk7CbGpBFeI/AAAAAAAABQg/fm0VEzchE0U/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252004%252040%2520PM.png" alt="将复制的内容粘贴到书签 URL 处" />
如果想要下载某个网页的 pdf 文件，就先打开那个含 pdf 文件的网页，然后点击“查看源代码”的书签，就会打开网页的源代码，然后找到其中包含 pdf 文件源地址的部分（很好找的），点击源地址下载就可以了。</p>
      </li>
    </ol>

    <p><img src="https://lh3.googleusercontent.com/-f0W97s6s1pQ/Uk7ON6MtNQI/AAAAAAAABRY/iqaaVByPcYk/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252005%252051%2520PM.png" alt="含有 pdf 文件的网站，点击“查看源代码”的书签（可以把书签放在书签栏方便查找）" /></p>

    <p><img src="https://lh5.googleusercontent.com/-oCYL-kJ0eCM/Uk7CbpDIoEI/AAAAAAAABQs/73VVyzHxwg8/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252006%252016%2520PM.png" alt="html 中包含 pdf 文件源地址的部分" /></p>

    <p><img src="https://lh4.googleusercontent.com/-I6jQKkkt67A/Uk7CcDHtE2I/AAAAAAAABQ4/_Q-EJqEbLYk/s512/%25E7%2585%25A7%25E7%2589%2587%252004-10-2013%252009%252006%252028%2520PM.png" alt="点击 pdf 文件源地址就可以正常打开 pdf 文件了" /></p>
  </li>
</ol>

<p>PS: ICTO 回复了相关问题，回复邮件内容如下：</p>

<pre><code>For this case, please advice your teacher to change the "Appearance" option of the PDF file to "New window" in UMMoodle and this will solve your problem.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[巨人的猎手]]></title>
    <link href="http://pikipity.github.io/blog/attack-on-titan.html"/>
    <updated>2013-10-03T20:28:00+08:00</updated>
    <id>http://pikipity.github.io/blog/attack-on-titan</id>
    <content type="html"><![CDATA[<p><img src="https://lh4.googleusercontent.com/-r3XfVFu4YSU/Uk1xgsz8cyI/AAAAAAAABOE/3ONWh1lL_jk/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-03%2520%25E4%25B8%258B%25E5%258D%25889.30.19.png" alt="巨人的猎手" /></p>

<p>今天给大家推荐一款国人制作的 3D 网页游戏–《巨人的猎手》，属于《进击的巨人》的同人游戏，由你来扮演《进击的巨人》中的五名主角在不同的地图上猎杀巨人。可以单机玩，也可以局域网联机玩。每个角色都有不同的特殊技。操作方面还是很复杂的：</p>

<ul>
  <li>WASD：上下左右</li>
  <li>左shift：跳跃（使用气筒喷射，可快速前进）</li>
  <li>左control：闪避（钩住巨人飞起时可利用闪避跳到更高处）</li>
  <li>Q：左挂钩（按住是发射，松开就收回了，所以要是想用钩锁挂住并将自己拉近就按住不要松开，发射挂钩和跳跃都会消耗燃气，燃气量显示在屏幕下方中间，如果消耗没了就不能发射挂钩和跳跃了）</li>
  <li>E：有挂钩（机制和左挂钩一样）</li>
  <li>空格键：左右挂钩同时发射（机制和左挂钩一样）</li>
  <li>鼠标左键：普通攻击（就是挥刀）</li>
  <li>鼠标右键：特殊攻击（不同角色特殊攻击不同）</li>
  <li>R: 换刀片（刀片数量有限，数量显示在屏幕下方中间部分，换完就要等死了）</li>
  <li>P：暂停</li>
  <li>T：重启游戏（如果挂了，就按“T”吧）</li>
  <li>C：改变镜头</li>
  <li>X：显示/隐藏瞄准用的准星（准星代表剑的挥舞方向，准星旁边的数字代表最近的是物体离你的举例，准星旁边的”&lt;”代表左挂钩方向，”&gt;”代表右挂钩方向，如果是红色代表物体太远以致挂钩无法钩住或刀无法砍到，白色代表挂钩可以钩住物体或刀可以砍到）</li>
  <li>Backspace：全屏</li>
  <li>N：行礼</li>
</ul>

<p>玩了几分钟之后我彻底的“回想起了巨人的恐惧”，太难杀了，因为只有攻击巨人颈后那一小片区域才能杀死巨人，巨人会根据你所在的位置做不同的动作，如果你在天上，就顺手抓住你，如果你在头附近就直接张嘴咬你，如果你在地上还会蹲下把你抓起来，总之想绕到背后超级难，就算你好不容易上到脖子上了，可能还会被巨人抓痒痒一样一下抓住。最好在正式玩之前用“trainning”地图（”tranning”地图里巨人不会动）练练手，熟悉一下操作。我总结了一下，就是远远的找准目标之后，远距离绕到目标背后，用钩锁或是跳跃快速前进，找准时机用钩锁上脖子，果断出刀，如果打偏，不要浪费刀刃，放弃之后赶快用钩锁或跳跃快速逃跑摆脱巨人的追踪。</p>

<p><a href="http://fenglee.com/game/aog/">《巨人的猎手》游戏网址在这里</a></p>

<p>游戏作者“鴌Feng”是一个国内的独立游戏制作人，<a href="http://fenglee.com/blog/">其博客在这里</a>，<a href="http://fenglee.com/blog/html/257.html">《巨人的猎手》的介绍博文在这里</a>，Feng大大过去还制作过几款同样游戏性很高（就是很好玩）的游戏，<a href="http://fenglee.com/">你可以在这里找到他的作品</a>，我只能说：</p>

<blockquote>
  <p>此乃大神，需要顶礼膜拜~~~（膜拜中。。。膜拜中。。。膜拜中。。。膜拜中。。。）</p>
</blockquote>

<p><img src="https://lh5.googleusercontent.com/-HGUx9chktuE/Uk1w4DgHGPI/AAAAAAAABN4/hT95c2ojVvo/s720/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-03%2520%25E4%25B8%258B%25E5%258D%25889.12.37.png" alt="巨人我来啦！受死吧！" /></p>

<p><img src="https://lh3.googleusercontent.com/-cqa1rgIfx4A/Uk1w4MmxVGI/AAAAAAAABN8/faFdboZPD5E/s720/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-10-03%2520%25E4%25B8%258B%25E5%258D%25889.20.02.png" alt="迅速惨死在巨人的怀抱中。。。" /></p>

<p>看女流姐卖萌玩《巨人的猎手》（此为老版本，巨人还很丑，貌似只有一张地图一个人物，现已多次更新，游戏性大大提高）：</p>

<embed src="http://player.youku.com/player.php/sid/XNjA1MDcxMTQ0/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[俄罗斯方块（Arduino）]]></title>
    <link href="http://pikipity.github.io/blog/melrose-box-arduino.html"/>
    <updated>2013-09-29T13:34:00+08:00</updated>
    <id>http://pikipity.github.io/blog/melrose-box-arduino</id>
    <content type="html"><![CDATA[<p>经过一个星期闲着无聊地编写和调试，终于可以用 Arduino 玩俄罗斯方块了。四个按钮分别控制左、右、加速下落、转动。使用 LCD12864（QC12864B） 来显示游戏画面。为了寻找可以用来控制 QC12864B 的 Arduino 库花了很长时间，最终选择了 <a href="https://code.google.com/p/u8glib/">u8glib</a>，因为这个库支持的 LCD 控制器非常丰富。<a href="https://code.google.com/p/u8glib/">u8glib 库可以在这里下载</a>，<a href="http://pan.baidu.com/s/1qrhEF">关于 QC12864B 以及如何使用 u8glib 来控制 QC12864B 的资料可以在这里下载</a>，资料中包含一个从网上找来的使用 Arduino 做示波器的例子，使用的就是 <a href="https://code.google.com/p/u8glib/">u8glib</a> 库。</p>

<p>我制作的这个<a href="http://pikipity.github.io/Melrose_box">俄罗斯方块游戏机的项目主页在这里</a>。</p>

<p>面包板连接图：</p>

<p><img src="https://lh3.googleusercontent.com/-MMKU4QZefc4/UkepsoONq0I/AAAAAAAABNI/wASf1AFsVVE/s512/Melrose_box_Scheme_bb.png" alt="面包板连接图" /></p>

<p>运行效果：</p>

<p><img src="https://lh6.googleusercontent.com/-uDiZRNthjjI/Uketz4ePskI/AAAAAAAABNk/zKLtFjShG7U/s640/begin.jpg" alt="运行效果1" /></p>

<p><img src="https://lh5.googleusercontent.com/-PdvRIs9ik6g/UketzzLefkI/AAAAAAAABNc/_8sDPpLxf18/s640/playing.jpg" alt="运行效果2" /></p>

<p><img src="https://lh5.googleusercontent.com/-nyWIb1rcJgc/UketznUnOoI/AAAAAAAABNg/9YnAebKKDXY/s640/finish.jpg" alt="运行效果3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用 Arduino 进行超声波测距]]></title>
    <link href="http://pikipity.github.io/blog/ultrasonic-distance-measurement-using-arduino.html"/>
    <updated>2013-09-21T10:32:00+08:00</updated>
    <id>http://pikipity.github.io/blog/ultrasonic-distance-measurement-using-arduino</id>
    <content type="html"><![CDATA[<p>在<a href="http://pikipity.github.io/blog/arduino-dht11-lcd1602.html">昨天测量温度的装置</a>上又加上了 HC-SR04 来进行超声波测距，先利用 DHT11 测量温度，然后利用温度来计算出较为准确的声速（根据<a href="http://en.wikipedia.org/wiki/Relativistic_Euler_equations">相对论的欧拉方程</a>，声速（米每秒）=331+0.6*温度（摄氏度）），再利用 HC-SR04 测得的超声波来回的时间计算出距离，并在 LCD1602 上显示。</p>

<p>HC-SR04 的使用非常简单，<a href="http://www.doc88.com/p-737494835063.html">这里有一份 HC-SR04 的中文手册</a>，首先向 Trig 引脚输入一个不小于10us的高电平，然后测量 Echo 引脚返回的高电平的时间 t，然后利用公式：距离=t*声速/2，就可以计算得到距离了。但是需要注意：</p>

<ol>
  <li>测量周期要在60ms以上，防止回声影响。</li>
  <li>计算距离时单位要统一，利用<code>pulseIn()</code>函数返回的时间单位是“微秒”，测量结果单位一般是“厘米”，所以声速要从“米每秒”换算为“厘米每微秒”，也就是除以10000。</li>
  <li>测量距离为2cm~400cm，太近的话会有盲区，太远的话由于返回信号太弱难以检测。</li>
</ol>

<p><a href="https://github.com/pikipity/Ultrasonic_distance_measurement_using_Arduino.git">程序可以到这里下载</a>，其中 “HC_SR04_Arduino” 文件夹中是一个 HC-SR04 的 Arduino 测试程序，“display_LCD1602” 文件夹中是这次的程序，”scheme” 文件夹中是电路图。</p>

<p>程序中使用 “Time” 库来实现定时器中断的功能，<a href="http://srmonk.blogspot.com/2012/01/arduino-timer-library.html">“Time” 库可以在这里下载</a>，如果你觉得看英文比较烦得话，可以看<a href="http://yehnan.blogspot.com/2012/03/arduino.html">这里这个中文简易教程</a>。</p>

<p>电路图：</p>

<p><img src="https://lh5.googleusercontent.com/-2ggKDjtrfuY/Uj0D_AibosI/AAAAAAAABMw/4VVXk4M1NiY/s640/Breadboard_bb.png" alt="面包板连接图" /></p>

<p><img src="https://lh3.googleusercontent.com/-P3TPBqNYi1E/Uj0D_AqZCmI/AAAAAAAABMs/KXupBqQvZj8/s576/Breadboard_schem.png" alt="电路图" /></p>

<p>结果（LCD 上，第一行为湿度和温度，第二行为距离）：</p>

<p><img src="https://lh5.googleusercontent.com/-lM53a5xTLsA/Uj0D_fkuoxI/AAAAAAAABM0/eefNICQs9Ys/s512/result.jpg" alt="结果" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Arduino 测量温度和湿度]]></title>
    <link href="http://pikipity.github.io/blog/arduino-dht11-lcd1602.html"/>
    <updated>2013-09-20T22:00:00+08:00</updated>
    <id>http://pikipity.github.io/blog/arduino-dht11-lcd1602</id>
    <content type="html"><![CDATA[<p>今天中秋放假闲在宿舍里，于是就用 Arduino 做了一个测量温度和湿度的小装置，使用 DHT11 测量温度和湿度，然后用 LCD1602 来显示。</p>

<p><a href="http://wenku.baidu.com/view/bb12c7c7d5bbfd0a795673dd.html">这里有一个 DHT11 的简单介绍</a>，包括引脚的意义和解法还有一个 Arduino 的例程。DHT11 的使用还是很简单的，基本思路就是先发送给 DHT11 一个信号，将其激活，成功激活后，DHT11 会返回一个信号，之后 DHT11 就会连续发送40位的二进制数据，这40bits的数据包括湿度数值、温度数值和校检数值，其中湿度数值和温度数值都是16位的定点二进制小数（<a href="http://pikipity.github.io/blog/scm-principle-3.html">定点二进制小数在这里有介绍</a>），其中前8位为整数位，后8位为小数位，具体排列如下：</p>

<pre><code>8位湿度整数位 8位湿度小数位 8位温度整数位 8位温度小数位 8位校检数值
</code></pre>

<p>DHT11 具体操作步骤如下：</p>

<ol>
  <li>发送启动信号：拉低引脚至少18ms，拉高引脚20us到40us</li>
  <li>检测 DHT11 的返回信号：如果可以检测到一个低信号80us，然后一个高信号80us，则启动成功，进入下一步开始接受数据，否则启动失败。</li>
  <li>开始接受数据：低信号时等待下一位数据，高信号时计算高信号的宽度，如果是26us到28us，则此位为“0”，如果是70us，则此位为“1”，共40位。</li>
</ol>

<p>使用 DHT11 要注意的是：</p>

<ol>
  <li>湿度单位为“%RH”（<a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E5%B0%8D%E6%BF%95%E5%BA%A6">相对湿度</a>），温度单位为“℃”（摄氏度）。</li>
  <li>它的精度并不高，湿度误差为±5%RH，温度为±2℃。</li>
  <li>校检数值使用方法：如果湿度整数位加上温度整数位等于校检数值，那么传输无误，否则存在传输错误。</li>
  <li>采样周期不得小于1秒钟</li>
</ol>

<p>LCD1602 就简单很多了，直接使用 Arduino 自带的 “LiquidCrystal” 库就可以很轻松的进行控制了，库中所包含的函数、使用方法和例程可以到<a href="http://arduino.cc/en/Reference/LiquidCrystal">这里看 “LiquidCrystal” 官方说明文档</a>。</p>

<p>以下是我设计的电路：</p>

<p><img src="https://lh6.googleusercontent.com/-lWe2CscmyLw/Ujv5p3ZbUgI/AAAAAAAABMM/0Dv91ak3_9o/s640/Breadboard_bb.png" alt="面包板连接图" /></p>

<p><img src="https://lh6.googleusercontent.com/-aX-NkrUuHvI/Ujv5piz0TnI/AAAAAAAABMQ/bdtvWYZfm1A/s720/Breadboard_schem.png" alt="电路连接图" /></p>

<p><a href="https://github.com/pikipity/Display_Temp_and_Humi_using_LCD1602.git">程序可以到这里下载</a>。其中 “DHT11_Arduino” 文件夹中是对 DHT11 的测试，用的是串口显示测量结果，“LCD_Arduino” 文件夹中是对 LCD1602 的测试，显示的 “hello World”，“display”  文件夹中是整个的代码，”Sketch” 中是电路图和结果图。</p>

<p>最终结果如下：</p>

<p><img src="https://lh5.googleusercontent.com/-z0G7fuWmDjs/Ujv5pwiav-I/AAAAAAAABMU/OTBrKNvVwxU/s640/result.jpg" alt="结果" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让我们一起来征服世界]]></title>
    <link href="http://pikipity.github.io/blog/introduction-to-terraria.html"/>
    <updated>2013-09-16T20:14:00+08:00</updated>
    <id>http://pikipity.github.io/blog/introduction-to-terraria</id>
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/-xBEV9XTEUq8/UjcIJFQTLzI/AAAAAAAABL0/MzrQc4KU-oU/s364/Logo.png" alt="Terraria" /></p>

<p>今天推荐一款沙盒游戏 – <a href="http://www.terraria.org/">《Terraria》</a>。“沙盒游戏”是模拟游戏的一个分支，玩家在一个大世界下自由行动，通常没有明确的目标，玩家发挥想象自由创造，例如<a href="http://www.ali213.net/zt/spore/">《孢子》</a>、<a href="http://zh.wikipedia.org/wiki/%E4%BF%A0%E7%9B%9C%E7%8D%B5%E8%BB%8A%E6%89%8B%E7%B3%BB%E5%88%97">《侠盗猎车手》</a>、<a href="https://minecraft.net/">《minecraft》</a>都属于沙盒游戏，其中<a href="https://minecraft.net/">《minecraft》</a>的超高的自由度现在应该是无人不知无人不晓了。</p>

<p>如果你知道 <a href="https://minecraft.net/">《minecraft》</a> 的话，<a href="http://www.terraria.org/">《Terraria》</a> 可以理解为 2D 的<a href="https://minecraft.net/">《minecraft》</a>，但是绝对不是等同，从资源到怪物都完全不同，故事背景就更是一点关系都没有了，唯一相同的就是极高的自由度和挖矿的重要性。如果你连 <a href="https://minecraft.net/">《minecraft》</a> 都不知道的话，看一看下面这个视频，如果你觉得发挥想象挖掘世界、创造物品挺有趣的话，那么我就及其推荐你玩一玩这款游戏，你可以充分享受自己发现世界、创造文明的乐趣。当然和 <a href="https://minecraft.net/">《minecraft》</a> 一样，可以联机和小伙伴们一起进行世界探索。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=127992&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

<p>缺点也和 <a href="https://minecraft.net/">《minecraft》</a> 一样，新人入手比较困难，由于完全没有新手指南（NPC 新手向导除了会告诉你配方外还会告诉你一些小贴士，但是等你听完他的小贴士早就黑天了，然后僵尸来了，然后。。。就没然后了），新手可以到<a href="http://www.mcbbs.net/thread-4917-1-1.html">这里</a>看一看，至少可以帮助平安度过第一夜，然后就是你自由的探索了，等你遇到瓶颈的时候，可以到<a href="http://tieba.baidu.com/f?kw=terraria">贴吧</a>看一看，会很有启发的。当你将原版玩到腻了，就可以尝试打各种各样的 MOD，换种玩法继续玩。总之，这是一款一旦入手就不想放手的游戏。</p>

<ul>
  <li>Windows 用户<a href="http://tieba.baidu.com/p/2591750651">这里</a>下载（注意看安装说明，需要安装一些其他的东西）。</li>
  <li>Windows 上的有钱人可以到 <a href="http://store.steampowered.com/app/105600/">Steam</a> 上购买，联机什么的就不是问题了。</li>
  <li>Mac OS X 用户<a href="http://pan.baidu.com/share/link?shareid=1013474534&amp;uk=4080321956">这里</a>下载（原始的 dmg 找不到了就把自己的 app 压缩了一下传上来了，可能连自己的人物和世界一起打包了，将就着用吧，无法联机，需要联机的请用 <a href="http://pikipity.github.io/blog/wine.html">Wine</a>）。</li>
  <li>IOS 用户可以到<a href="https://itunes.apple.com/us/app/id640364616?mt=8">这里</a>下载</li>
  <li>Andriod 用户可以到<a href="https://play.google.com/store/apps/details?id=com.and.games505.Terraria">这里</a>下载</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[processing 练习作 -- 3D 色子]]></title>
    <link href="http://pikipity.github.io/blog/processing-prectice-3d-dice.html"/>
    <updated>2013-09-12T00:24:00+08:00</updated>
    <id>http://pikipity.github.io/blog/processing-prectice-3d-dice</id>
    <content type="html"><![CDATA[<p>processing 的练习作 – 3D 色子，旨在练习 processing 的 3D 效果制作。点击鼠标可以抛掷色子。色子的图案没有使用额外的图片，全部使用 processing 直接绘制。源代码在<a href="https://github.com/pikipity/3D_Dice.git">这里</a>。由于不是专注于正方体自由旋转落体的模拟，左移在色子的运动上做的很简单：上升和下落都是一个匀加速直线运动，每次落地撞击损失一半的速度；旋转方面每次根据坐标轴随机选取一个旋转方向，旋转速度和位移成正比；没有考虑触地之后的运动。</p>

<p><img src="https://lh4.googleusercontent.com/-Qzgu5jWc-zY/UjCcf32YpqI/AAAAAAAABI4/myK3RPH83x8/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-09-12%2520%25E4%25B8%258A%25E5%258D%258812.33.52.png" alt="程序截图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一本正经的恶搞 -- 伪基百科]]></title>
    <link href="http://pikipity.github.io/blog/introduction-uncyclopedia.html"/>
    <updated>2013-09-10T04:33:00+08:00</updated>
    <id>http://pikipity.github.io/blog/introduction-uncyclopedia</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-Ths-brV6Q7E/Ui4wdOPGFsI/AAAAAAAABIo/Fed-Tb1wjr4/s152/Uncyclopedia_Logo_China_1.png" alt="适度恶搞，有益身心" /></p>

<p>今天找资料的时候无意间发现了这样一个网站，里面全是无厘头的恶搞，看得我完全刹不住车了，不是没见过恶搞，但是像这样一本正经、诚意满满地恶搞还从来没有见过。这个网站就是 <a href="http://zh.uncyclopedia.info/wiki/%E9%A6%96%E9%A0%81">“伪基百科”</a>。页面从结构到文章形式完全仿照<a href="http://zh.wikipedia.org/">“维基百科”</a>，但是内容则没有一点是正经的，建议18岁以下儿童及身心脆弱者、极度爱党爱国人士不要点击进入。</p>

<p><a href="http://zh.wikipedia.org/wiki/%E5%81%BD%E5%9F%BA%E7%99%BE%E7%A7%91">“维基百科”是这样介绍“伪基百科”的</a>：</p>

<blockquote>
  <p>伪基百科（英语：Uncyclopedia），是一个功能、操作方式与维基百科类似，但主要以恶搞为目的而创建的网站群。虽然号称是百科全书，但实际是一个试图以百科全书形式“搞笑”的网站。 </p>
</blockquote>

<p><a href="http://zh.uncyclopedia.info/wiki/%E7%B6%AD%E5%9F%BA%E7%99%BE%E7%A7%91">“伪基百科”是这样介绍“维基百科”的</a>：</p>

<blockquote>
  <p>維基百科（Wikipedia, the Evil and Useless Fucked-up Free Encyclopedia）是一個抄襲偽基百科架構的擺爛惡毒的垃圾網站，相同於偽基百科採用wiki(偽基)架構，亦堅持所有人皆可參與編輯其內容，在網站名稱上採用近似的發音。致使使用者在辨識上陷入重大錯誤，而不自知。</p>

  <p>不僅內容不盡不實，而且資訊富含錯誤量驚人，致使知名如王爾德者亦無法接受！王爾德因理解維基百科在各種意義上實現唬爛與豪洨本質，憤而投靠偽基百科，並成為偽基之神。維基百科依據所謂的「維基倒亂法」，在一定意義上反轉事實與虛幻的傳統形上學認識，影響後世對實在界的真實理解，誤以虛構作品裡的事物代之，規定真實世界的一切都是人類意識內後天創造出來的假有概念，對人類近代史發展上，極大程度之負面影響。</p>

  <p>相較於偽基百科唯一不同的是，維基百科堅持不有趣路線，所以比較多好人普遍接受這種不有趣，因而沉醉其中。基此諸多因素，維基百科出乎進步史觀上意料的發展成網路上最大的百科全書之一，與另外一個相較之下更形枯燥、味如嚼蠟，近一百年來號稱世界第一的大英百科全書編輯群氣得跳腳，潑婦罵街。維基百科亦因此諸多因素成為全世界第一個被罵是公廁的網站。
基於被給予公廁的意義，維基百科從頭髮一直到腳趾開始武裝起來，進軍先進文明國家，嘗試以無聊KUSO的路線來同化偽基百科與大英百科全書，以各種可能的意義上欺騙大眾，進而實現愚民的目的性，雖然內容全是雜碎，但其數目確實令人望而快慰。
在僅能保持被動的現有條件之下，防範維基百科大軍來襲，外型像一隻陽痿公雞的偽中華人民共和國的迷信馬克思的共匪創造了世界十七大奇境之一－－沒用的防火長城，亦無法阻擋維基百科的入侵，因為維基百科是一個被大陸共匪控制的垃圾百科。直至今日，因為太過枯燥乏味到快要沒命，沒有人要去維基百科，所以上帝便賦予了偽基百科的功能，試圖在知識的黑暗時代中開創一條可行的道路。</p>
</blockquote>

<p>读完上面的你是不是发现自己已经不认识“维基百科”了。 o(╯□╰)o</p>

<p>友情提示：由于两者从网页链接到名称都极为相似，做作业的时候注意不要找错网站啊！囧</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LED 亮度控制 -- processing 练习作]]></title>
    <link href="http://pikipity.github.io/blog/light-controller.html"/>
    <updated>2013-09-08T20:52:00+08:00</updated>
    <id>http://pikipity.github.io/blog/light-controller</id>
    <content type="html"><![CDATA[<p>又是一个自己制作的 processing 的练习作，旨在练习 processing 与 Arduino 的串口通信。使用 Processing 编写的可视化控制条，用户可以通过拉拽控制条来调整亮度的数值，通过串口将亮度输送给 Arduino，由 Arduino 实现 LED 灯亮度的调整。由于是很简单的控制，所以就没有考虑什么保护电阻之类的了，直接很简单将 LED 插在了开发板上。视频中就可以看出，当亮度 100% 的时候（也就是电压达到 5V 的时候），LED 会过亮，可能会损坏 LED。</p>

<p>可以到<a href="https://github.com/pikipity/Light_Controller.git">这里</a>下载源码。</p>

<p>程序截图：</p>

<p><img src="https://lh6.googleusercontent.com/-IHYJhlfZPoc/UixyaVzcbYI/AAAAAAAABIM/jEakPgrxBqA/s800/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-09-08%2520%25E4%25B8%258B%25E5%258D%25888.03.49.png" alt="程序截图" /></p>

<p>硬件连接：</p>

<p><img src="https://lh6.googleusercontent.com/-agA7VbMa52g/UixyanVbgEI/AAAAAAAABIY/kfIqR_7uBRs/s640/%25E7%2585%25A7%25E7%2589%2587%252013-9-8%2520%25E4%25B8%258B%25E5%258D%25888%252001%252036.jpg" alt="硬件连接" /></p>

<p>控制视频（没有任何处理直接传渣浪，果然画质惨不忍睹）：</p>

<div><object id="ssss" width="480" height="370"><param name="allowScriptAccess" value="always" /><embed pluginspage="http://www.macromedia.com/go/getflashplayer" src="http://you.video.sina.com.cn/api/sinawebApi/outplayrefer.php/vid=114236415_3342829334_OBrgGio5CWXK+l1lHz2stqlF+6xCpv2xhGm3v1CsJwdaVgiYJMXNb9wG5CvVBstD9HoLHcwydP8i1R4rbKtd/s.swf" type="application/x-shockwave-flash" name="ssss" allowfullscreen="true" allowscriptaccess="always" width="480" height="370" /></object></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[processing 练习作 -- 小画板]]></title>
    <link href="http://pikipity.github.io/blog/practice-for-processing.html"/>
    <updated>2013-09-05T16:57:00+08:00</updated>
    <id>http://pikipity.github.io/blog/practice-for-processing</id>
    <content type="html"><![CDATA[<p>在<a href="http://pikipity.github.io/blog/new-game-processing.html">这篇文章</a>中我简单介绍了用来编写视觉交互式软件的编程语言 <a href="https://processing.org/">processing</a>，这是我的一个练习作 – 一个简单的小画板，旨在练习 Processing 的基本命令和熟悉 Java 的语法。源代码可以到<a href="https://github.com/pikipity/Drawer.git">这里</a>下载。</p>

<p>左侧选择工具，右侧选择画笔粗细和颜色。按”e”键结束当前工具输入（画直线、方框、圆形和不规则图形时有效）；按”r”键画布清零。</p>

<p>截图：</p>

<p><img src="https://lh6.googleusercontent.com/-CQpds8QLtt8/UihEwkBDmPI/AAAAAAAABH4/SeNgK7VRgr8/s640/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-09-05%2520%25E4%25B8%258B%25E5%258D%25884.43.37.png" alt="界面" /></p>

<p>小问题：</p>

<ol>
  <li>没有保存功能。</li>
  <li>颜色和画笔粗细比较单一。</li>
  <li>在画直线、方框、圆形和不规则图形时没有预览功能，不方便。</li>
</ol>

<p>在编写过程中就会发现 processing 语言在功能上还是有一定的欠缺的，比如不能够抓取一部分界面进行重绘，换句话说就是没有“撤销”功能，但是如果仅仅想编写一个静态的交互界面已经绰绰有余了，无怪乎很多 Arduino 教学网站都推荐这个语言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[听黑桐谷歌访谈有感]]></title>
    <link href="http://pikipity.github.io/blog/heitongguge.html"/>
    <updated>2013-08-29T09:33:00+08:00</updated>
    <id>http://pikipity.github.io/blog/heitongguge</id>
    <content type="html"><![CDATA[<p>“黑桐谷歌”是出没于优酷和AB站的著名职业游戏解说，今天推荐的是他的一个访谈，访谈本身很业余（毕竟第一期，业余很正常），但是谷歌坦言的自己开始做游戏解说的历史和一路走来的心路历程才是视频的重点内容。</p>

<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://static.hdslb.com/miniloader.swf" flashvars="aid=736273&amp;page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" />

<p>整个过程主要讲了两个话题（我私自将两个话题扩大化）：如何从默默无闻到一呼百应；中国非商业化活动的现状。</p>

<h3 id="section">平民大神</h3>

<p>当我看着视频，听着谷歌大大说着自己做游戏的过程和期间心中所想的时候，我不知不觉想起了以下几个人名（下面几个人都是公认的神级人物，但都离我们很遥远，但是谷歌大大，应该算是平民级的大神，更加贴近我们的生活实际，所以我在这里推荐他的访谈，而不是以下几个人的）：</p>

<ul>
  <li><a href="http://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC">理查德·斯托曼</a></li>
  <li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;sqi=2&amp;ved=0CCoQFjAA&amp;url=http%3A%2F%2Fzh.wikipedia.org%2Fzh-hant%2F%25E5%258F%25B2%25E8%2592%2582%25E5%25A4%25AB%25C2%25B7%25E4%25B9%2594%25E5%25B8%2583%25E6%2596%25AF&amp;ei=R6geUr-kBOfoiAerqYDYCA&amp;usg=AFQjCNFYNdQBHtLgy9nnA5gYJsQoZxglFA&amp;sig2=z8dPt-xkcLHR3B7jpygeFQ&amp;bvm=bv.51495398,d.aGc">史蒂夫·乔布斯</a></li>
  <li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;sqi=2&amp;ved=0CCoQFjAA&amp;url=http%3A%2F%2Fzh.wikipedia.org%2Fzh-hant%2F%25E6%25AF%2594%25E5%25B0%2594%25C2%25B7%25E7%259B%2596%25E8%258C%25A8&amp;ei=XageUoqlNuTkiAfbnYHYBA&amp;usg=AFQjCNFsmBBPY2jXjFNf4_80u3HXMJT5-g&amp;sig2=2l_1eW8YxA0Yrwy8oT5tfA&amp;bvm=bv.51495398,d.aGc">比尔·盖茨</a></li>
</ul>

<p>回顾它们的创业史，你会发现惊人的相似，它们都具备以下几点：</p>

<ol>
  <li>明确的目标：目标清晰明了，对于自己要做什么、最终结果怎么样，有很准确的定位。还有就是这个目标在自己心中分量必须足够沉重，沉重到即使整个世界都否定了你你还依然能够坚持下去。大多数人即使大学毕业往往还是不知道自己应该做些什么，就算有了目标，当别人否定的时候，也会自己对自己开始质疑，导致徘徊不定，错失良机。</li>
  <li>强大的行动力：不让目标仅仅是个梦想，而是付出自己的努力和心血将其变为现实的行动力是不可或缺的。如果谷歌大大没有前期对市场的考察与研究，没有每个视频背后千百次对游戏的摸索，他也绝对不会像现在这样得到广大粉丝的认可。</li>
  <li>创新力：必要的创新不可或缺，当然我这里所说的创新是对于一个区域甚至世界而言的创新，不是对于个人的创新。谷歌大大逐渐形成的解说风格和其拒绝商业化而采用捐献的方式都是他的创新。</li>
</ol>

<p>以上三点应该是我们每个人最缺乏但是却是成功不可或缺的素质，如果说，高中和上大学都是我们听从父母前辈的建议走的，那么接下来的路怎么走就要靠自己了，别人的经验永远带有个别独立性，别人只能提供方法，我们所能做的只能是借鉴吸收和学习而已。</p>

<h3 id="section-1">中国式咬尾蛇怪圈</h3>

<p>谷歌大大在视频中提到的那个中国游戏视频届的困境，其实也同样是中国开源软硬件的困境。中国人版权意识的淡薄、一味索取不愿付出的习惯必然会导致这样的困境：有的人因为爱好开始做视频（开源软硬件），慢慢地将其变为自己的职业，但为了生计，不得不开始利用自己的爱好寻求经济上的支援，无法得到的情况下只能走上商业化的道路，广告和收费让用户流失，最终放弃。</p>

<p>谷歌大大这种自愿式捐款其实在国外非常常见，很多开源式的软硬件都是使用这种方式来支持自己的生活来实现维护项目的更新，但是在中国这种方式能否走得通还有待进一步的实验，毕竟中国人尤其是中国的电脑和互联网用户已经习惯了只为实体商品付费，而不愿为无形体的商品或是服务付费。这种现状非常不利于开源技术的进步，当所有的科技都被几个大型公司占领的时候，科技发展的速度和前景也就被限制住了，个人的创新也就被限制住了。</p>

<p>但是这种现状的打破需要每个人一点一滴的努力才可以，谷歌大大在微博上放出捐款名单的做法我是很支持的，这种鼓励的方式可以看出还是很有效的。</p>

<p>希望每个人对于这种因爱好而诞生的产物多贡献一点一起努力打破这种中国式怪圈。</p>

<h3 id="section-2">最后</h3>

<p>不要忘了加 <a href="http://weibo.com/pikipitywz">pikipity</a> 和 <a href="http://weibo.com/blackgoogle">黑桐谷歌</a> 的新浪微博呦。<a href="https://me.alipay.com/heitongguge">支持原创，一元也可，有你支持，由黑桐谷歌更新</a></p>

<ul>
  <li><a href="http://space.bilibili.tv/43536">黑桐谷歌 B 站卖萌大厅</a></li>
  <li><a href="http://i.youku.com/u/id_UOTE2MDY5NDg=">黑桐谷歌优酷空间</a></li>
  <li><a href="https://itunes.apple.com/cn/app/you-xi-shi-pin-jie-shuo/id660574550?mt=8">黑桐谷歌视频解说 IOS App</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新玩具 -- Processing]]></title>
    <link href="http://pikipity.github.io/blog/new-game-processing.html"/>
    <updated>2013-08-28T12:37:00+08:00</updated>
    <id>http://pikipity.github.io/blog/new-game-processing</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-YJlrgUSftcw/Uh2LCQCqpSI/AAAAAAAABHk/BrDYwd8hf_s/s180/180px-Processing_Logo_Clipped.svg.png" alt="Processing" /></p>

<p>在看 Arduino 的资料的时候无意间找到了一个新玩具 – <a href="http://processing.org/">Processing</a>，专门用来开发视觉交互界面用的语言，基础语言是 Java，优点就和他官方网站介绍的一样：</p>

<ul>
  <li>开源，免费下载</li>
  <li>支持多种输出方式，2D、3D 甚至 pdf</li>
  <li>使用 OpenGL 作为 3D 的引擎</li>
  <li>支持多种操作系统，Linux, OSX, Windows</li>
  <li>网络上有众多的扩展库支持</li>
  <li>大量的资料书籍（虽然都是英文的）</li>
</ul>

<p>我的第一反应是把它当做 Pygame 的替代品。相比 Pygame，Processing 的优点众多：</p>

<ul>
  <li>Java 语言本身的优点：Python 蛋疼的内存管理机制和速度问题现在让我越来越烦心了，Java 在这两点上要好得多。</li>
  <li>
    <p>安装方便：Pygame 毕竟是个民间自发的维护项目，更新缓慢，对于刚刚接触 Python 的新手来说安装的过程中就会遇到重重障碍。Processing 的安装则简单的多，而且更新迅速，各个平台的程序都已经打包好了，直接双击安装就可以了，而且自带 IDE（除了自动补全外其他你能想到的、没想到的功能都有了，界面也挺漂亮的），真的是扫除一切学习障碍，诚意满满。</p>

    <p><img src="https://lh5.googleusercontent.com/-m44lymT_wQs/Uh2LCW7aRFI/AAAAAAAABHo/ONQpnwUPbig/s512/%25E5%25B1%258F%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202013-08-28%2520%25E4%25B8%258B%25E5%258D%25881.30.05.png" alt="自带 IDE 界面" /></p>
  </li>
  <li>语言更加人性化：Python 的语言已经很人性化了，而 Processing 的语言，尤其是默认变量的命名通过语意猜测就可以知道其代表什么了。命名方式也很统一（Python。。。谁用谁知道，我不吐槽了。）</li>
  <li>事件管理更加轻松：相比 Pygame，Processing 简化了事件管理的部分。不再需要专门再编写代码来获得事件，在 Processing 中鼠标与键盘的事件都变成了一个个默认变量，直接使用这些默认变量就可以获得事件。</li>
  <li>更多扩展库的支持：扩展库不仅数量多而且覆盖的范围很广，使得用 Processing 编写出来的视觉交互界面可以很容易的与其他硬件或软件进行交互，甚至很多特效都已经有库支持，只要直接调用就可以了，非常方便省力。</li>
</ul>

<p>当然，缺点也是有的，其并不适合编写游戏，毕竟此语言是为了开发交互式界面而发明的，对于游戏上的开发乏力还是可以理解的。</p>

<p>总而言之，如果仅仅是想快速开发出一个简单的交互式界面，Processing 绝对是不二人选，但是要开发复杂的交互界面或者游戏的话，还是考虑直接用 Pygame 或是 更加基础的 C 或 C++ 吧。还有因为 Processing 的底层语言是 Java，所以对于我这种用惯了 Python 的人来说，换用 Java 是各种不习惯啊。。。（吐槽：为什么每一句后面都要加个分号啊，为什么还要大括号啊，为什么 for 循环这么麻烦啊。。。）</p>

<p><a href="http://pan.baidu.com/share/link?shareid=1374351361&amp;uk=4080321956">入门教程推荐 – 《爱上 Processing》（专门用了讲解了如何将 Processing 与 Arduino 配合使用）</a></p>
]]></content>
  </entry>
  
</feed>
