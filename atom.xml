<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[折腾来折腾去]]></title>
  <link href="http://pikipity.github.com/atom.xml" rel="self"/>
  <link href="http://pikipity.github.com/"/>
  <updated>2013-01-30T00:00:00+08:00</updated>
  <id>http://pikipity.github.com/</id>
  <author>
    <name><![CDATA[pikipity]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[第六章 计时器/计数器]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-6.html"/>
    <updated>2013-04-04T09:29:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-6</id>
    <content type="html"><![CDATA[<p>计时器与计数器使用的寄存器和它们的工作原理是一样的，当计时时脉从“0”变为“1”的时候，内部的累加器加一，当累加器溢出的时候，检查中断，如果中断置能，便进入中断，否则重新开始计数。它们唯一的不同就是使用的计时时脉不一样，计时器使用的是内部时脉，因为内部时脉很稳定，所以可以用来计算时间；计数器使用的是从 T1 或者 T0 口输入的外部时脉，如果这个外部时脉的信号代表一个事件发生的次数，那么计时/计数器就是在计算这个事件发生的次数。8051中有两个计时/计数器– Timer0 和 Timer1。</p>

<h2 id="section">控制寄存器</h2>

<p>计时/计数器由两个寄存器来控制，它们分别为 TCON 和 TMOD。Timer0 和 Timer1 各有16位用来存放累加数目的寄存器（根据使用的模式不一样，这16位的功能不一样，不一定全部用来计数）。存放 Timer0 累加数目的寄存器是 TH0（高八位）和 TL0（低八位）；存放 Timer1 累加数目的寄存器是 TH1（高八位）和 TL1（低八位）。</p>

<h3 id="tcon">TCON</h3>

<p>TCON 允许位元寻址。每一位代表的意思如下：</p>

<pre><code>TF1  TR1  TF0  TR0  IE1  IT1  IE0  IT0
</code></pre>

<ul>
  <li>TF1 和 TF0: Timer1/Timer0 的溢出旗标。当用来存放累加数目的寄存器（也就是 THx 和 TLx）溢出的时候硬件自动置一，当进入对应中断向量的时候硬件自动清零。</li>
  <li>TR1 和 TR0：Timer1/Timer0 的运行控制位。置一则开启 Timer1/Timer0，Timer1/Timer0 便开始计时或者计数；清零则关闭 Timer1/Timer0，Timer1/Timer0 停止计时或者计数（其实还会受到 TMOD 中 GATE 位的影响，在设置的时候需要注意）。</li>
  <li>IE1 和 IE0: 外部中断 INT1/INT0 边缘触发旗标。当检测到外部中断信号源边缘的时候，硬件自动置一，进入 INT1/INT0 所对应的的中断服务时，硬件自动清零</li>
  <li>IT1 和 IT0：INT1/INT0 触发方式控制位。当置一的时候，外部中断源处于下降沿的时候触发对应的外部中断服务；清零的时候，外部中断源处于低电平（也就是“0”）的时候触发对应的外部中断服务（如果一直处于低电平，就会不停的触发中断服务，使用 INT1/INT0 的时候需要注意）。</li>
</ul>

<p>由于 IEx 和 ITx 是用来控制外部中断 INTx 的，这一部分先不管它们，以后再介绍。TFx 会在进入中断之后硬件自动清零，所以当我们使用计时/计数器的中断服务的时候一般不用管这一位。所以对于计时/计数器，一般真正使用的只有 TRx 位，用来启动和停用 计时/计数器。</p>

<h3 id="tmod">TMOD</h3>

<p>TMOD 不可以位元寻址。TMOD是用来选择8051的计时/计数器工作模式的。在8051中，计时/计数器有四种模式，区别主要是集中在 THx 和 TLx 的16位如何使用的问题上，这四种模式分别为：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">M1</th>
      <th style="text-align: center">M0</th>
      <th style="text-align: center">计时/计数器模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">13位计时器</td>
    </tr>
    <tr>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">16位计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">8位自动重载计时/计数器</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">两个8位计时/计数器</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>13位计时器：一般很少用到，现在的部分8051系列已经去掉了这个功能。使用 THx 的8位和TLx 的第5位组成的13位来存放累加的数字。</li>
  <li>16位计时/计数器：非常常用，用 THx 和 TLx 的整个16位来存放累加数字。可以存放的数字很大，但是每次进入中断之后都需要软件重新载入下次计时/计数的初始值。</li>
  <li>8位自动重载计时/计数器：TLx 用来存放累加的数字，当 TLx 溢出之后，会自动将 THx 中的数字加载到 TLx 中，作为下次计时/计数的初始值。虽然可以存放的数字不大，但是不用每次进入中断之后用软件重新载入，方便，且速度更快。</li>
  <li>两个8位计时/计数器：一般很少用到，现在的部分8051系列已经去掉了这个功能。在这个功能下，Timer1 不能使用，所有跟 Timer1 有关的控制位都转而控制 TH0，TL0则继续由 Timer0 的控制位控制。及其没有用处，因为得到的效果还不如用 Timer0 和 Timer1 分别设置为两个8位自动重载计时/计数器。</li>
</ul>

<p>TMOD 每一位对应的意思如下（前四位对应 Timer1，后四位对应 Timer0）：</p>

<pre><code>GATE  C/T  M1  M0  GATE  C/T  M1  M0
</code></pre>

<ul>
  <li>GATE：选择开启方式是硬件控制还是软件控制。当置一的时候，开启方式是硬件控制，当 TCON 中 TRx 置一且 INTx 为高的时候，对应的计时/计数器才开始计时/计数，否则不开启；当清零的时候，开启方式为软件控制，TRx 置一就可以开启。</li>
  <li>C/T：计时器和计数器选择位。置一则为计数器，清零则为计时器。</li>
  <li>M1 和 M0：计时/计数器模式选择位，对应的模式见上表。</li>
</ul>

<h2 id="section-1">设置思路</h2>

<p>在使用计时/计数器的时候要先对其进行设置，例如选择哪个计时/计数器，什么模式，初值为何，都要预先设置，但由于涉及的寄存器有四个，所以考虑的时候有些复杂，下面介绍的是设置的基本思路。</p>

<p>首先，你要明确以下几个问题，然后再开始设置：</p>

<ol>
  <li>你要使用哪个计时/计数器，是 Timer0 还是 Timer1？用做计时器还是计数器？</li>
  <li>你所使用的计时/计数器什么时候开启？开启方式是什么，是软件开启还是硬件开启？</li>
  <li>你所使用的计时/计数器的工作模式是上面四种中的哪一个？</li>
  <li>开启的时候，计时/计数的初值是多少？每次运行完中断之后的重载值是多少？</li>
</ol>

<p>明确了以上问题，就可以开始设置计时/计数器了。可以遵照下面几步走：</p>

<ol>
  <li>
    <p>设置 TMOD。建议 Timer0 和 Timer1 分开设置，运用 <code>ANL</code> 和 <code>ORL</code> 两个命令，在不干扰另一个计时/计数器的情况下，设置自己需要的那一个。虽然命令行数增加，运行时间增加，但是多消耗的时间很少可以忽略，好处是不会混淆。<code>ANL</code> 用来清零，需要清零的位放零，其他位放一，<code>ORL</code>用来置一，需要置一的位放一，其他位放零。例如要设置使用 Timer0作为计数器，软件开启，模式为16位计时/计数器，可以这样设置 TMOD：</p>

    <pre><code>ANL TMOD,#11110101B
ORL TMOD,#00000101B
</code></pre>
  </li>
  <li>
    <p>设置计时/计数的初值，根据选择的模式和需要，对 THx 和 TLx 进行赋值。当将其作为计时器的时候会有个计时周期（也就是多久进行一次加一操作）的问题。</p>

    <p>对于
8051而言，存在两种时间：时钟周期和机械周期。时钟周期就是时钟电路的振荡频率所对应的周期，也就是 <script type="math/tex">\frac{1}{f_{osc}}</script>。机械周期是 CPU 完成一个基本操作（取指令，读或写数据等）所需要的时间，8051中12个时钟周期等于一个机械周期，也就是<script type="math/tex">\frac{12}{f_{osc}}</script>。计时器的计时周期就是机械周期，对于<script type="math/tex">12MHz</script>震荡频率而言，也就是<script type="math/tex">1\mu s</script>。这样我们就可以计算出我们需要的初值是多少了。如果选择的模式是16位计时/计数器，我们可以用如下方式进行赋值（x就是你要预设的初值）：</p>

    <pre><code>MOV TH0,#HIGH (65536-x)
MOV TL0,#LOW (65536-x)
</code></pre>

    <p>如果是8位自动重载计时/计数器，可以这样设置初值（y是要重载的值，x是预设的初值）：</p>

    <pre><code>MOV TH0,#(256-y)
MOV TL0,#(256-x)
</code></pre>
  </li>
  <li>
    <p>开启，跟你的需要，在必要时候，将 TRx 置一。</p>
  </li>
</ol>

<p><img src="https://lh6.googleusercontent.com/-f35zg4EmAZw/UVz2cCeJePI/AAAAAAAAAqU/uyTI6Cl2kE0/s640/Countdown%2520timer%2520with%2520microcontroller%2520AT89C51.png" width="480" alt="AT89C51 制作的时钟（图片来自 Engineers Garage）" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Proteus 中使用 UART串口与PC进行互动仿真]]></title>
    <link href="http://pikipity.github.com/blog/use-uart-in-proteus.html"/>
    <updated>2013-04-02T22:26:00+08:00</updated>
    <id>http://pikipity.github.com/blog/use-uart-in-proteus</id>
    <content type="html"><![CDATA[<p>在 Proteus 中进行单片机仿真的时候，可能会需要进行 UART 串口的仿真，当然我们可以通过 “Virtual Terminal” 来仿真 UART 串口的输入和输出，但是有时候是需要单片机与电脑连同后，由电脑上的软件通过 UART 串口进行数据的收发，这个时候如果再用 “Virtual Terminal” 的话并不能很好的仿真出软件与单片机之间的通信结果。</p>

<p><img src="https://lh4.googleusercontent.com/-0QW99JxJmok/UVsMhdpHWjI/AAAAAAAAApw/c7DoTmnOUG0/s800/Virtual_terminal.gif" width="950pt" alt="Proteus 中的 Virtual Terminal" /></p>

<p>于是，我决定用虚拟端口工具，在 Windows 中模拟两个端口直接连接在一起的情况。我使用的虚拟端口软件是 “Configure Virtual Serial Port Driver” （简称 “VSPD”）。这个软件可以虚拟出任意两个 COM 口（也就是串列口）之间的连接，设置也很简单，只要选择要连接的两个端口，然后点击“添加端口”就可以了，要取消的话，只要点击“重置端口”，你设置的端口就全部取消了。大家可以到这里下载<a href="http://pan.baidu.com/share/link?shareid=443416&amp;uk=4080321956">破解汉化版</a>。</p>

<p><img src="https://lh4.googleusercontent.com/-0iOkN3SazmU/UVsWic47b6I/AAAAAAAAAqE/x28t6nHYFGU/s800/VSPD.gif" width="VSPD 设置" /></p>

<p>有了这个软件我们就可以在 Proteus 中与 PC 进行单片机的 UART 串口通信仿真了。首先在 Proteus 中右键，在 Library 中找到搜索 “COMPIM” 就可以找到 UART 串口接头，将其和单片机相连，TXD对TXD，RXD对RXD，然后双击 “COMPIM”，设置波特率和将要使用的 COM 口，然后设置 VSPD，将对应的 COM 口和需要的 COM 相连就可以了。</p>

<p><img src="https://lh5.googleusercontent.com/-5LeyirS6M3E/UVsWYJjBMxI/AAAAAAAAAqA/kiNOxjZ1a1k/s800/COMPIM.gif" width="Proteus 中的 COMPIM" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地图投影和球体点距相关]]></title>
    <link href="http://pikipity.github.com/blog/di-tu-tou-ying-he-qiu-ti-dian-ju-xiang-guan.html"/>
    <updated>2013-04-02T21:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/di-tu-tou-ying-he-qiu-ti-dian-ju-xiang-guan</id>
    <content type="html"><![CDATA[<p>感谢 <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#122;&#101;&#110;&#116;&#097;&#111;&#052;&#050;&#049;&#049;&#048;&#064;&#113;&#113;&#046;&#099;&#111;&#109;">Diegozeng</a> 的投稿。（标题很专业的样子 ( ⊙o⊙ ) ）</p>

<p>今天的话题来源于下面这张图片.</p>

<p><img src="https://lh4.googleusercontent.com/-IYF2HAvxXzY/UVrXw4li8qI/AAAAAAAAApY/CbqqSDd7emw/s365/Untitled1.png" width="480" alt="图一" /></p>

<p>下面是美国人对此图的描述：</p>

<blockquote>
  <p>Take a close look at the North Korea war room photos.  The maps showing the ballistic missile trajectories use a flat earth projection- straight in over the Pacific Ocean.</p>
</blockquote>

<p>地图上显示了几条比直的由朝鲜飞向美国的导弹线路，乍一看没什么特别的. 其实如果这些“直线”真的是所谓的导弹轨迹的话，那么朝鲜的导弹实际上是走了“弯路”了，也许会需要更多的成本去支持这次导弹的飞行。把北朝鲜到美国奥斯丁最近的路线画出来，实际上应该是这样的:</p>

<p><img src="https://lh6.googleusercontent.com/-GzZTuUHHBcI/UVrXwyx4ECI/AAAAAAAAApg/KkYFVhrmuac/s364/Untitled2.png" width="480" alt="图二" /></p>

<p>看起来的确有点奇怪，很多人也许有一个疑问，两点之间的最短距离轨迹不应该是连接他们之间的直线么,这大概成为了一种 common sense. 新浪微博 @盈川兄 转了这张图片，从底下的评论来看，还是有很多人的第一反应是：朝鲜的导弹路线是最近的.</p>

<!--more-->

<p>这其实是一个有意思的地理问题, 我们现在通常看到的地图都是平面的，而地球是类求体（有点像一个梨子）. 这是怎么做到的. 相信高中学文的同学都有个大概的了解了，这个过程是通过一种叫“地图投影”的办法实现的. 由于地球的表面近似是一个球面，上面任意一个点其实可以用（$\phi,\lambda$）来表示（结合球坐标（$r，\phi，\lambda$），因为$r$可以看做一个常数，球面就可以降维到二维的（$\phi，\lambda$）），而投影以后的是一个平面，对应的就是平面直角坐标系xOy了，因而其上任意一点可以用（$x，y$）来表示.这是一个二维到二维的变化，从数学维度的角度想一想，这就是一个二维坐标系的转化，并没有升降维的麻烦，应该不是一个太过复杂的过程(一个简单的例子：直角坐标系转极坐标系，就是一个极为简单的过程). 不过仔细一想，球面和平面毕竟不一样，笔者小时侯曾经吧地球仪表面的那层纸撕了下来，愣是没能铺成一个平面的类似地图的东西，总有些“隆起”或者“下凹”的地方. 因而当时就有了一种想法，平面的地图都是“不准的”，或者说，至少不能简单粗暴地完成一个曲面到平面的转换. “地图投影”很大程度上解决了这个问题，当然方法和种类有很多种，具体请看<a href="http://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9B%BE%E6%8A%95%E5%BD%B1">这里</a>，不过大概的思路都是一致的，正如前面说的，将曲面转换成平面，笔者小时候的经历验证了“物理法”是不可行的，因而这样的地图投影法自然会带来一定程度的失真. 也就是说，从理论上讲，地图上的大多数看起来是直线的地方其实在实际中并不是直线，而看起来是曲线的在实际中却可能真的是一条直线. 所以也就不难理解为什么图二的曲线是北朝鲜到美国奥斯丁最短的距离，而不是图一所示的直线了. 不过比较坑爹的情况是，基本每个地图都有比例尺，这就让人忍不住用比例尺以直线去丈量两地间的直线距离，而之前的讨论有说明了我们实际丈量很可能是一条曲线，尤其对于较远距离的两点，这个偏差应该会更大些，也就是说，地图上每一块特定区域都应该对应一个特定的比例尺。好吧，其实经过上面的分析，大家也都能发现所谓比例尺的确是“不准”的，尤其是表示大范围的（比如世界地图）就尤其不准了, 所以当别人询问北京到巴西圣保罗空中直线距离有多远时，千万别拿着直尺在自家的世界地图上测量在做一个比值运算了，因为你会发现，距离越远，这种“尺量法”的偏差基本上就越大.</p>

<p>接下来再说说图二中的最短路径是怎么画出来的吧. 数学上有个定理：</p>

<blockquote>
  <p>球面上两点的最近距离是这两点对应大圆的劣弧长</p>
</blockquote>

<p>听起来有点复杂，好像还要有点空间想象能力才比较好理解. 这段劣弧在地理上叫做“测地线”，也就是地球表面任意两点间距离最短的连线. 大圆是指截面过圆心的圆，是过着两点的所有圆构成的圆系中半径最大的一个. 其实简单说起来可以这么记忆：“半径越大，弧长越短.”，这也是高中地理老师经常搪塞不太喜欢数学的文科生的一段总结.下面的图可以简单说明这点：</p>

<p><img src="https://lh4.googleusercontent.com/-Mlf-8W-XdYE/UVrXw1WiO1I/AAAAAAAAApQ/snqOtVvsDDc/s188/Untitled3.png" width="250" alt="图三" /></p>

<p>很明显<script type="math/tex">l_2</script>这段劣弧对应的圆的半径比<script type="math/tex">l_1</script>的大一些，而<script type="math/tex">l_2</script>的长度却小于<script type="math/tex">l_1</script>。 具体严格的数学证明请看<a href="http://blog.csdn.net/liminlu0314/article/details/8553926">这里</a></p>

<p>当理解了这一点以后，就不难明白为什么图二看似绕弯子的曲线确实最短的距离了，因为它实际上是这样的：</p>

<p><img src="https://lh3.googleusercontent.com/-8-H5IlKYzrQ/UVrXxVKb4LI/AAAAAAAAApc/IumapwHODRk/s339/Untitled4.png" width="480" alt="图四" /></p>

<p>从地球的俯视图（北极朝上）来看，图二的曲线就变成了一天近似直线了，相信如果直接看图四，很多人都会对这条轨迹是北朝鲜到美国OCA的最短距离而深信不疑吧，而图四的直线的确就是对应着图二的那条曲线。太多的时候我们都被自己的眼睛“蒙骗”了，眼见也不一定为实啊。 看起来朝鲜人是要多了解一下GIS（地理信息系统）了，当然这也算是一句玩笑话，人家可没说这是导弹飞行的最终路线,不过作为一个和平爱好者，笔者希望这仅仅是一种设想和恶搞啊，从中了解一些基本的数学地理知识才是最实在的。</p>

<p>最后不禁想吐嘈一下：为什么高中地理是文科学科？众所周知，地理这块到了大学就是纯理的学科，尤其是GIS. 当时分科时笔者挥泪阔别了喜爱多年的地理学科（从小拆地球仪做平面地图的伤不起.）, 地理这东西完全不该和政治历史放在一起称作什么“政史地”啊~~，请让理科的课回到理科生的怀抱中吧！ </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[只有程序员才会相信的黄历 -- 程序员老黄历]]></title>
    <link href="http://pikipity.github.com/blog/huang-li-of-programmers.html"/>
    <updated>2013-04-02T20:27:00+08:00</updated>
    <id>http://pikipity.github.com/blog/huang-li-of-programmers</id>
    <content type="html"><![CDATA[<p>今天在逛 <a href="http://gurudigger.com/">Guru Diger</a> 的时候看到了<a href="http://gurudigger.com/ideas/573">这样</a>一个创意 – <a href="http://sandbox.runjs.cn/show/ydp3it7b">程序员老黄历</a>，非常有趣。（等等，我看看，我想在朝向是东76度，那个今天不变成了？貌似永远不会出现这个方向编程Bug最少(╯▽╰)）</p>

<p><img src="https://lh3.googleusercontent.com/-wtsyR-2zlPI/UVrQv7m9U0I/AAAAAAAAAo4/shdNiBLxR0E/s512/Screen%2520Shot%25202013-04-02%2520at%25208.32.23%2520PM.png" width="480" alt="程序员老黄历" /></p>

<p>我认为是个不错的 CSS 编程范例，直接右键看源代码就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[愚人节快乐！]]></title>
    <link href="http://pikipity.github.com/blog/happy-april-fools.html"/>
    <updated>2013-04-01T18:50:00+08:00</updated>
    <id>http://pikipity.github.com/blog/happy-april-fools</id>
    <content type="html"><![CDATA[<p>大好的愚人节，Google当然不会放过，一起来看看 Google 又放出了哪些愚人节特别项目吧 O(∩_∩)O</p>

<h3 id="google-map-">Google Map 藏宝图模式</h3>

<p><img src="https://lh3.googleusercontent.com/-ftlXpynzbeE/UVl2_57igtI/AAAAAAAAAoU/gkau5SGx-8I/s800/Screen%2520Shot%25202013-04-01%2520at%25207.52.26%2520PM.png" alt="Google Map 藏宝图模式" width="480" /></p>

<p>今天，大家可以在 Google Map中切换到藏宝图模式。开启之后，整个地图变为了古旧的欧式藏宝图风格，街道、国界分界什么全部消失，只剩下一些树木、山峰和标志性地标物。街景模式也变了，变为从一个望远镜里看到的古旧老照片。到<a href="http://maps.google.com.hk/maps?hl=en&amp;tab=wl">这里</a>来体验一下，据说真的有隐藏宝藏哦！！（什么都没找到？那个，你可以和视频里学一学，放到火上烤一烤怎么样？）</p>

<p><img src="https://lh5.googleusercontent.com/-Eevt4yaCNwg/UVl2_9OoobI/AAAAAAAAAoY/DVLh3x-pNL8/s800/Screen%2520Shot%25202013-04-01%2520at%25206.48.38%2520PM.png" alt="藏宝图里的澳门大学" width="480" /></p>

<embed src="http://www.tudou.com/v/n1hyncm52ys/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="youtube-">Youtube 其实是一个规模宏大的视频比赛！！</h3>

<p>经过八年收集参赛作品，从今天起，Youtube 不再接受新的投稿，接下来，Youtube 的三万人评审团将会选出一个胜出视频，届时其他视频都将消失掉了！！</p>

<embed src="http://www.tudou.com/v/EdcwhD3ae4k/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="gmail-blue">Gmail Blue</h3>

<p>历史六年研发，新的 Gmail 诞生了，全蓝色 Gmail – Gmail Blue！！(╯▽╰)</p>

<embed src="http://www.tudou.com/v/Cm59Hhc9dto/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="section">吧啦吧啦版日语输入法</h3>

<p><img src="https://lh5.googleusercontent.com/-5t1K9KWaxWE/UVl8RVcSQII/AAAAAAAAAoo/sFaDO3gh6ZI/s800/Screen%2520Shot%25202013-04-01%2520at%25208.22.55%2520PM.png" alt="吧啦吧啦版日语输入法" width="480" /></p>

<p>这个是真的可以用的哦，到<a href="http://www.google.co.jp/ime/patapata/message.html">这里</a>就可以用了。模拟摩尔斯电码的形式，只需要敲击一个键就可以输入英文、日语、字符表情。但是貌似是这样，你需要的超强的记忆力或者电光火石一样的反应力，就是这样。（话说，那个打字眼睛不错哦，对于不会盲打的亲们很适合哦！！）</p>

<embed src="http://www.tudou.com/v/yKdicT_4Wnk/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h3 id="google-">Google 嗅觉</h3>

<p>这个作为压轴，因为这是最有意思的了，现在，Google 允许你通过气味进行搜索，并可以在结果中提供搜索结果的气味，快到<a href="http://www.google.com/intl/zh-TW/landing/nose/">这里</a>开始 Google 的嗅觉搜索吧（Google 提醒您：如要查詢較為敏感的內容，請啟用安全搜尋以防萬一。你是不是想歪了 (╯▽╰)）。希望大爷您愚人节玩的开心 (have fun)！！</p>

<embed src="http://www.tudou.com/v/PXEZRBe-0Cc/&amp;resourceId=103356984_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你真的懂 Excel 么？]]></title>
    <link href="http://pikipity.github.com/blog/excel-game.html"/>
    <updated>2013-03-31T11:46:00+08:00</updated>
    <id>http://pikipity.github.com/blog/excel-game</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-UlxnYCvwxMM/UVe59_pmBZI/AAAAAAAAAnc/Wmuz-QC1iBI/s550/5153b5fd15930.png" alt="Excel RPG" width="550pt" /></p>

<p>是的，你没有看错，一名加拿大会计师 Cary Walkin 用 Excel 做了一个 RPG 游戏 Arena.Xlsm。可在 Excel 2007、Excel 2010、Excel 2013 版本中运行，游戏虽然不大，只有 1M 大小，但是内容并不输给一般的 RPG 游戏：</p>

<ul>
  <li>超过 2000 种随机生成的敌人；</li>
  <li>超过 1000 种物品可组成39种物品组合；</li>
  <li>8 个 BOSS,4个不同的结局；</li>
  <li>4 个区域供玩家探索；</li>
  <li>31 种法术技能；</li>
  <li>15 种独特物品，具有独一无二的属性；</li>
  <li>36 项成就。</li>
</ul>

<p>看着就很想玩了吧，可以到<a href="http://pan.baidu.com/share/link?shareid=428267&amp;uk=4080321956">这里</a>下载。我认为这件事可以告诉我们两点：</p>

<ol>
  <li>编程什么的貌似谁都可以学会嘛！</li>
  <li>学会计的貌似很闲嘛！</li>
</ol>

<p><img src="https://lh3.googleusercontent.com/-hO807qyDQoY/UVe1xV7uKPI/AAAAAAAAAm4/RRZ626Cn6cw/s520/Screen%2520Shot%25202013-03-31%2520at%252012.02.57%2520PM.png" alt="Excel 三国杀" width="550pt" /></p>

<p><img src="https://lh4.googleusercontent.com/-8krewItCKJU/UVe1xeyvn5I/AAAAAAAAAm0/P7PrgT_re08/s523/Screen%2520Shot%25202013-03-31%2520at%252012.03.36%2520PM.png" alt="Excel 三国杀" width="550pt" /></p>

<p>另外一个是已经很出名的 Excel 三国杀，已经有了PC、Android、IOS 三个版本，快点下载来试试吧。点<a href="http://www.mafengwoo.com/">这里</a>去官网。</p>

<p>所以说，不要再说你会 Excel 了，山外有山，人外有人。现在用 Latex 用的，打开 Word 都不晓得怎么用了，更不要说 Excel 了，我还是研究研究怎么用 Python 读取和写入 Excel 比较靠谱吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贫嘴的鞋子]]></title>
    <link href="http://pikipity.github.com/blog/talking-shoe.html"/>
    <updated>2013-03-29T02:24:00+08:00</updated>
    <id>http://pikipity.github.com/blog/talking-shoe</id>
    <content type="html"><![CDATA[<p>Google在SXSW 2013大会上展示了叫做 “Talking Shoe” 的运动鞋，下面是一个宣传视频。</p>

<embed src="http://player.youku.com/player.php/sid/XNTI0NjM0NzQw/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

<p>有没有发现，神烦啊，我穿个鞋子而已，做什么，记录我的一举一动，还要发微博？不，我相信，那一定不是微博，那一定是 Google+，绝对是。听听那怪蜀黍一样的怪异声音（要是谷歌娘的声音我就不发出来吐槽了）：</p>

<ul>
  <li>在你站着不动的时候他会说：如果站着不动也是项运动的话，你丫肯定是世界冠军了！</li>
  <li>在你坐着不对的时候他会说：真他娘的无聊啊！</li>
  <li>在你走起来的时候他会说：开始带点感了啊！</li>
  <li>在你小跑起来的时候他会说：我喜欢这种威风吹过脸庞的感觉！</li>
  <li>在探测到你走入街头篮球场的时候他会说：上啊！</li>
  <li>当你完全运动起来的时候他会说：快打119啊你丫太火了！</li>
  <li>在你运动完休息的时候他会说：重新穿上我让咱们再战一场啊！</li>
</ul>

<p>相信我，即使倒贴我钱我也不会要这样鞋子的，因为它会永远只说一句话:</p>

<blockquote>
  <p>This is super boring !</p>
</blockquote>

<p>但是相信我，不是我 boring，是 Google 你闲着没事干了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[震动的 ipad，你可以想象么？]]></title>
    <link href="http://pikipity.github.com/blog/vibrator-ipad.html"/>
    <updated>2013-03-29T01:53:00+08:00</updated>
    <id>http://pikipity.github.com/blog/vibrator-ipad</id>
    <content type="html"><![CDATA[<p>苹果公司发布了一项了与 ipad 有关的专利，是关于支持振动器的音频编解码器。一个双频道编码译码器通常有两个输出引线，在立体声模式中可用来驱动两个扬声器，或者是在单声道模式下驱动一个振动器和一个扬声器。每个频道都有自己的数字 - 模拟转换器以及音频功率放大器，接收声频信号，驱动扬声器。这项专利能让 iPad 像 iPhone 那样，获得振动模式，拥有消息提醒功能。这项专利的发明人是 Timothy Johnson。</p>

<p><img src="https://lh4.googleusercontent.com/-3T2VZxwjuzc/UVSCp1f4oYI/AAAAAAAAAmU/sw9uAy2OWws/s512/6a0120a5580826970c017ee99cdeeb970d-800wi.jpg" width="550pt" /></p>

<p><img src="https://lh5.googleusercontent.com/-DTf1MOTRZAM/UVSCpxhpReI/AAAAAAAAAmQ/dbgBi8aqPe4/s800/6a0120a5580826970c017ee99cdc4b970d-800wi.jpg" width="550pt" /></p>

<p>但是让 ipad 震动起来真的大丈夫？不会震坏么（我是说桌子 (╯﹏╰) ）？那么大的玩意在桌子上如果真的震起来会不会和发生地震一样啊？我很好奇 ( ⊙o⊙ ) ~~~~~~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那年我还是个纯真的小男孩 -- 《唐老鸭大冒险》]]></title>
    <link href="http://pikipity.github.com/blog/duck-tales-2.html"/>
    <updated>2013-03-28T22:38:00+08:00</updated>
    <id>http://pikipity.github.com/blog/duck-tales-2</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/DuckTales2.jpg" alt="唐老鸭大冒险 2" width="350pt" /></p>

<p>听到这个名字好像回忆不起来是什么了，但是看了上面的截图你要是再想不起来，就真的是没有童年了，当年红白机（也就是小霸王啦）上无敌好玩的解密游戏。玩家控制唐纳德在五个不同的地域寻找宝藏，每个地图可以重复进出，最终目标是找齐隐藏地图，打败最终 BOSS，其中包含了大量的解密元素和隐藏要素，不是对地图超级熟悉经常在里面迷路，如果说一个大型迷宫可以迷路也就算了，一个横版过关也可以迷路，这个游戏真的是逆天的无敌有没有。小时后无限手残啊，一个地图打一天都过不了啊，很是怀念啊。</p>

<p>为什么今天突然拿出这个来说呢，因为我看到《唐老鸭大冒险》竟然要出复刻版了，预计会在今年夏季登陆Wii U、XBOX360 以及 PS3 平台。先看一下宣传视频吧，很是期待啊，貌似多了很多关卡啊。</p>

<embed src="http://player.youku.com/player.php/sid/XNTMwOTUyOTI0/v.swf" quality="high" width="480" height="400" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash" />

<p>没关系，对于我们这些没有高端设备的人，可以下个红白机虚拟器在电脑上玩一下老版，回一下童年也是很不错的嘛。对于我们这些手残党，也可以看一下<a href="http://space.bilibili.tv/374377">“岚少”</a>的视频娱乐一下嘛，日文全翻译，很好的。</p>

<embed src="http://player.youku.com/player.php/sid/XNTI4OTAwMTc2/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过几何概型来估算&pi;]]></title>
    <link href="http://pikipity.github.com/blog/find-pi.html"/>
    <updated>2013-03-28T07:52:00+08:00</updated>
    <id>http://pikipity.github.com/blog/find-pi</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/find_pi.jpg" alt="几何概型估算&pi;" width="550pt" /></p>

<p>被涛神要求帮着写了一个通过模拟几何概型实验来估算 π 的 Matlab 函数。这个几何概型的实验是这样的：在一个二维直角坐标系中，存在一个以原点为中心，以1为半径的圆，和一个以原点为中心，边长为2的正方形（如图），向圆中随机投放点，计算此点在圆内的概率（忽略边线）我们可以得到如下公式，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{array}{rcl}
P&=&\frac{S_{circle}}{S_{square}}\\
&=&\frac{\pi r^2}{\left( 2r\right)^2}\\
&=&\frac{\pi}{4}
\end{array} %]]&gt;</script>

<p>所以我们只要将上面得到的概率乘以4，就可以估算出 π 的值。很明显，既然是概率实验，那么存在一次试验中使用点的个数问题，使用的点越多，理论上得到的 π 的值应该越接近真实值。</p>

<p>涛神希望这个函数实现下面几点要求：</p>

<ol>
  <li>可以一次性通过一个矩阵输入多次实验，每次实验中使用的点数不一样。</li>
  <li>将多次实验所得到的 π 的值放在一个矩阵里进行输出。</li>
  <li>使用 <code>rand</code> 函数。</li>
  <li>不使用循环。</li>
</ol>

<p>由于 <code>rand</code> 的函数无法一次性产生多个二维随机数矩阵，又由于不能使用循环，使得这个函数的编写比较麻烦（吐槽一下，即使可以产生多个二维随机数矩阵我也没法进行后续操作啊！！）。于是我的想法如下：</p>

<ol>
  <li>根据最大的点数，用 <code>rand</code> 函数产生一个三维矩阵，前两个维度分别表示每个点的横纵坐标，最后一个维度表示第几次实验。例如，如果进行三次试验，每次试验的实验点数为1，10，100，那么就用 <code>rand</code> 生成一个100*2*3的随机矩阵。</li>
  <li>根据所需要的不同实验中不同的点数对实验结果进行取样。继续上面的举例，我们就在第一个试验的结果（如果结果存在矩阵 <code>a</code> 中，那么实验一的结果也就是 <code>a(:,:,1)</code>）中只使用第一组数据，在第二个实验的结果中只使用前10组数据，在第三个实验的结果中只使用前100组数据。</li>
  <li>通过上面的理论公式，计算得到结果，并输出。</li>
  <li>在整个过程中，使用 <code>reshape</code> 函数进行二维和三维矩阵之间的转化。</li>
</ol>

<p>程序如下：</p>

<pre><code>function y=find_pi(n)
%y=find_pi(n)
%input: n, a array for number of experiments, like [10 100 1000]
%output: y, the approximate value of pi for every experiment

%generate the matrix that will be used to sample results
sample=triu(ones(max(n),max(n)),0);
sample=sample(1:end,[n;n]);
sample=reshape(sample,max(n),2,length(n));
%generate the data matrix
total_number_exp=length(n);
maximum=max(n);
all_experiment=rand(maximum,2,total_number_exp);
%sample results
all_experiment=all_experiment.*sample;
%calculate value of pi
final_experiment=(all_experiment.*2-1);
final_result=sum(final_experiment.^2,2);
y=sum(final_result&lt;1)./reshape(n,1,1,length(n));
y=reshape(y,[1,length(y)]).*4;
</code></pre>

<p>主要用到下面几个常用函数：</p>

<ol>
  <li><code>triu(ones(n,n),0)</code>: 生成一个单位矩阵的上三角矩阵，其中 <code>n</code> 必须是一个正整数。</li>
  <li><code>reshape</code>: 根据需要将矩阵重建为与原矩阵不同维数的矩阵。</li>
  <li><code>rand</code>: 从0到1中抽取随机数生成矩阵。</li>
  <li><code>sum</code>: 求和，可以根据括号中的条件计算符合条件的点的个数。</li>
</ol>

<p>用 <code>y=find_pi([100 1 10 1000])</code> 进行四次测试，结果为 <code>[3.0800 0 3.6000 3.0800]</code>，<code>[3.3200 4.0000 3.2000 3.2240]</code>, <code>[3.3200 4.0000 3.2000 3.1640]</code> 和 <code>[3.3200 4.0000 2.8000 3.0880]</code>，运行正常，结果看起来是真确的啦。</p>

<p>存在一个问题，当运行实验点数较多的情况，比如10000次的时候，函数会卡死，但是把函数语句单独提出来使用一切正常，只是会有小卡顿，看来是我的小 MBP 内存不够了。但是问题还是很明显的，不论最小的点数是多少，都要至少产生两个以最大点数为基础的大矩阵来运算，实在是太浪费了，但是不让使用循环，浪费就浪费吧。函数已放在<a href="https://github.com/pikipity/Find-pi">我的 Github</a>，欢迎来 Fork 我，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google要成立博物馆了？]]></title>
    <link href="http://pikipity.github.com/blog/googleartproject.html"/>
    <updated>2013-03-27T23:24:00+08:00</updated>
    <id>http://pikipity.github.com/blog/googleartproject</id>
    <content type="html"><![CDATA[<p>今天在网上搜索 <a href="https://www.google.com/search?q=google+project+glass&amp;aq=0&amp;oq=google+project&amp;aqs=chrome.0.0j57j65l3j0.4384&amp;sourceid=chrome&amp;ie=UTF-8#hl=en&amp;safe=active&amp;sclient=psy-ab&amp;q=google+project&amp;oq=google+project&amp;gs_l=serp.3..0i20j0l3.615.2967.0.4103.8.8.0.0.0.1.1619.3694.3j1j1j8-2.7.0...0.0...1c.1.7.psy-ab.EQaeD3OJNhU&amp;pbx=1&amp;bav=on.2,or.r_cp.r_qf.&amp;bvm=bv.44342787,d.aGc&amp;fp=f7d9c8fbbb7e8602&amp;biw=1280&amp;bih=728">“Google project”</a> 竟然发现了这样的一个网站 – <a href="http://www.googleartproject.com/zh-cn/collections/">“Art Project”</a>。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject.jpg" alt="Google Art Project" width="550pt" /></p>

<p>里面共收录214个博物馆中8366位艺术家的39859件作品的照片，最让我惊异的是我看到了<strong>“湖南省博物馆”</strong>，但是貌似只有这一个中国博物馆而已，里面的展品也只有50件。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_1.jpg" alt="名单中的湖南省博物馆" width="550pt" /></p>

<p>侧边条允许“查找”、“添加到陈列室”（就是添加到自己账户的收藏里）、“分享”和“幻灯片演示”。“分享”仅支持”Google+”、“Facebook”、“Twitter”和“电子邮件”，中国人常用的社交网络就没有了，但是可以直接分享页面网址（这有个毛用，要网址我直接在地址栏里复制就好了，干嘛还要点你的侧边栏）。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_2.jpg" alt="侧边栏" width="350pt" /></p>

<p>点进艺术品后可以放大，但是仅仅就是放大图片而已，如果图片不清晰，放大也就不清晰了。还可以查看“详细资料”，但是我看了三四个，都是什么都没有，哎，就这样吧，可怜兮兮的。</p>

<p><img src="http://pikipity.github.com/images/post/googleartproject_3.jpg" alt="香港艺术博物馆的 Crisp air in mountains and lakes（还是有高清大图的）" width="550pt" /></p>

<p>总的来看这个 “Google Art Project” 要想获得广泛认可和认知还需要点时间，但是既然 Google 连 Reader 都杀了，说不定这个玩意儿哪天也就没了，趁着还在，上去看看那些艺术品吧，尽管只是照片而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[环保？文明？我们的地狱？]]></title>
    <link href="http://pikipity.github.com/blog/2013-earth-hour.html"/>
    <updated>2013-03-22T18:51:00+08:00</updated>
    <id>http://pikipity.github.com/blog/2013-earth-hour</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/60+CN_logo.jpg" width="550pt" /></p>

<p>2013年2月23日星期六，晚上8:30到9:30是一年一度的<a href="http://earthhour.wwf.org.hk/">“地球一小时”</a>活动，<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83%E4%B8%80%E5%B0%8F%E6%97%B6">“Wiki”</a> 上是这么说的:</p>

<blockquote>
  <p>地球一小时（英语：Earth Hour）是一个全球性节能活动，提倡于每年三月的最后一个星期六当地时间晚上20:30，家庭及商界用户关上不必要的电灯及耗电产品一小时。希望借此活动推动电源管理，减少能源消耗，唤起人们以实际行动应对全球变暖的意识。</p>

  <p>该活动最初由环保团体世界自然基金会澳洲及悉尼晨锋报合作发起，并于澳洲悉尼当地时间2007年3月31日，晚上8:30至9:30期间举行了第一次活动。地球一小时2007有近220万人参与，相信节省了当天悉尼市市电电源的2.2%至10.2%。2008年，该活动被推广到世界各地，全球40多个城市，近380个城镇接力执行该活动。</p>
</blockquote>

<p>玩过《海岛大亨》的同学们都知道，环保主义者什么的最讨厌了~~~~~~。我当然不是反对环保，但是人类文明的进步本身就是对环境掠夺的过程，当这种掠夺超过环境承受能力，那么就被我们称为“破坏生态环境”。但是人类发展如此迅速，怎么不可能超过环境的限制。更何况科技发展到今天，电力带来的污染已经可以说是一直在降低了，更重要的是其他污染因素。其实我想吐槽的是下面的视频，一小时发电厂产生的污染如果和生产你们用的那些荧光灯里的纽扣电池的污染比起来可以说是小巫见大巫了，这样真的“大丈夫”？</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/2UywrjnOaUE" frameborder="0" allowfullscreen=""></iframe>

<p>不管怎么说，还是要宣传一下环保的，从小事做起就好了，下面是<a href="http://www.earthhour.org.cn/index.php">“我做绿V客”</a>的宣传海报，这个活动还是不错的</p>

<p><img src="http://pikipity.github.com/images/post/print-ad.jpg" width="550pt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[海盗湾里最老的种子]]></title>
    <link href="http://pikipity.github.com/blog/thepiratebay-ten-years-old.html"/>
    <updated>2013-03-18T20:49:00+08:00</updated>
    <id>http://pikipity.github.com/blog/thepiratebay-ten-years-old</id>
    <content type="html"><![CDATA[<p>为了庆祝 <a href="http://thepiratebay.se/">“海盗湾”</a> 今年十岁，<a href="http://torrentfreak.com/the-pirate-bays-oldest-torrent-is-revolution-os-130317/?utm_source=dlvr.it&amp;utm_medium=twitter">“TorrentFreak”</a> 网站找到了在湾里漂泊最久的一个种子 – <a href="http://thepiratebay.se/torrent/3211770/Revolution_OS">《操作系统革命》</a>。<a href="http://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD">“维基”</a>上是这么说的：</p>

<blockquote>
  <p>《操作系统革命》（Revolution OS）是一部2001年由J·T·S·摩尔（J. T. S. Moore）导演的纪录片电影，该电影追述了GNU、Linux、自由软件运动以及开放源代码运动长达二十余年的历史。该片的主演有理查德·斯托曼、林纳斯·托瓦兹、布鲁斯·斐伦斯、拉里·奥古斯丁与埃里克·雷蒙等。</p>
</blockquote>

<p>微软首席执行官史蒂夫·鲍尔默(Steve Ballmer)不是说过么：</p>

<blockquote>
  <p>Linux就是癌症</p>
</blockquote>

<p>就让这个癌症来的更猛烈些吧。</p>

<p>最后，让我们来瞻仰一下那些为了自由软件与开源代码付出毕生精力的大神们吧。</p>

<embed src="http://www.tudou.com/v/Nbz3C92uFuQ/&amp;resourceId=0_05_02_99&amp;tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可能真的是我们被 Google 宠坏了]]></title>
    <link href="http://pikipity.github.com/blog/google-reader-user.html"/>
    <updated>2013-03-18T10:04:00+08:00</updated>
    <id>http://pikipity.github.com/blog/google-reader-user</id>
    <content type="html"><![CDATA[<p>转自<a href="http://www.guao.hk/">“谷奥”</a> Kunkka 的<a href="http://www.guao.hk/posts/is-google-doing-evil-for-closing-google-reader.html">“关闭 Google Reader 是作恶之举？”</a>。</p>

<p>Google Reader将要被关闭，大家都很不爽，因为又一个好服务即将离我们而去。</p>

<p>可是惋惜归惋惜，我只是觉得，人应该要感恩，毕竟Google做的已经够多了：它已经无偿地为大家运营了这么一个服务8年。8年了，这个服务没从大家手中拿过一分钱！说白了，就是Google不欠大家什么，即使它关闭Google Reader这个举动再不高明，它还是不欠用户们什么东西。</p>

<p>但是看到那么多人，甚至包括站长也说关闭Google Reader就是作恶，我瞬间就不淡定了。这都啥跟啥嘛，难道粉了Google这么多年的人，连这种基本东西都没搞清楚吗？虽然Google Reader被关闭，确实值得惋惜，但是这跟“作恶”有什么关系吗？是不是弄得你不爽了，就是Google作恶了？</p>

<p>举个简单的例子就是：关闭Google Reader，在我看来，几乎就跟楼下大街上生意不红火的小吃店关门大吉一般，正常的不能再正常。人们可以因为再吃不到既便宜牛肉又给得多的牛肉面而惋惜，但是人们却不会（也不应该）因为老板不再为他们提供这么良心的牛肉面而去谴责老板。</p>

<p>另外，Google自己说的“不作恶”，从来就是指的，赚钱不必作恶；从来就是指的，他们不会对竞争对手用下三滥的手段；从来就是指的，他们不会像别的公司那样，用欺骗，用劫持流量的办法来赚钱。关于这段，<a href="http://www.google.com/about/company/philosophy/">可以看官方页面的第6条</a>。</p>

<p>那么，关闭Google Reader从哪里能说的上是作恶？难道关闭Google Reader这服务就是一种下三滥手段，就是用来排挤竞争对手，就是用来赚亏心钱的？</p>

<p>我一直认为Google是一家有道德，有些许理想主义，有些许天马行空的公司。这是我一直热爱Google的原因。而从关闭GR这事来看，Google提供数据导出方案，提供缓冲时间让用户过渡。我看不出这些做法哪里不道德。这个关闭行动之中，Google的行为合乎法律、合乎情理、合乎道德。虽然关闭GR让我不爽，但是我没法说服自己改变对Google的看法，因为道德还在，理想主义与天马行空依然。</p>

<p>Google还是那个Google，它没变，变的只是人心，被宠坏的人心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Reader 将死，我们要何去何从？]]></title>
    <link href="http://pikipity.github.com/blog/google-reader-die.html"/>
    <updated>2013-03-16T23:15:00+08:00</updated>
    <id>http://pikipity.github.com/blog/google-reader-die</id>
    <content type="html"><![CDATA[<p><img src="http://pikipity.github.com/images/post/google_reader_die.jpg" width="650pt" /></p>

<p>Google 将于<strong>7月1日</strong>关闭 Google Reader 服务已经是大街小巷都知道的新闻了，那天听见同学告诉我这个消息，惊得我心都跳出来了，Google 算你狠，给自己儿子整了个容，结果整成一个半残废就准备直接杀了吃，虎毒尚且不食子，虽然你已经阉割了那么多的儿子，但是那些儿子天生畸形，杀了也就算了，Google Reader 天生丽质，杀他做什么。元首都怒了，Google 你等着，“杀 Reader，壮 Plus” 的司马昭之心我们都懂的好么，不要在找借口了，元首会代表月亮消灭你的。好了，不胡扯了，面对现实，看看现在的我们这些 Google Reader 用户还能做些什么吧。</p>

<embed src="http://www.tudou.com/v/E-0gCwx3TL0/&amp;resourceId=48778612_05_02_99/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400" />

<h2 id="section">请愿</h2>

<p>大家可以到 <a href="http://keepgooglereader.com/">keepgooglereader.com网站</a> 或是 <a href="https://www.change.org/petitions/google-keep-google-reader-running">change.org</a> 参加联名请愿活动，到现在为止，<a href="http://keepgooglereader.com/">keepgooglereader.com网站</a> 上已经有 33425 人参加，<a href="https://www.change.org/petitions/google-keep-google-reader-running">change.org</a> 上有119,339人参加，但是看样子会被 Google 这个腹黑的家伙直接无视掉，还记得11年的改版么，不也是一群人的请愿，最终不也是无疾而终.</p>

<p><img src="http://pikipity.github.com/images/post/google_reader_die-1.jpg" width="550pt" /></p>

<p>或者干脆等待美国人民展现强大的凝聚力，凑集超过10万人提名，这样美国国会就必须受理并给个说法，美国3亿人民啊，上吧，展现你们正义的力量的时候到了，让 Google 放下屠刀立地成佛吧~~</p>

<p>囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧囧</p>

<h2 id="section-1">转战其他产品</h2>

<p>既然不能放弃 RSS，那就用其他的订阅吧，但是要找到一款可以在网页上直接浏览，还可以通过客户端浏览，并且 IOS 上还有客户端的简单好用功能全的 RSS 产品实在是太难了，于是本着免费账号无限取的基本思想原则，我决定一个一个试过来再说。</p>

<h3 id="section-2">国内产品</h3>

<p>国内的 RSS 订阅服务还是很多的，但是据说优良参差不齐，很让人担忧啊。只测试了几个口碑比较好的在线阅览器。经过一番测试后，我认为，<a href="http://xianguo.com/">鲜果</a>可能是最好的了，<a href="http://readwise.net/">美味阅读</a>最华丽值得期待，以下是具体信息。</p>

<ol>
  <li>
    <p>鲜果</p>

    <p><img src="http://pikipity.github.com/images/post/xianguo.jpg" width="550pt" /></p>

    <p><a href="http://xianguo.com/">鲜果</a>算是国内比较执着的 RSS 在线阅览器了，一直踏踏实实的做着一个身为 RSS 订阅器应做的本分，整个界面整洁干净，可以说是没有什么杂余。基本功能也都一应俱全：分享、加星、导入导出、显示已读未读。现在看 Google Reader 将死，想赶紧抢一碗羹，加入 “Take In” 功能，可以一键导入 Google Reader 的订阅，但是导入后好像有点问题，我有这么多未读么？不会吧，加星和已读都没有导入，这也导入的太不彻底了~~~~~。<a href="http://app.xianguo.com/lianbo/">鲜果联播</a>可以同步 RSS 源，且具有 ipad、iphone、Android、Win8、WP8 版本，没有发现 Mac 上可以进行同步的软件。</p>

    <p>如果你想转战国内的 RSS 在线阅览器，这是我的首推！！！</p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>分享、加星、导入导出、显示已读未读、文件夹分类，基本功能一应俱全</li>
          <li>界面整洁干净，没有杂余</li>
          <li>可以一键导入 Google Reader</li>
          <li>具有 ipad、iphone、Android、Win8、WP8 客户端，可以随时阅览</li>
        </ul>
      </li>
      <li>
        <p>缺点：</p>

        <ul>
          <li>只导入 Google Reader 的订阅源，加星和已读标记全部丢失</li>
          <li>没有发现 Mac 上可以进行同步的软件</li>
        </ul>
      </li>
      <li>
        <p>推荐指数：♥♥♥♥♥</p>
      </li>
    </ul>
  </li>
  <li>
    <p>抓虾</p>

    <p><img src="http://pikipity.github.com/images/post/zhuaxia.jpg" width="550pt" /></p>

    <p><a href="http://www.zhuaxia.com/">抓虾</a>也是国内的一个老牌 RSS 在线浏览器了。从上面截图可以看到，我没有导入 Google Reader 订阅，是为什么呢？因为我压根没有找到直接导入 Google Reader 数据的地方，好吧，我可以手动导入，那么我老老实实的手动导入，但是，这是什么，这是什么啊</p>

    <pre><code>	OPML导入
 抓虾在上传OPML文件 “subscriptions.xml” 中遇到错误。
 
 错误原因：
 
 抓虾建议你：

 查查输入的OPML文件是否正确，然后重试
 返回我的频道。
</code></pre>

    <p>导入错误！！！！！！你耍我的吧，你不想混了吧，你不知道 Google 再杀自己儿子啊，你不知道现在大家都在争着一碗羹啊，什么，你说你不想抢，好吧，我只能说：</p>

    <blockquote>
      <p>抓虾，你赢了！囧</p>
    </blockquote>

    <ul>
      <li>优点：…………………………</li>
      <li>缺点：根本无法导入 Google Reader 订阅源，这还有什么好说的</li>
      <li>推荐指数：囧</li>
    </ul>
  </li>
  <li>
    <p>有道阅读</p>

    <p><img src="http://pikipity.github.com/images/post/youdao.jpg" width="550pt" /></p>

    <p>看了上面的图片你一定想问：图片，你肿么了？放心，有道怕你订阅的东西中图片过于刺激，帮你全部屏蔽掉了~~~~~~~~~~~~ 囧。既然你可以”从其他阅读器导入”，那就是说明你也想瓜分 Google Reader 喽，那你的这种图片显示方法，你是要闹哪样，要闹哪样啊~~~~~~~~~~~ 囧。网站在<a href="reader.youdao.com/">这里</a>，说实在的，你还去做词典比较靠谱。</p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>分享、加星、导入导出、显示已读未读、文件夹分类，基本功能一应俱全</li>
          <li>可以一键导入 Google Reader</li>
        </ul>
      </li>
      <li>
        <p>缺点：</p>

        <ul>
          <li>图片显示不正常</li>
          <li>未发现客户端</li>
        </ul>
      </li>
      <li>
        <p>推荐指数：♥♥</p>
      </li>
    </ul>
  </li>
  <li>
    <p>网易云阅读</p>

    <p><img src="http://pikipity.github.com/images/post/yunyuedu.jpg" width="550pt" /></p>

    <p>是的，你没看错，网易不止有“有道”还有<a href="http://yuedu.163.com/">“云阅读”</a>。但是不愧是一家人，图片一律无法显示，网易你搞什么，这难道是我电脑的问题么，不要闹了，不准备到碗里来，就不要摆一个这么好的姿势，弄一个“添加 Google Reader”就以为可以吸引 Google 用户啦，想得美啊。说实话，感觉还不如“有道”，人家还有个文件夹分类，你什么也没有，搞什么。</p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>具有分享、加星、导入导出、显示已读未读等基本功能</li>
          <li>界面算是华丽啦</li>
          <li>可以一键导入 Google Reader</li>
        </ul>
      </li>
      <li>
        <p>缺点：</p>

        <ul>
          <li>图片显示不正常</li>
          <li>没有文件夹分类</li>
          <li>客户端着重的是“读书”部分，我真心不想读你那些网络垃圾小说，别这样，我只是想要个 RSS 而已</li>
        </ul>
      </li>
      <li>
        <p>推荐指数：♥</p>
      </li>
    </ul>
  </li>
  <li>
    <p>美味爱读</p>

    <p><img src="http://pikipity.github.com/images/post/meiweiaidu.jpg" width="550pt" /></p>

    <p>据说是用 Youtube 创始人陈士俊公司 AVOS 研发的，有 iOS 和 Android 客户端。由于还在测试，没法注册新用户，需要用户发送邀请邮件来邀请，但是“新浪微博”、“豆瓣”、“推特”和“Google+”的用户可以直接绑定账户登陆。<a href="http://readwise.net/">美味爱读</a>的华丽程度绝对超越“网易云阅读”好几条街，自带标签，而且标签种类丰富，大多是都是技术宅感兴趣的标签，粗略的看了一下标签里订阅源的内容，发现还是很不错的，没有那些为了吸引用户而弄得无聊信息，由于我选择了“接受英文信息”，所以大部分标签都是英文，但是内容真的很好，要是我不是舍不得我从前的订阅，说不定现在就完全进入“美味阅读”的怀抱了。</p>

    <p>可以一键导入 Google Reader 的订阅，但是导入之后发现很多订阅都丢失了，让人很无语。而且订阅没有已阅读和未阅读的区分，没有文件夹分类，还让我发现了更无语的是出现了下面的提示信息：</p>

    <p><img src="http://pikipity.github.com/images/post/wrong.jpg" width="550pt" /></p>

    <p>但是想想还在测试的话，还是一款很值得期待的产品，毕竟从“标签”这个功能上看，还是诚意满满的嘛。</p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>有 iOS 和 Android 客户端</li>
          <li>界面超级华丽，我都不想当它是 RSS 阅览器了</li>
          <li>自带标签功能，内容很好</li>
          <li>可以一键导入 Google Reader</li>
        </ul>
      </li>
      <li>
        <p>缺点：</p>

        <ul>
          <li>导入 Google Reader 后部分订阅丢失，部分订阅无法打开，不知道之后是否可以正常导入</li>
        </ul>
      </li>
      <li>
        <p>推荐指数：</p>

        <ul>
          <li>作为 Google Reader 替代品的话：♥</li>
          <li>单纯作为另外一个信息来源的话：♥♥♥♥♥</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Yahoo、QQ mail 好像都是在邮箱里面浏览，让我想想，我的 Gmail 挺好了，我真心不想再要邮箱了，我只是想要个 RSS 订阅，我容易么我…………</p>
  </li>
</ol>

<h3 id="section-3">国外产品</h3>

<p>国外产品真心很靠谱，比国内的 RSS 订阅做的好多了，大部分都是抄袭 Google Reader，所以使用起来也没有什么违和感（感谢山寨党，爱死你们了）。</p>

<ol>
  <li>
    <p>Feedly</p>

    <p>当然首推 <a href="http://www.feedly.com/">Feedly</a>，具有 iOS 和 Android 的移动版，完美的实现跨平台阅读。使用 Google Reader 账户登录后，自动将所有东西转移到你的账户，以后用还是一样的账户、一样的内容，只是变换了一下网址而已。<a href="http://blog.feedly.com/2013/03/14/google-reader/">这里</a>还有贴心提示，告诉你如何无痛转移阵地。</p>

    <p><img src="http://pikipity.github.com/images/post/feedly.jpg" width="550pt" /></p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>具有 iOS 和 Android 的移动版</li>
          <li>与 Google Reader 可以说是完全无缝结合，无痛啊，真心无痛</li>
        </ul>
      </li>
      <li>
        <p>缺点：</p>

        <ul>
          <li>载入慢，比乌龟爬稍微快一点，但是再慢有我们学校的网速慢么，我不怕，(╯▽╰)</li>
        </ul>
      </li>
      <li>
        <p>推荐指数：♥♥♥♥♥ <strong>还等什么，快去吧，没啥推荐指数，就它了</strong> ♥♥♥♥♥</p>
      </li>
    </ul>
  </li>
  <li>
    <p>NewsBlur</p>

    <p><a href="http://www.newsblur.com/">NewsBlur</a>照搬了 Google Reader 的功能，同样有 Android 和 iOS 手机与平板应用。但是还没开始找“注册”按钮，我就看到了这个。</p>

    <p><img src="http://pikipity.github.com/images/post/newsblur.jpg" width="550pt" /></p>

    <p>俺就是想要个 RSS 订阅，你收俺钱做什么啊，一年24刀，想钱想疯了的混蛋。╭∩╮（︶︿︶）╭∩╮</p>

    <ul>
      <li>优点、缺点：我都没注册，别问我</li>
      <li>推荐指数：高富帅可以看看</li>
    </ul>
  </li>
  <li>
    <p>The old reader</p>

    <p>嗯，那啥，我承认其实是我找到 feedly 以后就松懈了，但是导入 Google Reader 之后出来这么一段，你是要炫耀用你的人多么？</p>

    <p><img src="http://pikipity.github.com/images/post/theoldreader.jpg" width="550pt" /></p>

    <ul>
      <li>
        <p>优点：</p>

        <ul>
          <li>貌似可以直接导入 Google Reader 的导出文件</li>
          <li>界面完全复刻 Google Reader，没有使用的违和感</li>
        </ul>
      </li>
      <li>
        <p>缺点：导入太慢了，35923个人，你以为我在中国世博会啊</p>
      </li>
    </ul>
  </li>
</ol>

<p>最后留张图纪念一下，别了，Google Reader，一路走好</p>

<p><img src="http://pikipity.github.com/images/post/googlereader.jpg" width="650pt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[向 Github 添加 SSH 公匙]]></title>
    <link href="http://pikipity.github.com/blog/ssh-public-key.html"/>
    <updated>2013-03-12T20:03:00+08:00</updated>
    <id>http://pikipity.github.com/blog/ssh-public-key</id>
    <content type="html"><![CDATA[<p>今天用 octopress 遇到一点小问题，在向 Github 发布自己的 post 的时候出现错误：</p>

<pre><code>Permission denied (publickey). fatal: The remote end hung up unexpectedly
</code></pre>

<p>看到 publickey，我突然想到我好想忘了向 Github 添加我自己的公匙了，问了一下谷姐，看到<a href="http://stackoverflow.com/questions/3617113/github-newbie-problems-permission-denied-publickey-fatal-the-remote-end">这里</a>的解答，果然是这个原因。我想如果重新设定一下 octopress 的github 登陆设置应该也是可以的，但是如果每次重启电脑都要这样来一次也太麻烦了，于是果断还是去添加一次吧，一劳永逸（最好还是先到<a href="https://help.github.com/articles/error-permission-denied-publickey">这里</a>按照步骤检查一下）。</p>

<p>Mac 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-mac">这里</a>，Windows 设置方法见<a href="https://help.github.com/articles/generating-ssh-keys#platform-windows">这里</a>（Windows 需要在 Git Bash 里使用下面的命令），Linux 见<a href="https://help.github.com/articles/generating-ssh-keys#platform-linux">这里</a>，三者大同小异，唯一的区别应该就是复制 ssh key 的时候使用的命令不一样吧。步骤如下：</p>

<ol>
  <li>
    <p>检查是否存在 .ssh 文件夹</p>

    <pre><code> $ cd ~/.ssh
</code></pre>

    <p>如果没有这个文件夹，跳到第三步，如果有，则继续</p>
  </li>
  <li>
    <p>备份一下当前已有的 ssh 秘钥</p>

    <pre><code> $ ls
 $ mkdir key_backup
 $ cp id_rsa* key_backup
 $ rm id_rsa*
</code></pre>
  </li>
  <li>
    <p>产生新的 ssh 秘钥</p>

    <pre><code> $ ssh-keygen -t rsa -C "your_email@example.com"
</code></pre>

    <p>“your_email@example.com”就是github上你用来上传的邮箱，如果你没修改过就是你用来注册账户的那个邮箱，输入上面的命令并回车后会引导你生成你的 RSA 秘钥对，如下：</p>

    <pre><code> Enter file in which to save the key (/Users/you/.ssh/id_rsa): [按回车]
 Enter passphrase (empty for no passphrase): [输入一个通关密语]
 Enter same passphrase again: [把通关密语再输一遍]
</code></pre>

    <p>通关密语一般建议输入一个10到30字元的字符串（别输中文），这关系到你将来传输信息的保密性。成功后你会看到<strong>如</strong>下内容</p>

    <pre><code> Your identification has been saved in /Users/you/.ssh/id_rsa.
 Your public key has been saved in /Users/you/.ssh/id_rsa.pub.
 The key fingerprint is:
 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></pre>
  </li>
  <li>
    <p>将我们的 ssh 秘钥添加到 Github。首先复制我们的公匙，Mac 用下面的命令：</p>

    <pre><code> $ pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>Linux 用下面的命令（如果没有 xclip，先安装一下吧，很好用，<code>sudo apt-get install xclip</code>）：</p>

    <pre><code> $ xclip -sel clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>Windows 用下面的命令：</p>

    <pre><code> $ clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

    <p>然后就是到 Github 网站把公匙粘贴过去。步骤如下：</p>

    <ul>
      <li>
        <p>到你的<a href="https://github.com/settings">账户设定</a>中</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/userbar-account-settings.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击左栏中的 <a href="https://github.com/settings/ssh">“SSH Keys”</a></p>

        <p><img src="https://github-images.s3.amazonaws.com/help/settings-sidebar-ssh-keys.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击 “Add SSH key”</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/ssh-add-ssh-key.png" width="350pt" /></p>
      </li>
      <li>
        <p>在 “Key” 的输入框中粘贴</p>

        <p><img src="https://github-images.s3.amazonaws.com/help/ssh-key-paste.png" width="350pt" /></p>
      </li>
      <li>
        <p>点击 “Add key”</p>
      </li>
    </ul>
  </li>
  <li>
    <p>现在你可以测试一下了，用下面命令</p>

    <pre><code> $ ssh -T git@github.com
</code></pre>

    <p>你会得到下面信息：</p>

    <pre><code> The authenticity of host 'github.com (207.97.227.239)' can't be established.
 RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 Are you sure you want to continue connecting (yes/no)?
</code></pre>

    <p>输入 “yes”，回车，你会看到下面信息：</p>

    <pre><code> Hi username! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

    <p>如果 “username” 正确，那么就 OK 了。</p>
  </li>
</ol>

<p>如果你看到 “access denied”，请考虑使用 <a href="https://help.github.com/articles/set-up-git">HTTPS</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第五章 中断]]></title>
    <link href="http://pikipity.github.com/blog/scm-priciple-5.html"/>
    <updated>2013-03-12T18:18:00+08:00</updated>
    <id>http://pikipity.github.com/blog/scm-priciple-5</id>
    <content type="html"><![CDATA[<p>中断是单片机中一个非常重要的服务。中断是指由于接收到外围硬件的异步信号或是软件的同步信号，而进行的相应的软件或是硬件上的处理。发出这样的信号被称为中断请求，发出中断请求的硬件或是软件被称为中断源。当中断源产生了中断请求，相应的中断旗标（就是对应的寄存器的一个 bit）便会置“1”，8051的 CPU 每个机械周期里都会去检查这些中断旗标，若发现中断旗标置“1”，CPU便会在执行完当前指令后，将当前的执行状态（以程序计数器和程序状态字等寄存器信息为主）塞入堆叠中保存，然后跳到相应的程序内存地址（这个程序内存地址叫做中断向量）执行那里的中断副程序，直到执行到 “RETI” 指令后结束附程序，将塞入堆叠的执行状态取出，回到之前的主程序继续执行。</p>

<h3 id="section">中断分类</h3>

<p>8051中的中断可分为2两种：</p>

<ol>
  <li>不可屏蔽中断：无法通过在中断屏蔽寄存器中设定位掩码来关闭，典型例子是时钟中断（时钟中断不是指的计时/计数器 Timer0 或是 Timer1，而是一个硬件时钟，其会以恒定频率，如12MHz，发出中断）。</li>
  <li>可屏蔽中断：可通过在中断屏蔽寄存器中设定位掩码来关闭。</li>
</ol>

<p>不可屏蔽中断无法控制，是单片机工作的基础，所以不作介绍。只介绍可以控制的可屏蔽中断。</p>

<h3 id="section-1">中断源</h3>

<p>8051提供了五个中断源。中断源、中断向量、中断旗标及中断旗标所属寄存器都列在下表中：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">中断源</th>
      <th style="text-align: center">中断向量</th>
      <th style="text-align: center">中断旗标</th>
      <th style="text-align: center">中断旗标所属寄存器</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">INT0</td>
      <td style="text-align: center">0003H</td>
      <td style="text-align: center">IE0</td>
      <td style="text-align: center">TCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer0</td>
      <td style="text-align: center">000BH</td>
      <td style="text-align: center">TF0</td>
      <td style="text-align: center">TCON.5</td>
    </tr>
    <tr>
      <td style="text-align: center">INT1</td>
      <td style="text-align: center">0013H</td>
      <td style="text-align: center">IE1</td>
      <td style="text-align: center">TCON.3</td>
    </tr>
    <tr>
      <td style="text-align: center">Timer1</td>
      <td style="text-align: center">001BH</td>
      <td style="text-align: center">TF1</td>
      <td style="text-align: center">TCON.7</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (TXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">TI</td>
      <td style="text-align: center">SCON.1</td>
    </tr>
    <tr>
      <td style="text-align: center">UART (RXD)</td>
      <td style="text-align: center">0023H</td>
      <td style="text-align: center">RI</td>
      <td style="text-align: center">SCON.0</td>
    </tr>
  </tbody>
</table>

<p>具体满足什么条件会产生中断请求会在介绍各个中断源的时候详细介绍。需要注意的就是串列口 UART 的输入输出中断的中断向量都是 0023H，在使用的时候要判断到底是输入还是输出。</p>

<h3 id="section-2">中断置能</h3>

<p>8051在重置之后会关闭所有可屏蔽中断，所以在使用中断之前需要打开需要的中断功能，也就是中断置能。中断功能打开关闭通过中断置能寄存器（IE，地址为 A8H，允许按位寻址）管理。下面是中断置能寄存器各个 bit 的意思（“1”为使能，“0”为关闭）：</p>

<pre><code>EA  --  --  ES  ET1  EX1  ET0  EX0
</code></pre>

<ol>
  <li>EA: 相当于中断的总开关。置“0”就关闭所有中断。置“1”再根据下面的 bit 来看这个中断是否置能。</li>
  <li>ES：串列口（UART）中断使能位。</li>
  <li>ET1：计时/计数器 Timer1 使能</li>
  <li>EX1：外部中断 INT1 使能</li>
  <li>ET0: 计时/计数器 Timer0 使能</li>
  <li>EX0：外部中断 INT0 使能</li>
</ol>

<h3 id="section-3">中断优先级</h3>

<p>当多个中断旗标同时存在时，就会有一个先执行哪个中断向量的问题，8051内置了一个中断优先级，优先级高的先执行，优先级如下（顺序其实是按照中断向量排列的）：</p>

<ol>
  <li>外部中断 INT0</li>
  <li>计时/计数器 Timer0</li>
  <li>外部中断 INT1</li>
  <li>计时/计数器 Timer1</li>
  <li>串列口（UART）</li>
</ol>

<p>8051允许用户设置两层优先级，8051会先执行高层优先级中的中断，同一层中的中断优先顺序则按照上面的排序来进行。两层优先级的归属问题通过中断优先级寄存器（IP，地址为 B8H，允许位元定址）来设定。IP 每一个 bit 代表的意义如下（“1”代表高优先级，“0”代表低优先级）：</p>

<pre><code>--  --  --  PS  PT1  PX1  PT0  PX0
</code></pre>

<ol>
  <li>PS：串列口（UART）优先级</li>
  <li>PT1：计时/计数器 Timer1 优先级</li>
  <li>PX1：外部中断 INT1 优先级</li>
  <li>PT0: 计时/计数器 Timer0 优先级</li>
  <li>PX0：外部中断 INT0 优先级</li>
</ol>

<h3 id="assembly-">Assembly 程序设计</h3>

<p>一个需要使用中断的 Assembly 程序设计的时候需要注意以下几点：</p>

<ol>
  <li>
    <p>由于中断向量都在程序记忆体的开始部分，所以主程序要注意回避中断向量的位置，所以一开始一般通过一个跳跃跳到主程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
        .
        .
        .
	     
     ORG 30H
 MAIN:
        .
        .
        .
     END
</code></pre>
  </li>
  <li>
    <p>两个中断向量之间的空间很短，一般无法放下整个附程序，所以一般在中断向量处通过一个跳跃到其他位置来执行副程序，例如</p>

    <pre><code>     ORG 00H
     JMP MAIN
	
     ORG 03H
     JMP INT0
	
     ORG 0BH
     JMP TIMER0
	    
     ORG 30H
 INT0:
        .
        .
        .
     RETI
	    
 TIMER0:
         .
         .
         .
      RETI
        
MAIN:
       .
       .
       .
     END    
</code></pre>
  </li>
  <li>ORG 声明程序内存地址的时候要按照程序内存的顺序摆放，比如不可以出现 <code>ORG 05H</code> 在 <code>ORG 03H</code> 前面的情况</li>
  <li>在执行中断副程序之前记得保存之间需要保护的变量（填入堆叠就可以了）。结束之后记得把保护的变量提取出来。</li>
  <li>有的时候再执行一个中断的时候不希望其他中断来打扰，记得在执行中断副程序之前关闭中断（ <code>CLR EA</code> ），在执行结束后记得打开中断（ <code>SETB EA</code>）。</li>
  <li>在执行一个中断副程序的时候，如果其中断旗标再次置起，不会重新跳回中断向量。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[别说你知道超级玛丽]]></title>
    <link href="http://pikipity.github.com/blog/super-mario.html"/>
    <updated>2013-03-09T20:02:00+08:00</updated>
    <id>http://pikipity.github.com/blog/super-mario</id>
    <content type="html"><![CDATA[<p>其实超级玛丽是武当出身，使得一手的好梯云纵……</p>

<embed src="http://player.ku6.com/refer/j9ROVzCQYS2Xu4g7rTk1MQ../v.swf" width="480" height="400" allowscriptaccess="always" allowfullscreen="true" type="application/x-shockwave-flash" flashvars="from=ku6" />

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底有多大？来见识“三星共和国”的另一面]]></title>
    <link href="http://pikipity.github.com/blog/samsung-kindom.html"/>
    <updated>2013-03-08T16:49:00+08:00</updated>
    <id>http://pikipity.github.com/blog/samsung-kindom</id>
    <content type="html"><![CDATA[<p>转自 <a href="http://www.cnbeta.com/index.php">“中文业界资讯站”</a>，原文在<a href="http://www.cnbeta.com/articles/228672.htm">这里</a>。</p>

<p>三星有多大？每次看到新闻上说苹果要被三星超越了，总会让人想到这个问题。虽然维基百科、百度百科还有三星官网上都有不同的解答，而且还有三星财报可以看，但是看文字多没意思。同行泡泡网就此在网上搜索了一番，越搜越感觉这简直就是个坑啊。</p>

<p>从建筑搜到了军事，又从军事搜到了化工，然后从化工搜到了金融，又从金融搜到了时尚，甚至还搜到了游乐场和医院，到处都可以看到三星的影子。这个时候我们应该明白做为宇宙第一强国思密达族人的心情了，这哪是大韩民国啊？这就是三星大韩共和国。</p>

<p>今天就让我们抛开三星的电子产品，看看在消费电子领域已经排名世界第一、世界500强排名第20位的三星电子之外，三星到底有多大。</p>

<p>三星是怎样发迹的？大家就不必说啥市场经济优胜劣汰了，这里是东亚，儒家思想还是有根基的，所以三星的发迹很类似当年的红顶商人。</p>

<p>1938年，李秉喆创建三星，并在日本侵略和朝鲜战争中得到了李承晚政权的扶持，并由此走上了快速发展的道路。</p>

<p>1961年，朴正熙发动政变干掉了李承晚之后，觉得应该摆脱美帝的控制，让韩国也成为一个制造业强国。于是就选择了三星、现代、大宇等几家之前与李承晚颇有渊源的企业，并摒弃了之前的称政治因素。韩国经济，由此开始腾飞，而朴正熙也一手缔造了“汉江奇迹”，三星、现代、大宇、LG、海力士等等，开始与日本企业并驾齐驱。嗯，前天刚上任的韩国总统朴槿惠，就是朴正熙的女儿。</p>

<p>而李秉喆的儿子李健熙在接手三星之后，也充分利用政治的庇佑，比如2008年就曾有报道，三星内部存在一个2亿美元的贿赂基金，专门用来打点政府官员，于是你看看上面这张图，当三星掌门李健熙步入会场之后，李明博总统温顺地低下了头。</p>

<p>你说，三星有多大？下面我们就来欣赏一下小弟这几天在网上搜到的图片。再强调一点，不包括三星电子哦，我们只看三星的另一面。</p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008010479808576.jpg" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10080112123076784.jpg" alt="三星物产，2011年世界五百强排名第492名" width="550pt" /></p>

<!--more-->

<p><img src="http://pikipity.github.com/images/post/samsung/10080121994090317.jpg" alt="台北101，台湾本地人的念法是101，不是咱们说的幺零幺" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008013661729490.jpg" alt="迪拜哈里法塔" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008014816964185.jpg" alt="除了这个核电站之外，三星物产还拿下了阿联酋阿布扎比Shuweihat 电力公司的S2建造订单" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008025248814449.jpg" alt="三星重工，以造船、太阳能、风能和发电厂建设为主。其中造船是最大的一块业务。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008026411133697.jpg" alt="三星造船厂是当前全球订单数量最多的造船厂之一。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008027723092110.jpg" alt="三星重工在山东威海和浙江宁波，均有造船厂。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10080281334628196.jpg" alt="三星TECHWIN，三星下属这个公司的产品线，算的上是距离老百姓最遥远的了。从安防监控，再到坦克火炮，最后还有航空服务。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/1008029637653742.jpg" alt="装甲车和自行火炮，是三星TECHWIN的招牌产品。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10080210369955372.jpg" alt="三星K9自行榴弹炮，据称是当前世界上最先进的自行榴弹炮。只是，在延坪岛炮战中，貌似韩国军队装备的这货出了故障，搞得被朝鲜火炮狠揍了一顿。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/100802111000979522.jpg" alt="有点模仿俄罗斯雅克130的味道。当然天朝L15教练机也是模仿的雅克130。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/100803121673665418.jpg" alt="这个真不错，有点西科斯基的海王直升机的感觉。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10080313730193648.jpg" alt="三星TECHWIN的航空服务，机队机型非常齐全。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/100803141641805330.jpg" alt="直升机、公务机，各种机型一应俱全。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101112151468661597.jpg" alt="当然也少不了波音、空客这样的大飞机。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101112161276175383.jpg" alt="当初李健熙觉得汽车才是集科技成果于大成的产品，于是组建了三星汽车。只是，面对丰田、通用、大众这样的对手，甚至在面对大宇、现代这样的对手时，三星汽车还是有点资历尚浅。最终，雷诺收购了三星汽车70%的股份，成立了雷诺三星汽车。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10111217859015335.jpg" alt="虽然雷诺占据主导位置，但是三星要想收回这些股份，可以说是易如反掌吧。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101112181522279939.jpg" alt="三星Q5，就是雷诺科雷傲的韩国版本。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10111219595613773.jpg" alt="三星SM7，同时销售的还有三星SM3、SM5，总计三款车型。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101112201827578774.jpg" alt="三星的化工企业，更加庞杂。从我们喝水的杯子，到我们吃药的胶囊，甚至还有农业用的化肥，统统都在三星化工的生产范畴之内。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101421211430894886.jpg" alt="除了自己的研发，三星化工还联手了道达尔、BP等公司，成立了三星道达尔、三星BP等公司，与三星自己的三星精密化工、三星石油化工等，共同组成了三星化工帝国。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10142122229992146.jpg" alt="三星化工的产品线，几乎涵盖了当前全世界所有的工农业领域，由此我们也可看出三星化工的实力。" width="550pt" /></p>

<p><img src="http://photocdn.sohu.com/20130306/Img367932586.jpeg" alt="这几天在网上有一篇名为《亚洲九大权势美貌富婆》八卦文中，有韩国第一毛织董事长李叙显的介绍。那，李叙显是谁呢？她就是三星掌门李健熙的女儿。而第一毛织，则是三星旗下韩国最大的服装厂商。旗下BEAN POLE更是一款流行世界的市场品牌。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10145224540117087.jpg" alt="这几个明星，看海报上写的，是2IN1，只熟悉硬盘里那几部电影的小弟我不认识哈。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10145225240788886.jpg" alt="米帅也代言BEAN POLE了，上面那个花样美男是谁？长的挺俊俏！" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101452261849862297.jpg" alt="三星在韩国首尔市中心，拥有一家五星级的酒店，同时也是韩国曾经最豪华的酒店，这就是三星首尔新罗酒店。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101452271114465686.jpg" alt="除了在首尔，三星在韩国旅游胜地济州岛也拥有一间新罗酒店。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101452282129990328.jpg" alt="近年来新罗酒店走出韩国，例如在苏州就开办了金鸡湖新罗酒店。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10145229517305127.jpg" alt="三星爱宝乐园，据说是亚洲第四韩国第一，号称韩国的迪斯尼。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/10145230247394712.jpg" alt="好像花市一样，似乎在努力营造一种童话的感觉。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101801311358926914.jpg" alt="说句实话，这游乐园不要说跟迪斯尼比了，就连深圳的欢乐谷都差太远。几盆花、光秃秃的山，弄个摩天轮，这跟县城的市民文化广场倒是差不多。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101801321691395429.jpg" alt="当然，我上一页只是看图说话哈，这是三星爱宝乐园的导游图，有兴趣的玩家可以去韩国京畿道龙仁市体验一把。" width="550pt" /></p>

<p><img src="http://pikipity.github.com/images/post/samsung/101801331823035907.jpg" width="550pt" /></p>

<p>除了上面我们介绍的，三星还有很多产业，但是限于篇幅，我也就懒得再去搜图片了。知道一点就好了，在世界500强的企业中，数码科技类的企业排名最高的就是三星电子，位列第20名，而其后的富士康位列43，苹果更是只列第55名。其他方面，三星生命保险，排名274，而三星物产，排名492。</p>

<p>看完了三星的另一面，估计你会明白为什么华盛顿邮报当年会写出“韩国三星共和国”这样标题的文章。嗯，多看另一面，总会有发现。就像我们现在看微博，朴槿惠被说是独裁者的女儿，但是却没人去说朴正熙所创造的“汉江奇迹”。当然，朴正熙掌权韩国18年，也确实长了点，但总比某些世袭好多了吧？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单片机原理及程序设计 第四章 汇编语言]]></title>
    <link href="http://pikipity.github.com/blog/assembly-language.html"/>
    <updated>2013-03-07T20:39:00+08:00</updated>
    <id>http://pikipity.github.com/blog/assembly-language</id>
    <content type="html"><![CDATA[<p>学习汇编语言可以很好地帮助单片机的学习，而且一个好的汇编语言写成的程序要比实现相同功能的 C 语言更短更快。但是难以理解，移植性差，所以现在一般都用 C 语言来为单片机编程，只有部分硬件的驱动或是 C 语言难以控制的部分来用汇编编写。</p>

<h2 id="section">汇编指令分类</h2>

<p>汇编语言中的指令分为两大部分：</p>

<ol>
  <li>指令（Instruction）：指令会被编译器编译为机器语言将来提供给单片机。指令的数量很有限，不像 C 语言，内置函数就一堆，所以用到什么查表就可以了，表格会在后面提供。</li>
  <li>伪指令（Directive）：伪指令不会被编译器编译为机器语言，仅仅是提供给编译器，为了“编译”而存在的指令。</li>
</ol>

<h2 id="section-1">汇编语言格式</h2>

<p>任何编程语言都有格式，汇编语言也不例外，格式如下：</p>

<pre><code>标记: 操作码 操作数  ;注释
</code></pre>

<p>标记不是每一行都有，需要的时候有就可以了，标记是为了方便对程序内存的寻址，冒号是和标记一起存在的。操作码和操作数就是汇编指令，当然必须有。分号与注释一起存在，不会被编译。</p>

<h2 id="section-2">寻址方式</h2>

<p>再给出所有汇编指令表之前先要介绍一下汇编语言的寻址方式，单片机中对数据的操作最常见的就是将数据从内存的一个地方移到另一个地方，在移动的过程中就需要声明内存地址（内存地址是什么？请回到<a href="http://pikipity.github.com/blog/scm-principle-2.html">第二章</a>，谢谢），那么如何获得这个内存地址呢？就是通过“寻址”来获得。8051 的汇编指令只有四种寻址方式：</p>

<ol>
  <li>直接寻址（Direct Addressing，在表格中简写为 Dir）：直接给出一个16进制数，代表资料记忆体的一个字节地址，从这个地址中拿出数据来操作。只能用于内置 RAM</li>
  <li>间接寻址（Indirect Addressing，在表格中简写为 Ind）：一个 “@” 的符号在加一个寄存器的名字，例如 <code>@DPTR</code>，从这个寄存器中拿出数据，把这个数据当做地址，再从这个地址中拿出数据来操作。可对内置和外扩 RAM 使用。</li>
  <li>寄存器寻址（Register Addressing，在表格中简称 Reg）：直接一个寄存器的名字，例如 <code>R0</code>，从寄存器中拿出数据进行操作。仅对寄存器有效。</li>
  <li>立即寻址（Immediate Addressing，在表格中简称 Imm）：一个井号 “#” 再加一个整数，例如 <code>#1011B</code>，直接对这个整数进行操作。</li>
</ol>

<h2 id="section-3">指令表</h2>

<p>为了方便记忆和查询，指令又分为了五类</p>

<ol>
  <li>
    <p>数据移动：数据移动的指令又根据被移动的数据所在位置分为三个部分。</p>

    <ul>
      <li>
        <p>内部 RAM 内数据的移动</p>

        <p><img src="http://pikipity.github.com/images/post/MOV.jpg" width="550pt" /></p>
      </li>
      <li>
        <p>外部 RAM 内数据读取与写入</p>

        <p><img src="http://pikipity.github.com/images/post/MOVX.jpg" width="350pt" /></p>
      </li>
      <li>
        <p>程序内存数据读取</p>

        <p><img src="http://pikipity.github.com/images/post/MOVC.jpg" width="350pt" /></p>
      </li>
    </ul>

    <p>注意：</p>

    <ul>
      <li>Ri 的意思是 R1 或者 R0，不包括 R2 ~ R7</li>
      <li>
        <p>MOV 指令代表一个1 byte 的机器语言，所以它的操作数中不可能同时出现多个寄存器，例如 <code>MOV R0,R1</code> 是错误的，只能是</p>

        <pre><code>MOV A,R1
MOV R0,A
</code></pre>
      </li>
    </ul>
  </li>
  <li>
    <p>计算：</p>

    <p><img src="http://pikipity.github.com/images/post/MATH.jpg" width="550pt" /></p>
  </li>
  <li>
    <p>逻辑运算：</p>

    <p><img src="http://pikipity.github.com/images/post/ANL_A.jpg" width="550pt" /></p>
  </li>
  <li>
    <p>布尔运算和判断：</p>

    <p><img src="http://pikipity.github.com/images/post/ANL_C.jpg" width="350pt" /></p>
  </li>
  <li>
    <p>跳转：</p>

    <p><img src="http://pikipity.github.com/images/post/JUMP_1.jpg" width="550pt" /></p>

    <p><img src="http://pikipity.github.com/images/post/JUMP_2.jpg" width="350pt" /></p>
  </li>
</ol>

]]></content>
  </entry>
  
</feed>
